
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000065be  00006652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800094  00800094  00006686  2**0
                  ALLOC
  3 .debug_aranges 00000298  00000000  00000000  00006686  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004aa  00000000  00000000  0000691e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003cef  00000000  00000000  00006dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015df  00000000  00000000  0000aab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003802  00000000  00000000  0000c096  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  0000f898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000799  00000000  00000000  0000fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00010361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00011b54  00000000  00000000  00010bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00022743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <main>
      8a:	0c 94 dd 32 	jmp	0x65ba	; 0x65ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 61 32 	jmp	0x64c2	; 0x64c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6d 32 	jmp	0x64da	; 0x64da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 89 32 	jmp	0x6512	; 0x6512 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6d 32 	jmp	0x64da	; 0x64da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 89 32 	jmp	0x6512	; 0x6512 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 61 32 	jmp	0x64c2	; 0x64c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 32 	jmp	0x64d2	; 0x64d2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 85 32 	jmp	0x650a	; 0x650a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6d 32 	jmp	0x64da	; 0x64da <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 89 32 	jmp	0x6512	; 0x6512 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6d 32 	jmp	0x64da	; 0x64da <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 89 32 	jmp	0x6512	; 0x6512 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6d 32 	jmp	0x64da	; 0x64da <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 89 32 	jmp	0x6512	; 0x6512 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 71 32 	jmp	0x64e2	; 0x64e2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8d 32 	jmp	0x651a	; 0x651a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_setupPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setupPinDirection+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f0       	brcs	.+2      	; 0xcba <GPIO_setupPinDirection+0x1c>
     cb8:	d5 c0       	rjmp	.+426    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <GPIO_setupPinDirection+0x24>
     cc0:	d1 c0       	rjmp	.+418    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3d 83       	std	Y+5, r19	; 0x05
     cca:	2c 83       	std	Y+4, r18	; 0x04
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <GPIO_setupPinDirection+0x3a>
     cd6:	43 c0       	rjmp	.+134    	; 0xd5e <GPIO_setupPinDirection+0xc0>
     cd8:	2c 81       	ldd	r18, Y+4	; 0x04
     cda:	3d 81       	ldd	r19, Y+5	; 0x05
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <GPIO_setupPinDirection+0x4e>
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	71 f0       	breq	.+28     	; 0xd06 <GPIO_setupPinDirection+0x68>
     cea:	bc c0       	rjmp	.+376    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cec:	2c 81       	ldd	r18, Y+4	; 0x04
     cee:	3d 81       	ldd	r19, Y+5	; 0x05
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <GPIO_setupPinDirection+0x5a>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <GPIO_setupPinDirection+0x118>
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <GPIO_setupPinDirection+0x66>
     d02:	85 c0       	rjmp	.+266    	; 0xe0e <GPIO_setupPinDirection+0x170>
     d04:	af c0       	rjmp	.+350    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	a1 f4       	brne	.+40     	; 0xd34 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_setupPinDirection+0x8c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_setupPinDirection+0x88>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	98 c0       	rjmp	.+304    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <GPIO_setupPinDirection+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <GPIO_setupPinDirection+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	83 c0       	rjmp	.+262    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	a1 f4       	brne	.+40     	; 0xd8c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <GPIO_setupPinDirection+0xe4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <GPIO_setupPinDirection+0xe0>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	6c c0       	rjmp	.+216    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <GPIO_setupPinDirection+0x10c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <GPIO_setupPinDirection+0x108>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	57 c0       	rjmp	.+174    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	a1 f4       	brne	.+40     	; 0xde4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_setupPinDirection+0x13c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_setupPinDirection+0x138>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e3       	ldi	r30, 0x34	; 52
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <GPIO_setupPinDirection+0x164>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <GPIO_setupPinDirection+0x160>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	2b c0       	rjmp	.+86     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	a1 f4       	brne	.+40     	; 0xe3c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e14:	a1 e3       	ldi	r26, 0x31	; 49
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <GPIO_setupPinDirection+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <GPIO_setupPinDirection+0x190>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <GPIO_setupPinDirection+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <GPIO_setupPinDirection+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <GPIO_writePin+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_writePin+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
     e86:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)){
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <GPIO_writePin+0x1c>
     e8e:	e4 c0       	rjmp	.+456    	; 0x1058 <GPIO_writePin+0x1e4>
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 30       	cpi	r24, 0x08	; 8
     e94:	08 f0       	brcs	.+2      	; 0xe98 <GPIO_writePin+0x24>
     e96:	e0 c0       	rjmp	.+448    	; 0x1058 <GPIO_writePin+0x1e4>
		/*Do nothing*/
	}else{
		switch(port_num){
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <GPIO_writePin+0x3a>
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <GPIO_writePin+0xc8>
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <GPIO_writePin+0x4e>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	71 f0       	breq	.+28     	; 0xedc <GPIO_writePin+0x68>
     ec0:	cb c0       	rjmp	.+406    	; 0x1058 <GPIO_writePin+0x1e4>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	09 f4       	brne	.+2      	; 0xece <GPIO_writePin+0x5a>
     ecc:	67 c0       	rjmp	.+206    	; 0xf9c <GPIO_writePin+0x128>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_writePin+0x66>
     ed8:	91 c0       	rjmp	.+290    	; 0xffc <GPIO_writePin+0x188>
     eda:	be c0       	rjmp	.+380    	; 0x1058 <GPIO_writePin+0x1e4>
		case PORTA_ID:
			if(value == LOGIC_HIGH){
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_writePin+0x8c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_writePin+0x88>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	a7 c0       	rjmp	.+334    	; 0x1058 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	88 23       	and	r24, r24
     f0e:	09 f0       	breq	.+2      	; 0xf12 <GPIO_writePin+0x9e>
     f10:	a3 c0       	rjmp	.+326    	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTA, pin_num);
     f12:	ab e3       	ldi	r26, 0x3B	; 59
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	eb e3       	ldi	r30, 0x3B	; 59
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_writePin+0xbc>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_writePin+0xb8>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	8e c0       	rjmp	.+284    	; 0x1058 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTB_ID:
			if(value == LOGIC_HIGH){
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <GPIO_writePin+0xf6>
				SET_BIT(PORTB, pin_num);
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_writePin+0xec>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_writePin+0xe8>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	77 c0       	rjmp	.+238    	; 0x1058 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	88 23       	and	r24, r24
     f6e:	09 f0       	breq	.+2      	; 0xf72 <GPIO_writePin+0xfe>
     f70:	73 c0       	rjmp	.+230    	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTB, pin_num);
     f72:	a8 e3       	ldi	r26, 0x38	; 56
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 e3       	ldi	r30, 0x38	; 56
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_writePin+0x11c>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_writePin+0x118>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	5e c0       	rjmp	.+188    	; 0x1058 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTC_ID:
			if(value == LOGIC_HIGH){
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	a1 f4       	brne	.+40     	; 0xfca <GPIO_writePin+0x156>
				SET_BIT(PORTC, pin_num);
     fa2:	a5 e3       	ldi	r26, 0x35	; 53
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e3       	ldi	r30, 0x35	; 53
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_writePin+0x14c>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_writePin+0x148>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	47 c0       	rjmp	.+142    	; 0x1058 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 23       	and	r24, r24
     fce:	09 f0       	breq	.+2      	; 0xfd2 <GPIO_writePin+0x15e>
     fd0:	43 c0       	rjmp	.+134    	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTC, pin_num);
     fd2:	a5 e3       	ldi	r26, 0x35	; 53
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e3       	ldi	r30, 0x35	; 53
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writePin+0x17c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writePin+0x178>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	2e c0       	rjmp	.+92     	; 0x1058 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTD_ID:
			if(value == LOGIC_HIGH){
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	a1 f4       	brne	.+40     	; 0x102a <GPIO_writePin+0x1b6>
				SET_BIT(PORTD, pin_num);
    1002:	a2 e3       	ldi	r26, 0x32	; 50
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e2 e3       	ldi	r30, 0x32	; 50
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_writePin+0x1ac>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_writePin+0x1a8>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	17 c0       	rjmp	.+46     	; 0x1058 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	88 23       	and	r24, r24
    102e:	a1 f4       	brne	.+40     	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTD, pin_num);
    1030:	a2 e3       	ldi	r26, 0x32	; 50
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writePin+0x1da>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writePin+0x1d6>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <GPIO_readPin+0x6>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <GPIO_readPin+0x8>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <GPIO_readPin+0xa>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	8a 83       	std	Y+2, r24	; 0x02
    1078:	6b 83       	std	Y+3, r22	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)){
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	08 f0       	brcs	.+2      	; 0x1082 <GPIO_readPin+0x1a>
    1080:	87 c0       	rjmp	.+270    	; 0x1190 <GPIO_readPin+0x128>
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	08 f0       	brcs	.+2      	; 0x108a <GPIO_readPin+0x22>
    1088:	83 c0       	rjmp	.+262    	; 0x1190 <GPIO_readPin+0x128>
		/*Do nothing*/
	}else{
		uint8 value;
		switch(port_num){
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3e 83       	std	Y+6, r19	; 0x06
    1092:	2d 83       	std	Y+5, r18	; 0x05
    1094:	4d 81       	ldd	r20, Y+5	; 0x05
    1096:	5e 81       	ldd	r21, Y+6	; 0x06
    1098:	41 30       	cpi	r20, 0x01	; 1
    109a:	51 05       	cpc	r21, r1
    109c:	79 f1       	breq	.+94     	; 0x10fc <GPIO_readPin+0x94>
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	91 05       	cpc	r25, r1
    10a6:	34 f4       	brge	.+12     	; 0x10b4 <GPIO_readPin+0x4c>
    10a8:	2d 81       	ldd	r18, Y+5	; 0x05
    10aa:	3e 81       	ldd	r19, Y+6	; 0x06
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	69 f0       	breq	.+26     	; 0x10cc <GPIO_readPin+0x64>
    10b2:	6b c0       	rjmp	.+214    	; 0x118a <GPIO_readPin+0x122>
    10b4:	4d 81       	ldd	r20, Y+5	; 0x05
    10b6:	5e 81       	ldd	r21, Y+6	; 0x06
    10b8:	42 30       	cpi	r20, 0x02	; 2
    10ba:	51 05       	cpc	r21, r1
    10bc:	b9 f1       	breq	.+110    	; 0x112c <GPIO_readPin+0xc4>
    10be:	8d 81       	ldd	r24, Y+5	; 0x05
    10c0:	9e 81       	ldd	r25, Y+6	; 0x06
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <GPIO_readPin+0x62>
    10c8:	49 c0       	rjmp	.+146    	; 0x115c <GPIO_readPin+0xf4>
    10ca:	5f c0       	rjmp	.+190    	; 0x118a <GPIO_readPin+0x122>
		case PORTA_ID:
			if(bit_is_set(PINA, pin_num)){
    10cc:	e9 e3       	ldi	r30, 0x39	; 57
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_readPin+0x7c>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_readPin+0x78>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	90 70       	andi	r25, 0x00	; 0
    10ee:	88 23       	and	r24, r24
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <GPIO_readPin+0x90>
				value = LOGIC_HIGH;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	49 c0       	rjmp	.+146    	; 0x118a <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    10f8:	19 82       	std	Y+1, r1	; 0x01
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <GPIO_readPin+0x122>
			}
			break;

		case PORTB_ID:
			if(bit_is_set(PINB, pin_num)){
    10fc:	e6 e3       	ldi	r30, 0x36	; 54
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <GPIO_readPin+0xac>
    1110:	55 95       	asr	r21
    1112:	47 95       	ror	r20
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <GPIO_readPin+0xa8>
    1118:	ca 01       	movw	r24, r20
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	90 70       	andi	r25, 0x00	; 0
    111e:	88 23       	and	r24, r24
    1120:	19 f0       	breq	.+6      	; 0x1128 <GPIO_readPin+0xc0>
				value = LOGIC_HIGH;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	31 c0       	rjmp	.+98     	; 0x118a <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    1128:	19 82       	std	Y+1, r1	; 0x01
    112a:	2f c0       	rjmp	.+94     	; 0x118a <GPIO_readPin+0x122>
			}
			break;

		case PORTC_ID:
			if(bit_is_set(PINC, pin_num)){
    112c:	e3 e3       	ldi	r30, 0x33	; 51
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a9 01       	movw	r20, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <GPIO_readPin+0xdc>
    1140:	55 95       	asr	r21
    1142:	47 95       	ror	r20
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <GPIO_readPin+0xd8>
    1148:	ca 01       	movw	r24, r20
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	88 23       	and	r24, r24
    1150:	19 f0       	breq	.+6      	; 0x1158 <GPIO_readPin+0xf0>
				value = LOGIC_HIGH;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	19 c0       	rjmp	.+50     	; 0x118a <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	17 c0       	rjmp	.+46     	; 0x118a <GPIO_readPin+0x122>
			}
			break;

		case PORTD_ID:
			if(bit_is_set(PIND, pin_num)){
    115c:	e0 e3       	ldi	r30, 0x30	; 48
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_readPin+0x10c>
    1170:	55 95       	asr	r21
    1172:	47 95       	ror	r20
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_readPin+0x108>
    1178:	ca 01       	movw	r24, r20
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	90 70       	andi	r25, 0x00	; 0
    117e:	88 23       	and	r24, r24
    1180:	19 f0       	breq	.+6      	; 0x1188 <GPIO_readPin+0x120>
				value = LOGIC_HIGH;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	01 c0       	rjmp	.+2      	; 0x118a <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    1188:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
		return value;
    118a:	59 81       	ldd	r21, Y+1	; 0x01
    118c:	5c 83       	std	Y+4, r21	; 0x04
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <GPIO_readPin+0x12a>
	}
	return LOGIC_LOW;
    1190:	1c 82       	std	Y+4, r1	; 0x04
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1194:	26 96       	adiw	r28, 0x06	; 6
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <GPIO_setupPortDirection+0x6>
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <GPIO_setupPortDirection+0x8>
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	84 30       	cpi	r24, 0x04	; 4
    11ba:	90 f5       	brcc	.+100    	; 0x1220 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 83       	std	Y+4, r19	; 0x04
    11c4:	2b 83       	std	Y+3, r18	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	91 05       	cpc	r25, r1
    11ce:	d1 f0       	breq	.+52     	; 0x1204 <GPIO_setupPortDirection+0x5e>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <GPIO_setupPortDirection+0x3e>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	61 f0       	breq	.+24     	; 0x11fa <GPIO_setupPortDirection+0x54>
    11e2:	1e c0       	rjmp	.+60     	; 0x1220 <GPIO_setupPortDirection+0x7a>
    11e4:	2b 81       	ldd	r18, Y+3	; 0x03
    11e6:	3c 81       	ldd	r19, Y+4	; 0x04
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	81 f0       	breq	.+32     	; 0x120e <GPIO_setupPortDirection+0x68>
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <GPIO_setupPortDirection+0x72>
    11f8:	13 c0       	rjmp	.+38     	; 0x1220 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11fa:	ea e3       	ldi	r30, 0x3A	; 58
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
    1202:	0e c0       	rjmp	.+28     	; 0x1220 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1204:	e7 e3       	ldi	r30, 0x37	; 55
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    120e:	e4 e3       	ldi	r30, 0x34	; 52
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1218:	e1 e3       	ldi	r30, 0x31	; 49
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <GPIO_writePort+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <GPIO_writePort+0x8>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	90 f5       	brcc	.+100    	; 0x12a8 <GPIO_writePort+0x7a>
		/*Do nothing*/
	}else{
		switch(port_num){
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f0       	breq	.+52     	; 0x128c <GPIO_writePort+0x5e>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <GPIO_writePort+0x3e>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <GPIO_writePort+0x54>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <GPIO_writePort+0x7a>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <GPIO_writePort+0x68>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <GPIO_writePort+0x72>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
			break;
		}
	}
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <GPIO_setupPortDirectionMasked>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirectionMasked(uint8 port_num, uint8 mask, uint8 direction)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <GPIO_setupPortDirectionMasked+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <GPIO_setupPortDirectionMasked+0x8>
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6a 83       	std	Y+2, r22	; 0x02
    12c8:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS){
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	84 30       	cpi	r24, 0x04	; 4
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <GPIO_setupPortDirectionMasked+0x1c>
    12d0:	5e c0       	rjmp	.+188    	; 0x138e <GPIO_setupPortDirectionMasked+0xd8>
		/*DO nothing*/
	}else{
		switch(port_num){
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3d 83       	std	Y+5, r19	; 0x05
    12da:	2c 83       	std	Y+4, r18	; 0x04
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	29 f1       	breq	.+74     	; 0x1330 <GPIO_setupPortDirectionMasked+0x7a>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <GPIO_setupPortDirectionMasked+0x44>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	61 f0       	breq	.+24     	; 0x1310 <GPIO_setupPortDirectionMasked+0x5a>
    12f8:	4a c0       	rjmp	.+148    	; 0x138e <GPIO_setupPortDirectionMasked+0xd8>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	31 f1       	breq	.+76     	; 0x1350 <GPIO_setupPortDirectionMasked+0x9a>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	89 f1       	breq	.+98     	; 0x1370 <GPIO_setupPortDirectionMasked+0xba>
    130e:	3f c0       	rjmp	.+126    	; 0x138e <GPIO_setupPortDirectionMasked+0xd8>
			case PORTA_ID:
				DDRA = (DDRA & (~mask)) | (direction & mask);
    1310:	aa e3       	ldi	r26, 0x3A	; 58
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ea e3       	ldi	r30, 0x3A	; 58
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	98 2f       	mov	r25, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 95       	com	r24
    1320:	29 2f       	mov	r18, r25
    1322:	28 23       	and	r18, r24
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	89 23       	and	r24, r25
    132a:	82 2b       	or	r24, r18
    132c:	8c 93       	st	X, r24
    132e:	2f c0       	rjmp	.+94     	; 0x138e <GPIO_setupPortDirectionMasked+0xd8>
				break;

			case PORTB_ID:
				DDRB = (DDRB & (~mask)) | (direction & mask);
    1330:	a7 e3       	ldi	r26, 0x37	; 55
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e7 e3       	ldi	r30, 0x37	; 55
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	98 2f       	mov	r25, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 95       	com	r24
    1340:	29 2f       	mov	r18, r25
    1342:	28 23       	and	r18, r24
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	89 23       	and	r24, r25
    134a:	82 2b       	or	r24, r18
    134c:	8c 93       	st	X, r24
    134e:	1f c0       	rjmp	.+62     	; 0x138e <GPIO_setupPortDirectionMasked+0xd8>
				break;

			case PORTC_ID:
				DDRC = (DDRC & (~mask)) | (direction & mask);
    1350:	a4 e3       	ldi	r26, 0x34	; 52
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e4 e3       	ldi	r30, 0x34	; 52
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	98 2f       	mov	r25, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	80 95       	com	r24
    1360:	29 2f       	mov	r18, r25
    1362:	28 23       	and	r18, r24
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	89 23       	and	r24, r25
    136a:	82 2b       	or	r24, r18
    136c:	8c 93       	st	X, r24
    136e:	0f c0       	rjmp	.+30     	; 0x138e <GPIO_setupPortDirectionMasked+0xd8>
				break;

			case PORTD_ID:
				DDRD = (DDRD & (~mask)) | (direction & mask);
    1370:	a1 e3       	ldi	r26, 0x31	; 49
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e1 e3       	ldi	r30, 0x31	; 49
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	98 2f       	mov	r25, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 95       	com	r24
    1380:	29 2f       	mov	r18, r25
    1382:	28 23       	and	r18, r24
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	89 23       	and	r24, r25
    138a:	82 2b       	or	r24, r18
    138c:	8c 93       	st	X, r24
				break;
		}
	}
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <GPIO_writePortMasked>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePortMasked(uint8 port_num, uint8 mask, uint8 value)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <GPIO_writePortMasked+0x6>
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <GPIO_writePortMasked+0x8>
    13a6:	0f 92       	push	r0
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
    13b0:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS){
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <GPIO_writePortMasked+0x1c>
    13b8:	5e c0       	rjmp	.+188    	; 0x1476 <GPIO_writePortMasked+0xd8>
		/*DO nothing*/
	}else{
		switch(port_num){
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3d 83       	std	Y+5, r19	; 0x05
    13c2:	2c 83       	std	Y+4, r18	; 0x04
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	29 f1       	breq	.+74     	; 0x1418 <GPIO_writePortMasked+0x7a>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <GPIO_writePortMasked+0x44>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	61 f0       	breq	.+24     	; 0x13f8 <GPIO_writePortMasked+0x5a>
    13e0:	4a c0       	rjmp	.+148    	; 0x1476 <GPIO_writePortMasked+0xd8>
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	3d 81       	ldd	r19, Y+5	; 0x05
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	31 f1       	breq	.+76     	; 0x1438 <GPIO_writePortMasked+0x9a>
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	89 f1       	breq	.+98     	; 0x1458 <GPIO_writePortMasked+0xba>
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <GPIO_writePortMasked+0xd8>
			case PORTA_ID:
				PORTA = (PORTA & (~mask)) | (value & mask);
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	98 2f       	mov	r25, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 95       	com	r24
    1408:	29 2f       	mov	r18, r25
    140a:	28 23       	and	r18, r24
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	89 23       	and	r24, r25
    1412:	82 2b       	or	r24, r18
    1414:	8c 93       	st	X, r24
    1416:	2f c0       	rjmp	.+94     	; 0x1476 <GPIO_writePortMasked+0xd8>
				break;

			case PORTB_ID:
				PORTB = (PORTB & (~mask)) | (value & mask);
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	98 2f       	mov	r25, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	80 95       	com	r24
    1428:	29 2f       	mov	r18, r25
    142a:	28 23       	and	r18, r24
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	89 23       	and	r24, r25
    1432:	82 2b       	or	r24, r18
    1434:	8c 93       	st	X, r24
    1436:	1f c0       	rjmp	.+62     	; 0x1476 <GPIO_writePortMasked+0xd8>
				break;

			case PORTC_ID:
				PORTC = (PORTC & (~mask)) | (value & mask);
    1438:	a5 e3       	ldi	r26, 0x35	; 53
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	98 2f       	mov	r25, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	80 95       	com	r24
    1448:	29 2f       	mov	r18, r25
    144a:	28 23       	and	r18, r24
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	89 23       	and	r24, r25
    1452:	82 2b       	or	r24, r18
    1454:	8c 93       	st	X, r24
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <GPIO_writePortMasked+0xd8>
				break;

			case PORTD_ID:
				PORTD = (PORTD & (~mask)) | (value & mask);
    1458:	a2 e3       	ldi	r26, 0x32	; 50
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	98 2f       	mov	r25, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	80 95       	com	r24
    1468:	29 2f       	mov	r18, r25
    146a:	28 23       	and	r18, r24
    146c:	9b 81       	ldd	r25, Y+3	; 0x03
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	89 23       	and	r24, r25
    1472:	82 2b       	or	r24, r18
    1474:	8c 93       	st	X, r24
				break;
		}
	}
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <GPIO_readPort+0x6>
    148c:	00 d0       	rcall	.+0      	; 0x148e <GPIO_readPort+0x8>
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	8a 83       	std	Y+2, r24	; 0x02
	if(port_num >= NUM_OF_PORTS){
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	a8 f5       	brcc	.+106    	; 0x1506 <GPIO_readPort+0x80>
		/*Do nothing*/
	}else{
		uint8 value;
		switch(port_num){
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3d 83       	std	Y+5, r19	; 0x05
    14a4:	2c 83       	std	Y+4, r18	; 0x04
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	d1 f0       	breq	.+52     	; 0x14e4 <GPIO_readPort+0x5e>
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <GPIO_readPort+0x3e>
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	61 f0       	breq	.+24     	; 0x14da <GPIO_readPort+0x54>
    14c2:	1e c0       	rjmp	.+60     	; 0x1500 <GPIO_readPort+0x7a>
    14c4:	2c 81       	ldd	r18, Y+4	; 0x04
    14c6:	3d 81       	ldd	r19, Y+5	; 0x05
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	81 f0       	breq	.+32     	; 0x14ee <GPIO_readPort+0x68>
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <GPIO_readPort+0x72>
    14d8:	13 c0       	rjmp	.+38     	; 0x1500 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    14da:	e9 e3       	ldi	r30, 0x39	; 57
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	0e c0       	rjmp	.+28     	; 0x1500 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14e4:	e6 e3       	ldi	r30, 0x36	; 54
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	09 c0       	rjmp	.+18     	; 0x1500 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14ee:	e3 e3       	ldi	r30, 0x33	; 51
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return value;
    1500:	99 81       	ldd	r25, Y+1	; 0x01
    1502:	9b 83       	std	Y+3, r25	; 0x03
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <GPIO_readPort+0x82>
	}
	return 0;
    1506:	1b 82       	std	Y+3, r1	; 0x03
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <seven_segment_init>:
#include "seven_segment.h"


#if SEVEN_SEGMENT_MODE == SEVEN_SEGMENT_DIRECT_MODE
void seven_segment_init(uint8 seven_segment_port,uint8 seven_segment_offset,
	uint8 seven_segment_enable_port, uint8 seven_Segment_enable_pin){
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <seven_segment_init+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <seven_segment_init+0x8>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	6a 83       	std	Y+2, r22	; 0x02
    152a:	4b 83       	std	Y+3, r20	; 0x03
    152c:	2c 83       	std	Y+4, r18	; 0x04
	GPIO_setupPortDirectionMasked(seven_segment_port, 0x7F<<seven_segment_offset, PORT_OUTPUT);
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8f e7       	ldi	r24, 0x7F	; 127
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <seven_segment_init+0x24>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	2a 95       	dec	r18
    1540:	e2 f7       	brpl	.-8      	; 0x153a <seven_segment_init+0x20>
    1542:	98 2f       	mov	r25, r24
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	69 2f       	mov	r22, r25
    1548:	4f ef       	ldi	r20, 0xFF	; 255
    154a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <GPIO_setupPortDirectionMasked>
	GPIO_setupPinDirection(seven_segment_enable_port, seven_Segment_enable_pin, PIN_OUTPUT);
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	6c 81       	ldd	r22, Y+4	; 0x04
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <lcd_sendCommand>:
	}else{
		_delay_us(100);
	}
}
#elif LCD_DATA_BUS_SIZE == 4
void lcd_sendCommand(uint8 command){
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	c7 5b       	subi	r28, 0xB7	; 183
    1574:	d0 40       	sbci	r29, 0x00	; 0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	fe 01       	movw	r30, r28
    1582:	e9 54       	subi	r30, 0x49	; 73
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1592:	fe 01       	movw	r30, r28
    1594:	ed 54       	subi	r30, 0x4D	; 77
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a0 ea       	ldi	r26, 0xA0	; 160
    159e:	b0 e4       	ldi	r27, 0x40	; 64
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15a8:	8e 01       	movw	r16, r28
    15aa:	01 55       	subi	r16, 0x51	; 81
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	ed 54       	subi	r30, 0x4D	; 77
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	2b ea       	ldi	r18, 0xAB	; 171
    15be:	3a ea       	ldi	r19, 0xAA	; 170
    15c0:	4a ea       	ldi	r20, 0xAA	; 170
    15c2:	50 e4       	ldi	r21, 0x40	; 64
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d6:	fe 01       	movw	r30, r28
    15d8:	e1 55       	subi	r30, 0x51	; 81
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	34 f4       	brge	.+12     	; 0x1600 <lcd_sendCommand+0x9a>
		__ticks = 1;
    15f4:	fe 01       	movw	r30, r28
    15f6:	e2 55       	subi	r30, 0x52	; 82
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 83       	st	Z, r24
    15fe:	e0 c0       	rjmp	.+448    	; 0x17c0 <lcd_sendCommand+0x25a>
	else if (__tmp > 255)
    1600:	fe 01       	movw	r30, r28
    1602:	e1 55       	subi	r30, 0x51	; 81
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	53 e4       	ldi	r21, 0x43	; 67
    1616:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	0c f0       	brlt	.+2      	; 0x1620 <lcd_sendCommand+0xba>
    161e:	c0 c0       	rjmp	.+384    	; 0x17a0 <lcd_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1620:	fe 01       	movw	r30, r28
    1622:	ed 54       	subi	r30, 0x4D	; 77
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	60 81       	ld	r22, Z
    1628:	71 81       	ldd	r23, Z+1	; 0x01
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a e7       	ldi	r20, 0x7A	; 122
    1634:	54 e4       	ldi	r21, 0x44	; 68
    1636:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	fe 01       	movw	r30, r28
    1640:	e6 55       	subi	r30, 0x56	; 86
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	80 83       	st	Z, r24
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	a2 83       	std	Z+2, r26	; 0x02
    164a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	8e 01       	movw	r16, r28
    164e:	0a 55       	subi	r16, 0x5A	; 90
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	fe 01       	movw	r30, r28
    1654:	e6 55       	subi	r30, 0x56	; 86
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	60 81       	ld	r22, Z
    165a:	71 81       	ldd	r23, Z+1	; 0x01
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	93 81       	ldd	r25, Z+3	; 0x03
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	4a e7       	ldi	r20, 0x7A	; 122
    1666:	55 e4       	ldi	r21, 0x45	; 69
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	f8 01       	movw	r30, r16
    1672:	80 83       	st	Z, r24
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	a2 83       	std	Z+2, r26	; 0x02
    1678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    167a:	fe 01       	movw	r30, r28
    167c:	ea 55       	subi	r30, 0x5A	; 90
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	44 f4       	brge	.+16     	; 0x16a8 <lcd_sendCommand+0x142>
		__ticks = 1;
    1698:	fe 01       	movw	r30, r28
    169a:	ec 55       	subi	r30, 0x5C	; 92
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	64 c0       	rjmp	.+200    	; 0x1770 <lcd_sendCommand+0x20a>
	else if (__tmp > 65535)
    16a8:	fe 01       	movw	r30, r28
    16aa:	ea 55       	subi	r30, 0x5A	; 90
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	0c f0       	brlt	.+2      	; 0x16c8 <lcd_sendCommand+0x162>
    16c6:	43 c0       	rjmp	.+134    	; 0x174e <lcd_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	fe 01       	movw	r30, r28
    16ca:	e6 55       	subi	r30, 0x56	; 86
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	8e 01       	movw	r16, r28
    16e8:	0c 55       	subi	r16, 0x5C	; 92
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	f8 01       	movw	r30, r16
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	1f c0       	rjmp	.+62     	; 0x173e <lcd_sendCommand+0x1d8>
    1700:	fe 01       	movw	r30, r28
    1702:	ee 55       	subi	r30, 0x5E	; 94
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 e9       	ldi	r24, 0x90	; 144
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    170e:	fe 01       	movw	r30, r28
    1710:	ee 55       	subi	r30, 0x5E	; 94
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <lcd_sendCommand+0x1b2>
    171c:	fe 01       	movw	r30, r28
    171e:	ee 55       	subi	r30, 0x5E	; 94
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1726:	de 01       	movw	r26, r28
    1728:	ac 55       	subi	r26, 0x5C	; 92
    172a:	bf 4f       	sbci	r27, 0xFF	; 255
    172c:	fe 01       	movw	r30, r28
    172e:	ec 55       	subi	r30, 0x5C	; 92
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	11 96       	adiw	r26, 0x01	; 1
    173a:	9c 93       	st	X, r25
    173c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	fe 01       	movw	r30, r28
    1740:	ec 55       	subi	r30, 0x5C	; 92
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	d1 f6       	brne	.-76     	; 0x1700 <lcd_sendCommand+0x19a>
    174c:	4b c0       	rjmp	.+150    	; 0x17e4 <lcd_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	8e 01       	movw	r16, r28
    1750:	0c 55       	subi	r16, 0x5C	; 92
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	ea 55       	subi	r30, 0x5A	; 90
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	f8 01       	movw	r30, r16
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	de 01       	movw	r26, r28
    1772:	a0 56       	subi	r26, 0x60	; 96
    1774:	bf 4f       	sbci	r27, 0xFF	; 255
    1776:	fe 01       	movw	r30, r28
    1778:	ec 55       	subi	r30, 0x5C	; 92
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	11 96       	adiw	r26, 0x01	; 1
    1782:	9c 93       	st	X, r25
    1784:	8e 93       	st	-X, r24
    1786:	fe 01       	movw	r30, r28
    1788:	e0 56       	subi	r30, 0x60	; 96
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <lcd_sendCommand+0x22a>
    1794:	fe 01       	movw	r30, r28
    1796:	e0 56       	subi	r30, 0x60	; 96
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
    179e:	22 c0       	rjmp	.+68     	; 0x17e4 <lcd_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17a0:	8e 01       	movw	r16, r28
    17a2:	02 55       	subi	r16, 0x52	; 82
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	fe 01       	movw	r30, r28
    17a8:	e1 55       	subi	r30, 0x51	; 81
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	f8 01       	movw	r30, r16
    17be:	80 83       	st	Z, r24
    17c0:	de 01       	movw	r26, r28
    17c2:	a1 56       	subi	r26, 0x61	; 97
    17c4:	bf 4f       	sbci	r27, 0xFF	; 255
    17c6:	fe 01       	movw	r30, r28
    17c8:	e2 55       	subi	r30, 0x52	; 82
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	80 81       	ld	r24, Z
    17ce:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d0:	fe 01       	movw	r30, r28
    17d2:	e1 56       	subi	r30, 0x61	; 97
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	8a 95       	dec	r24
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <lcd_sendCommand+0x272>
    17dc:	fe 01       	movw	r30, r28
    17de:	e1 56       	subi	r30, 0x61	; 97
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    17ee:	fe 01       	movw	r30, r28
    17f0:	e5 56       	subi	r30, 0x65	; 101
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 ea       	ldi	r26, 0xA0	; 160
    17fa:	b0 e4       	ldi	r27, 0x40	; 64
    17fc:	80 83       	st	Z, r24
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	a2 83       	std	Z+2, r26	; 0x02
    1802:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1804:	8e 01       	movw	r16, r28
    1806:	09 56       	subi	r16, 0x69	; 105
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	fe 01       	movw	r30, r28
    180c:	e5 56       	subi	r30, 0x65	; 101
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	2b ea       	ldi	r18, 0xAB	; 171
    181a:	3a ea       	ldi	r19, 0xAA	; 170
    181c:	4a ea       	ldi	r20, 0xAA	; 170
    181e:	50 e4       	ldi	r21, 0x40	; 64
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	f8 01       	movw	r30, r16
    182a:	80 83       	st	Z, r24
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	a2 83       	std	Z+2, r26	; 0x02
    1830:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1832:	fe 01       	movw	r30, r28
    1834:	e9 56       	subi	r30, 0x69	; 105
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184c:	88 23       	and	r24, r24
    184e:	34 f4       	brge	.+12     	; 0x185c <lcd_sendCommand+0x2f6>
		__ticks = 1;
    1850:	fe 01       	movw	r30, r28
    1852:	ea 56       	subi	r30, 0x6A	; 106
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 83       	st	Z, r24
    185a:	e0 c0       	rjmp	.+448    	; 0x1a1c <lcd_sendCommand+0x4b6>
	else if (__tmp > 255)
    185c:	fe 01       	movw	r30, r28
    185e:	e9 56       	subi	r30, 0x69	; 105
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4f e7       	ldi	r20, 0x7F	; 127
    1870:	53 e4       	ldi	r21, 0x43	; 67
    1872:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1876:	18 16       	cp	r1, r24
    1878:	0c f0       	brlt	.+2      	; 0x187c <lcd_sendCommand+0x316>
    187a:	c0 c0       	rjmp	.+384    	; 0x19fc <lcd_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    187c:	fe 01       	movw	r30, r28
    187e:	e5 56       	subi	r30, 0x65	; 101
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	54 e4       	ldi	r21, 0x44	; 68
    1892:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	fe 01       	movw	r30, r28
    189c:	ee 56       	subi	r30, 0x6E	; 110
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 83       	st	Z, r24
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	a2 83       	std	Z+2, r26	; 0x02
    18a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	8e 01       	movw	r16, r28
    18aa:	02 57       	subi	r16, 0x72	; 114
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	fe 01       	movw	r30, r28
    18b0:	ee 56       	subi	r30, 0x6E	; 110
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4a e7       	ldi	r20, 0x7A	; 122
    18c2:	55 e4       	ldi	r21, 0x45	; 69
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	f8 01       	movw	r30, r16
    18ce:	80 83       	st	Z, r24
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	a2 83       	std	Z+2, r26	; 0x02
    18d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18d6:	fe 01       	movw	r30, r28
    18d8:	e2 57       	subi	r30, 0x72	; 114
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e8       	ldi	r20, 0x80	; 128
    18ea:	5f e3       	ldi	r21, 0x3F	; 63
    18ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f0:	88 23       	and	r24, r24
    18f2:	44 f4       	brge	.+16     	; 0x1904 <lcd_sendCommand+0x39e>
		__ticks = 1;
    18f4:	fe 01       	movw	r30, r28
    18f6:	e4 57       	subi	r30, 0x74	; 116
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	64 c0       	rjmp	.+200    	; 0x19cc <lcd_sendCommand+0x466>
	else if (__tmp > 65535)
    1904:	fe 01       	movw	r30, r28
    1906:	e2 57       	subi	r30, 0x72	; 114
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	60 81       	ld	r22, Z
    190c:	71 81       	ldd	r23, Z+1	; 0x01
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	0c f0       	brlt	.+2      	; 0x1924 <lcd_sendCommand+0x3be>
    1922:	43 c0       	rjmp	.+134    	; 0x19aa <lcd_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	fe 01       	movw	r30, r28
    1926:	ee 56       	subi	r30, 0x6E	; 110
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8e 01       	movw	r16, r28
    1944:	04 57       	subi	r16, 0x74	; 116
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	f8 01       	movw	r30, r16
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	1f c0       	rjmp	.+62     	; 0x199a <lcd_sendCommand+0x434>
    195c:	fe 01       	movw	r30, r28
    195e:	e6 57       	subi	r30, 0x76	; 118
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 e9       	ldi	r24, 0x90	; 144
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    196a:	fe 01       	movw	r30, r28
    196c:	e6 57       	subi	r30, 0x76	; 118
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <lcd_sendCommand+0x40e>
    1978:	fe 01       	movw	r30, r28
    197a:	e6 57       	subi	r30, 0x76	; 118
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	de 01       	movw	r26, r28
    1984:	a4 57       	subi	r26, 0x74	; 116
    1986:	bf 4f       	sbci	r27, 0xFF	; 255
    1988:	fe 01       	movw	r30, r28
    198a:	e4 57       	subi	r30, 0x74	; 116
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	9c 93       	st	X, r25
    1998:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	fe 01       	movw	r30, r28
    199c:	e4 57       	subi	r30, 0x74	; 116
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	d1 f6       	brne	.-76     	; 0x195c <lcd_sendCommand+0x3f6>
    19a8:	4b c0       	rjmp	.+150    	; 0x1a40 <lcd_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19aa:	8e 01       	movw	r16, r28
    19ac:	04 57       	subi	r16, 0x74	; 116
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	e2 57       	subi	r30, 0x72	; 114
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	f8 01       	movw	r30, r16
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    19cc:	de 01       	movw	r26, r28
    19ce:	a8 57       	subi	r26, 0x78	; 120
    19d0:	bf 4f       	sbci	r27, 0xFF	; 255
    19d2:	fe 01       	movw	r30, r28
    19d4:	e4 57       	subi	r30, 0x74	; 116
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	11 96       	adiw	r26, 0x01	; 1
    19de:	9c 93       	st	X, r25
    19e0:	8e 93       	st	-X, r24
    19e2:	fe 01       	movw	r30, r28
    19e4:	e8 57       	subi	r30, 0x78	; 120
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <lcd_sendCommand+0x486>
    19f0:	fe 01       	movw	r30, r28
    19f2:	e8 57       	subi	r30, 0x78	; 120
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	22 c0       	rjmp	.+68     	; 0x1a40 <lcd_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19fc:	8e 01       	movw	r16, r28
    19fe:	0a 56       	subi	r16, 0x6A	; 106
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	fe 01       	movw	r30, r28
    1a04:	e9 56       	subi	r30, 0x69	; 105
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 83       	st	Z, r24
    1a1c:	de 01       	movw	r26, r28
    1a1e:	a9 57       	subi	r26, 0x79	; 121
    1a20:	bf 4f       	sbci	r27, 0xFF	; 255
    1a22:	fe 01       	movw	r30, r28
    1a24:	ea 56       	subi	r30, 0x6A	; 106
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e9 57       	subi	r30, 0x79	; 121
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
    1a34:	8a 95       	dec	r24
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <lcd_sendCommand+0x4ce>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e9 57       	subi	r30, 0x79	; 121
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((command & 0xF0) >> 4) << LCD_DATA_BUS_PORT_OFFSET);
    1a40:	fe 01       	movw	r30, r28
    1a42:	e9 54       	subi	r30, 0x49	; 73
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	82 95       	swap	r24
    1a4a:	8f 70       	andi	r24, 0x0F	; 15
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	99 0f       	add	r25, r25
    1a50:	99 0f       	add	r25, r25
    1a52:	99 0f       	add	r25, r25
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	68 e7       	ldi	r22, 0x78	; 120
    1a58:	49 2f       	mov	r20, r25
    1a5a:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ed 57       	subi	r30, 0x7D	; 125
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 ea       	ldi	r26, 0xA0	; 160
    1a6a:	b0 e4       	ldi	r27, 0x40	; 64
    1a6c:	80 83       	st	Z, r24
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	a2 83       	std	Z+2, r26	; 0x02
    1a72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a74:	8e 01       	movw	r16, r28
    1a76:	01 58       	subi	r16, 0x81	; 129
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	ed 57       	subi	r30, 0x7D	; 125
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	2b ea       	ldi	r18, 0xAB	; 171
    1a8a:	3a ea       	ldi	r19, 0xAA	; 170
    1a8c:	4a ea       	ldi	r20, 0xAA	; 170
    1a8e:	50 e4       	ldi	r21, 0x40	; 64
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	f8 01       	movw	r30, r16
    1a9a:	80 83       	st	Z, r24
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	a2 83       	std	Z+2, r26	; 0x02
    1aa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e1 58       	subi	r30, 0x81	; 129
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	34 f4       	brge	.+12     	; 0x1acc <lcd_sendCommand+0x566>
		__ticks = 1;
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e2 58       	subi	r30, 0x82	; 130
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	80 83       	st	Z, r24
    1aca:	e0 c0       	rjmp	.+448    	; 0x1c8c <lcd_sendCommand+0x726>
	else if (__tmp > 255)
    1acc:	fe 01       	movw	r30, r28
    1ace:	e1 58       	subi	r30, 0x81	; 129
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	0c f0       	brlt	.+2      	; 0x1aec <lcd_sendCommand+0x586>
    1aea:	c0 c0       	rjmp	.+384    	; 0x1c6c <lcd_sendCommand+0x706>
	{
		_delay_ms(__us / 1000.0);
    1aec:	fe 01       	movw	r30, r28
    1aee:	ed 57       	subi	r30, 0x7D	; 125
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a e7       	ldi	r20, 0x7A	; 122
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e6 58       	subi	r30, 0x86	; 134
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	a2 83       	std	Z+2, r26	; 0x02
    1b16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	8e 01       	movw	r16, r28
    1b1a:	0a 58       	subi	r16, 0x8A	; 138
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e6 58       	subi	r30, 0x86	; 134
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a e7       	ldi	r20, 0x7A	; 122
    1b32:	55 e4       	ldi	r21, 0x45	; 69
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	80 83       	st	Z, r24
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	a2 83       	std	Z+2, r26	; 0x02
    1b44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b46:	fe 01       	movw	r30, r28
    1b48:	ea 58       	subi	r30, 0x8A	; 138
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	44 f4       	brge	.+16     	; 0x1b74 <lcd_sendCommand+0x60e>
		__ticks = 1;
    1b64:	fe 01       	movw	r30, r28
    1b66:	ec 58       	subi	r30, 0x8C	; 140
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	64 c0       	rjmp	.+200    	; 0x1c3c <lcd_sendCommand+0x6d6>
	else if (__tmp > 65535)
    1b74:	fe 01       	movw	r30, r28
    1b76:	ea 58       	subi	r30, 0x8A	; 138
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <lcd_sendCommand+0x62e>
    1b92:	43 c0       	rjmp	.+134    	; 0x1c1a <lcd_sendCommand+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	fe 01       	movw	r30, r28
    1b96:	e6 58       	subi	r30, 0x86	; 134
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	0c 58       	subi	r16, 0x8C	; 140
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
    1bca:	1f c0       	rjmp	.+62     	; 0x1c0a <lcd_sendCommand+0x6a4>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ee 58       	subi	r30, 0x8E	; 142
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 e9       	ldi	r24, 0x90	; 144
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ee 58       	subi	r30, 0x8E	; 142
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <lcd_sendCommand+0x67e>
    1be8:	fe 01       	movw	r30, r28
    1bea:	ee 58       	subi	r30, 0x8E	; 142
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	de 01       	movw	r26, r28
    1bf4:	ac 58       	subi	r26, 0x8C	; 140
    1bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ec 58       	subi	r30, 0x8C	; 140
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	9c 93       	st	X, r25
    1c08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ec 58       	subi	r30, 0x8C	; 140
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	d1 f6       	brne	.-76     	; 0x1bcc <lcd_sendCommand+0x666>
    1c18:	4b c0       	rjmp	.+150    	; 0x1cb0 <lcd_sendCommand+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	0c 58       	subi	r16, 0x8C	; 140
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	fe 01       	movw	r30, r28
    1c22:	ea 58       	subi	r30, 0x8A	; 138
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	de 01       	movw	r26, r28
    1c3e:	a0 59       	subi	r26, 0x90	; 144
    1c40:	bf 4f       	sbci	r27, 0xFF	; 255
    1c42:	fe 01       	movw	r30, r28
    1c44:	ec 58       	subi	r30, 0x8C	; 140
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	9c 93       	st	X, r25
    1c50:	8e 93       	st	-X, r24
    1c52:	fe 01       	movw	r30, r28
    1c54:	e0 59       	subi	r30, 0x90	; 144
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <lcd_sendCommand+0x6f6>
    1c60:	fe 01       	movw	r30, r28
    1c62:	e0 59       	subi	r30, 0x90	; 144
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	22 c0       	rjmp	.+68     	; 0x1cb0 <lcd_sendCommand+0x74a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	02 58       	subi	r16, 0x82	; 130
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	fe 01       	movw	r30, r28
    1c74:	e1 58       	subi	r30, 0x81	; 129
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 83       	st	Z, r24
    1c8c:	de 01       	movw	r26, r28
    1c8e:	a1 59       	subi	r26, 0x91	; 145
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e2 58       	subi	r30, 0x82	; 130
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e1 59       	subi	r30, 0x91	; 145
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8a 95       	dec	r24
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <lcd_sendCommand+0x73e>
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e1 59       	subi	r30, 0x91	; 145
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e5 59       	subi	r30, 0x95	; 149
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 ea       	ldi	r26, 0xA0	; 160
    1cc6:	b0 e4       	ldi	r27, 0x40	; 64
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	09 59       	subi	r16, 0x99	; 153
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e5 59       	subi	r30, 0x95	; 149
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	2b ea       	ldi	r18, 0xAB	; 171
    1ce6:	3a ea       	ldi	r19, 0xAA	; 170
    1ce8:	4a ea       	ldi	r20, 0xAA	; 170
    1cea:	50 e4       	ldi	r21, 0x40	; 64
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	80 83       	st	Z, r24
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	a2 83       	std	Z+2, r26	; 0x02
    1cfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e9 59       	subi	r30, 0x99	; 153
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d18:	88 23       	and	r24, r24
    1d1a:	34 f4       	brge	.+12     	; 0x1d28 <lcd_sendCommand+0x7c2>
		__ticks = 1;
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ea 59       	subi	r30, 0x9A	; 154
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	80 83       	st	Z, r24
    1d26:	e0 c0       	rjmp	.+448    	; 0x1ee8 <lcd_sendCommand+0x982>
	else if (__tmp > 255)
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 59       	subi	r30, 0x99	; 153
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	53 e4       	ldi	r21, 0x43	; 67
    1d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	0c f0       	brlt	.+2      	; 0x1d48 <lcd_sendCommand+0x7e2>
    1d46:	c0 c0       	rjmp	.+384    	; 0x1ec8 <lcd_sendCommand+0x962>
	{
		_delay_ms(__us / 1000.0);
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e5 59       	subi	r30, 0x95	; 149
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	fe 01       	movw	r30, r28
    1d68:	ee 59       	subi	r30, 0x9E	; 158
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	a2 83       	std	Z+2, r26	; 0x02
    1d72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	8e 01       	movw	r16, r28
    1d76:	02 5a       	subi	r16, 0xA2	; 162
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ee 59       	subi	r30, 0x9E	; 158
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a e7       	ldi	r20, 0x7A	; 122
    1d8e:	55 e4       	ldi	r21, 0x45	; 69
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	f8 01       	movw	r30, r16
    1d9a:	80 83       	st	Z, r24
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	a2 83       	std	Z+2, r26	; 0x02
    1da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da2:	fe 01       	movw	r30, r28
    1da4:	e2 5a       	subi	r30, 0xA2	; 162
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	44 f4       	brge	.+16     	; 0x1dd0 <lcd_sendCommand+0x86a>
		__ticks = 1;
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e4 5a       	subi	r30, 0xA4	; 164
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	64 c0       	rjmp	.+200    	; 0x1e98 <lcd_sendCommand+0x932>
	else if (__tmp > 65535)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e2 5a       	subi	r30, 0xA2	; 162
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	0c f0       	brlt	.+2      	; 0x1df0 <lcd_sendCommand+0x88a>
    1dee:	43 c0       	rjmp	.+134    	; 0x1e76 <lcd_sendCommand+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	fe 01       	movw	r30, r28
    1df2:	ee 59       	subi	r30, 0x9E	; 158
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8e 01       	movw	r16, r28
    1e10:	04 5a       	subi	r16, 0xA4	; 164
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
    1e26:	1f c0       	rjmp	.+62     	; 0x1e66 <lcd_sendCommand+0x900>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e6 5a       	subi	r30, 0xA6	; 166
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 e9       	ldi	r24, 0x90	; 144
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e36:	fe 01       	movw	r30, r28
    1e38:	e6 5a       	subi	r30, 0xA6	; 166
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <lcd_sendCommand+0x8da>
    1e44:	fe 01       	movw	r30, r28
    1e46:	e6 5a       	subi	r30, 0xA6	; 166
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	de 01       	movw	r26, r28
    1e50:	a4 5a       	subi	r26, 0xA4	; 164
    1e52:	bf 4f       	sbci	r27, 0xFF	; 255
    1e54:	fe 01       	movw	r30, r28
    1e56:	e4 5a       	subi	r30, 0xA4	; 164
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	11 96       	adiw	r26, 0x01	; 1
    1e62:	9c 93       	st	X, r25
    1e64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	fe 01       	movw	r30, r28
    1e68:	e4 5a       	subi	r30, 0xA4	; 164
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	d1 f6       	brne	.-76     	; 0x1e28 <lcd_sendCommand+0x8c2>
    1e74:	4b c0       	rjmp	.+150    	; 0x1f0c <lcd_sendCommand+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	8e 01       	movw	r16, r28
    1e78:	04 5a       	subi	r16, 0xA4	; 164
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e2 5a       	subi	r30, 0xA2	; 162
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	de 01       	movw	r26, r28
    1e9a:	a8 5a       	subi	r26, 0xA8	; 168
    1e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e4 5a       	subi	r30, 0xA4	; 164
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	9c 93       	st	X, r25
    1eac:	8e 93       	st	-X, r24
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e8 5a       	subi	r30, 0xA8	; 168
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <lcd_sendCommand+0x952>
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e8 5a       	subi	r30, 0xA8	; 168
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	22 c0       	rjmp	.+68     	; 0x1f0c <lcd_sendCommand+0x9a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ec8:	8e 01       	movw	r16, r28
    1eca:	0a 59       	subi	r16, 0x9A	; 154
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e9 59       	subi	r30, 0x99	; 153
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	80 83       	st	Z, r24
    1ee8:	de 01       	movw	r26, r28
    1eea:	a9 5a       	subi	r26, 0xA9	; 169
    1eec:	bf 4f       	sbci	r27, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ea 59       	subi	r30, 0x9A	; 154
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e9 5a       	subi	r30, 0xA9	; 169
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	8a 95       	dec	r24
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <lcd_sendCommand+0x99a>
    1f04:	fe 01       	movw	r30, r28
    1f06:	e9 5a       	subi	r30, 0xA9	; 169
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	62 e0       	ldi	r22, 0x02	; 2
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1f16:	fe 01       	movw	r30, r28
    1f18:	ed 5a       	subi	r30, 0xAD	; 173
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 ea       	ldi	r26, 0xA0	; 160
    1f22:	b0 e4       	ldi	r27, 0x40	; 64
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	01 5b       	subi	r16, 0xB1	; 177
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	fe 01       	movw	r30, r28
    1f34:	ed 5a       	subi	r30, 0xAD	; 173
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	2b ea       	ldi	r18, 0xAB	; 171
    1f42:	3a ea       	ldi	r19, 0xAA	; 170
    1f44:	4a ea       	ldi	r20, 0xAA	; 170
    1f46:	50 e4       	ldi	r21, 0x40	; 64
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e1 5b       	subi	r30, 0xB1	; 177
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	34 f4       	brge	.+12     	; 0x1f84 <lcd_sendCommand+0xa1e>
		__ticks = 1;
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e2 5b       	subi	r30, 0xB2	; 178
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 83       	st	Z, r24
    1f82:	e0 c0       	rjmp	.+448    	; 0x2144 <lcd_sendCommand+0xbde>
	else if (__tmp > 255)
    1f84:	fe 01       	movw	r30, r28
    1f86:	e1 5b       	subi	r30, 0xB1	; 177
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	53 e4       	ldi	r21, 0x43	; 67
    1f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	0c f0       	brlt	.+2      	; 0x1fa4 <lcd_sendCommand+0xa3e>
    1fa2:	c0 c0       	rjmp	.+384    	; 0x2124 <lcd_sendCommand+0xbbe>
	{
		_delay_ms(__us / 1000.0);
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ed 5a       	subi	r30, 0xAD	; 173
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a e7       	ldi	r20, 0x7A	; 122
    1fb8:	54 e4       	ldi	r21, 0x44	; 68
    1fba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e6 5b       	subi	r30, 0xB6	; 182
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 83       	st	Z, r24
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	a2 83       	std	Z+2, r26	; 0x02
    1fce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	0a 5b       	subi	r16, 0xBA	; 186
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e6 5b       	subi	r30, 0xB6	; 182
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a e7       	ldi	r20, 0x7A	; 122
    1fea:	55 e4       	ldi	r21, 0x45	; 69
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	80 83       	st	Z, r24
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	a2 83       	std	Z+2, r26	; 0x02
    1ffc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ffe:	fe 01       	movw	r30, r28
    2000:	ea 5b       	subi	r30, 0xBA	; 186
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	44 f4       	brge	.+16     	; 0x202c <lcd_sendCommand+0xac6>
		__ticks = 1;
    201c:	fe 01       	movw	r30, r28
    201e:	ec 5b       	subi	r30, 0xBC	; 188
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	64 c0       	rjmp	.+200    	; 0x20f4 <lcd_sendCommand+0xb8e>
	else if (__tmp > 65535)
    202c:	fe 01       	movw	r30, r28
    202e:	ea 5b       	subi	r30, 0xBA	; 186
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	0c f0       	brlt	.+2      	; 0x204c <lcd_sendCommand+0xae6>
    204a:	43 c0       	rjmp	.+134    	; 0x20d2 <lcd_sendCommand+0xb6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	fe 01       	movw	r30, r28
    204e:	e6 5b       	subi	r30, 0xB6	; 182
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8e 01       	movw	r16, r28
    206c:	0c 5b       	subi	r16, 0xBC	; 188
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	f8 01       	movw	r30, r16
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	1f c0       	rjmp	.+62     	; 0x20c2 <lcd_sendCommand+0xb5c>
    2084:	fe 01       	movw	r30, r28
    2086:	ee 5b       	subi	r30, 0xBE	; 190
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 e9       	ldi	r24, 0x90	; 144
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2092:	fe 01       	movw	r30, r28
    2094:	ee 5b       	subi	r30, 0xBE	; 190
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <lcd_sendCommand+0xb36>
    20a0:	fe 01       	movw	r30, r28
    20a2:	ee 5b       	subi	r30, 0xBE	; 190
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	de 01       	movw	r26, r28
    20ac:	ac 5b       	subi	r26, 0xBC	; 188
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	ec 5b       	subi	r30, 0xBC	; 188
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	11 96       	adiw	r26, 0x01	; 1
    20be:	9c 93       	st	X, r25
    20c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	fe 01       	movw	r30, r28
    20c4:	ec 5b       	subi	r30, 0xBC	; 188
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	d1 f6       	brne	.-76     	; 0x2084 <lcd_sendCommand+0xb1e>
    20d0:	42 c0       	rjmp	.+132    	; 0x2156 <lcd_sendCommand+0xbf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d2:	8e 01       	movw	r16, r28
    20d4:	0c 5b       	subi	r16, 0xBC	; 188
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	fe 01       	movw	r30, r28
    20da:	ea 5b       	subi	r30, 0xBA	; 186
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	de 01       	movw	r26, r28
    20f6:	a0 5c       	subi	r26, 0xC0	; 192
    20f8:	bf 4f       	sbci	r27, 0xFF	; 255
    20fa:	fe 01       	movw	r30, r28
    20fc:	ec 5b       	subi	r30, 0xBC	; 188
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	11 96       	adiw	r26, 0x01	; 1
    2106:	9c 93       	st	X, r25
    2108:	8e 93       	st	-X, r24
    210a:	fe 01       	movw	r30, r28
    210c:	e0 5c       	subi	r30, 0xC0	; 192
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <lcd_sendCommand+0xbae>
    2118:	fe 01       	movw	r30, r28
    211a:	e0 5c       	subi	r30, 0xC0	; 192
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    2122:	19 c0       	rjmp	.+50     	; 0x2156 <lcd_sendCommand+0xbf0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2124:	8e 01       	movw	r16, r28
    2126:	02 5b       	subi	r16, 0xB2	; 178
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	fe 01       	movw	r30, r28
    212c:	e1 5b       	subi	r30, 0xB1	; 177
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	80 83       	st	Z, r24
    2144:	fe 01       	movw	r30, r28
    2146:	e2 5b       	subi	r30, 0xB2	; 178
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    214e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2150:	8a 95       	dec	r24
    2152:	f1 f7       	brne	.-4      	; 0x2150 <lcd_sendCommand+0xbea>
    2154:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((command & 0x0F)) << LCD_DATA_BUS_PORT_OFFSET);
    2156:	fe 01       	movw	r30, r28
    2158:	e9 54       	subi	r30, 0x49	; 73
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	8f 70       	andi	r24, 0x0F	; 15
    2160:	98 2f       	mov	r25, r24
    2162:	99 0f       	add	r25, r25
    2164:	99 0f       	add	r25, r25
    2166:	99 0f       	add	r25, r25
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	68 e7       	ldi	r22, 0x78	; 120
    216c:	49 2f       	mov	r20, r25
    216e:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 ea       	ldi	r26, 0xA0	; 160
    2178:	b0 e4       	ldi	r27, 0x40	; 64
    217a:	8b af       	std	Y+59, r24	; 0x3b
    217c:	9c af       	std	Y+60, r25	; 0x3c
    217e:	ad af       	std	Y+61, r26	; 0x3d
    2180:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2182:	6b ad       	ldd	r22, Y+59	; 0x3b
    2184:	7c ad       	ldd	r23, Y+60	; 0x3c
    2186:	8d ad       	ldd	r24, Y+61	; 0x3d
    2188:	9e ad       	ldd	r25, Y+62	; 0x3e
    218a:	2b ea       	ldi	r18, 0xAB	; 171
    218c:	3a ea       	ldi	r19, 0xAA	; 170
    218e:	4a ea       	ldi	r20, 0xAA	; 170
    2190:	50 e4       	ldi	r21, 0x40	; 64
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8f ab       	std	Y+55, r24	; 0x37
    219c:	98 af       	std	Y+56, r25	; 0x38
    219e:	a9 af       	std	Y+57, r26	; 0x39
    21a0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    21a2:	6f a9       	ldd	r22, Y+55	; 0x37
    21a4:	78 ad       	ldd	r23, Y+56	; 0x38
    21a6:	89 ad       	ldd	r24, Y+57	; 0x39
    21a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	1c f4       	brge	.+6      	; 0x21c0 <lcd_sendCommand+0xc5a>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	8e ab       	std	Y+54, r24	; 0x36
    21be:	91 c0       	rjmp	.+290    	; 0x22e2 <lcd_sendCommand+0xd7c>
	else if (__tmp > 255)
    21c0:	6f a9       	ldd	r22, Y+55	; 0x37
    21c2:	78 ad       	ldd	r23, Y+56	; 0x38
    21c4:	89 ad       	ldd	r24, Y+57	; 0x39
    21c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	53 e4       	ldi	r21, 0x43	; 67
    21d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	0c f0       	brlt	.+2      	; 0x21da <lcd_sendCommand+0xc74>
    21d8:	7b c0       	rjmp	.+246    	; 0x22d0 <lcd_sendCommand+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    21da:	6b ad       	ldd	r22, Y+59	; 0x3b
    21dc:	7c ad       	ldd	r23, Y+60	; 0x3c
    21de:	8d ad       	ldd	r24, Y+61	; 0x3d
    21e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	4a e7       	ldi	r20, 0x7A	; 122
    21e8:	54 e4       	ldi	r21, 0x44	; 68
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	8a ab       	std	Y+50, r24	; 0x32
    21f4:	9b ab       	std	Y+51, r25	; 0x33
    21f6:	ac ab       	std	Y+52, r26	; 0x34
    21f8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	6a a9       	ldd	r22, Y+50	; 0x32
    21fc:	7b a9       	ldd	r23, Y+51	; 0x33
    21fe:	8c a9       	ldd	r24, Y+52	; 0x34
    2200:	9d a9       	ldd	r25, Y+53	; 0x35
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4a e7       	ldi	r20, 0x7A	; 122
    2208:	55 e4       	ldi	r21, 0x45	; 69
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	8e a7       	std	Y+46, r24	; 0x2e
    2214:	9f a7       	std	Y+47, r25	; 0x2f
    2216:	a8 ab       	std	Y+48, r26	; 0x30
    2218:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    221a:	6e a5       	ldd	r22, Y+46	; 0x2e
    221c:	7f a5       	ldd	r23, Y+47	; 0x2f
    221e:	88 a9       	ldd	r24, Y+48	; 0x30
    2220:	99 a9       	ldd	r25, Y+49	; 0x31
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e8       	ldi	r20, 0x80	; 128
    2228:	5f e3       	ldi	r21, 0x3F	; 63
    222a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222e:	88 23       	and	r24, r24
    2230:	2c f4       	brge	.+10     	; 0x223c <lcd_sendCommand+0xcd6>
		__ticks = 1;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9d a7       	std	Y+45, r25	; 0x2d
    2238:	8c a7       	std	Y+44, r24	; 0x2c
    223a:	3f c0       	rjmp	.+126    	; 0x22ba <lcd_sendCommand+0xd54>
	else if (__tmp > 65535)
    223c:	6e a5       	ldd	r22, Y+46	; 0x2e
    223e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2240:	88 a9       	ldd	r24, Y+48	; 0x30
    2242:	99 a9       	ldd	r25, Y+49	; 0x31
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	3f ef       	ldi	r19, 0xFF	; 255
    2248:	4f e7       	ldi	r20, 0x7F	; 127
    224a:	57 e4       	ldi	r21, 0x47	; 71
    224c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2250:	18 16       	cp	r1, r24
    2252:	4c f5       	brge	.+82     	; 0x22a6 <lcd_sendCommand+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2254:	6a a9       	ldd	r22, Y+50	; 0x32
    2256:	7b a9       	ldd	r23, Y+51	; 0x33
    2258:	8c a9       	ldd	r24, Y+52	; 0x34
    225a:	9d a9       	ldd	r25, Y+53	; 0x35
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e2       	ldi	r20, 0x20	; 32
    2262:	51 e4       	ldi	r21, 0x41	; 65
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9d a7       	std	Y+45, r25	; 0x2d
    227a:	8c a7       	std	Y+44, r24	; 0x2c
    227c:	0f c0       	rjmp	.+30     	; 0x229c <lcd_sendCommand+0xd36>
    227e:	80 e9       	ldi	r24, 0x90	; 144
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	9b a7       	std	Y+43, r25	; 0x2b
    2284:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2286:	8a a5       	ldd	r24, Y+42	; 0x2a
    2288:	9b a5       	ldd	r25, Y+43	; 0x2b
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <lcd_sendCommand+0xd24>
    228e:	9b a7       	std	Y+43, r25	; 0x2b
    2290:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2292:	8c a5       	ldd	r24, Y+44	; 0x2c
    2294:	9d a5       	ldd	r25, Y+45	; 0x2d
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	9d a7       	std	Y+45, r25	; 0x2d
    229a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229c:	8c a5       	ldd	r24, Y+44	; 0x2c
    229e:	9d a5       	ldd	r25, Y+45	; 0x2d
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	69 f7       	brne	.-38     	; 0x227e <lcd_sendCommand+0xd18>
    22a4:	24 c0       	rjmp	.+72     	; 0x22ee <lcd_sendCommand+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    22a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    22aa:	88 a9       	ldd	r24, Y+48	; 0x30
    22ac:	99 a9       	ldd	r25, Y+49	; 0x31
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9d a7       	std	Y+45, r25	; 0x2d
    22b8:	8c a7       	std	Y+44, r24	; 0x2c
    22ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    22bc:	9d a5       	ldd	r25, Y+45	; 0x2d
    22be:	99 a7       	std	Y+41, r25	; 0x29
    22c0:	88 a7       	std	Y+40, r24	; 0x28
    22c2:	88 a5       	ldd	r24, Y+40	; 0x28
    22c4:	99 a5       	ldd	r25, Y+41	; 0x29
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <lcd_sendCommand+0xd60>
    22ca:	99 a7       	std	Y+41, r25	; 0x29
    22cc:	88 a7       	std	Y+40, r24	; 0x28
    22ce:	0f c0       	rjmp	.+30     	; 0x22ee <lcd_sendCommand+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22d0:	6f a9       	ldd	r22, Y+55	; 0x37
    22d2:	78 ad       	ldd	r23, Y+56	; 0x38
    22d4:	89 ad       	ldd	r24, Y+57	; 0x39
    22d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8e ab       	std	Y+54, r24	; 0x36
    22e2:	8e a9       	ldd	r24, Y+54	; 0x36
    22e4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22e6:	8f a1       	ldd	r24, Y+39	; 0x27
    22e8:	8a 95       	dec	r24
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <lcd_sendCommand+0xd82>
    22ec:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	62 e0       	ldi	r22, 0x02	; 2
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>

	if(command == LCD_COMMAND_DISPLAY_OFF){
    22f8:	fe 01       	movw	r30, r28
    22fa:	e9 54       	subi	r30, 0x49	; 73
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	80 81       	ld	r24, Z
    2300:	88 30       	cpi	r24, 0x08	; 8
    2302:	09 f0       	breq	.+2      	; 0x2306 <lcd_sendCommand+0xda0>
    2304:	73 c0       	rjmp	.+230    	; 0x23ec <lcd_sendCommand+0xe86>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e4       	ldi	r26, 0x40	; 64
    230c:	b0 e4       	ldi	r27, 0x40	; 64
    230e:	8b a3       	std	Y+35, r24	; 0x23
    2310:	9c a3       	std	Y+36, r25	; 0x24
    2312:	ad a3       	std	Y+37, r26	; 0x25
    2314:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6b a1       	ldd	r22, Y+35	; 0x23
    2318:	7c a1       	ldd	r23, Y+36	; 0x24
    231a:	8d a1       	ldd	r24, Y+37	; 0x25
    231c:	9e a1       	ldd	r25, Y+38	; 0x26
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a e7       	ldi	r20, 0x7A	; 122
    2324:	55 e4       	ldi	r21, 0x45	; 69
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8f 8f       	std	Y+31, r24	; 0x1f
    2330:	98 a3       	std	Y+32, r25	; 0x20
    2332:	a9 a3       	std	Y+33, r26	; 0x21
    2334:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2336:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2338:	78 a1       	ldd	r23, Y+32	; 0x20
    233a:	89 a1       	ldd	r24, Y+33	; 0x21
    233c:	9a a1       	ldd	r25, Y+34	; 0x22
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <lcd_sendCommand+0xdf2>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9e 8f       	std	Y+30, r25	; 0x1e
    2354:	8d 8f       	std	Y+29, r24	; 0x1d
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <lcd_sendCommand+0xe70>
	else if (__tmp > 65535)
    2358:	6f 8d       	ldd	r22, Y+31	; 0x1f
    235a:	78 a1       	ldd	r23, Y+32	; 0x20
    235c:	89 a1       	ldd	r24, Y+33	; 0x21
    235e:	9a a1       	ldd	r25, Y+34	; 0x22
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <lcd_sendCommand+0xe5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6b a1       	ldd	r22, Y+35	; 0x23
    2372:	7c a1       	ldd	r23, Y+36	; 0x24
    2374:	8d a1       	ldd	r24, Y+37	; 0x25
    2376:	9e a1       	ldd	r25, Y+38	; 0x26
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 8f       	std	Y+30, r25	; 0x1e
    2396:	8d 8f       	std	Y+29, r24	; 0x1d
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <lcd_sendCommand+0xe52>
    239a:	80 e9       	ldi	r24, 0x90	; 144
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	9c 8f       	std	Y+28, r25	; 0x1c
    23a0:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <lcd_sendCommand+0xe40>
    23aa:	9c 8f       	std	Y+28, r25	; 0x1c
    23ac:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e 8f       	std	Y+30, r25	; 0x1e
    23b6:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <lcd_sendCommand+0xe34>
    23c0:	d3 c0       	rjmp	.+422    	; 0x2568 <lcd_sendCommand+0x1002>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23c4:	78 a1       	ldd	r23, Y+32	; 0x20
    23c6:	89 a1       	ldd	r24, Y+33	; 0x21
    23c8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e 8f       	std	Y+30, r25	; 0x1e
    23d4:	8d 8f       	std	Y+29, r24	; 0x1d
    23d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23da:	9a 8f       	std	Y+26, r25	; 0x1a
    23dc:	89 8f       	std	Y+25, r24	; 0x19
    23de:	89 8d       	ldd	r24, Y+25	; 0x19
    23e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <lcd_sendCommand+0xe7c>
    23e6:	9a 8f       	std	Y+26, r25	; 0x1a
    23e8:	89 8f       	std	Y+25, r24	; 0x19
    23ea:	be c0       	rjmp	.+380    	; 0x2568 <lcd_sendCommand+0x1002>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a8 ec       	ldi	r26, 0xC8	; 200
    23f2:	b2 e4       	ldi	r27, 0x42	; 66
    23f4:	8d 8b       	std	Y+21, r24	; 0x15
    23f6:	9e 8b       	std	Y+22, r25	; 0x16
    23f8:	af 8b       	std	Y+23, r26	; 0x17
    23fa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23fc:	6d 89       	ldd	r22, Y+21	; 0x15
    23fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2400:	8f 89       	ldd	r24, Y+23	; 0x17
    2402:	98 8d       	ldd	r25, Y+24	; 0x18
    2404:	2b ea       	ldi	r18, 0xAB	; 171
    2406:	3a ea       	ldi	r19, 0xAA	; 170
    2408:	4a ea       	ldi	r20, 0xAA	; 170
    240a:	50 e4       	ldi	r21, 0x40	; 64
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	89 8b       	std	Y+17, r24	; 0x11
    2416:	9a 8b       	std	Y+18, r25	; 0x12
    2418:	ab 8b       	std	Y+19, r26	; 0x13
    241a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    241c:	69 89       	ldd	r22, Y+17	; 0x11
    241e:	7a 89       	ldd	r23, Y+18	; 0x12
    2420:	8b 89       	ldd	r24, Y+19	; 0x13
    2422:	9c 89       	ldd	r25, Y+20	; 0x14
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	1c f4       	brge	.+6      	; 0x243a <lcd_sendCommand+0xed4>
		__ticks = 1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	88 8b       	std	Y+16, r24	; 0x10
    2438:	91 c0       	rjmp	.+290    	; 0x255c <lcd_sendCommand+0xff6>
	else if (__tmp > 255)
    243a:	69 89       	ldd	r22, Y+17	; 0x11
    243c:	7a 89       	ldd	r23, Y+18	; 0x12
    243e:	8b 89       	ldd	r24, Y+19	; 0x13
    2440:	9c 89       	ldd	r25, Y+20	; 0x14
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	53 e4       	ldi	r21, 0x43	; 67
    244a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	0c f0       	brlt	.+2      	; 0x2454 <lcd_sendCommand+0xeee>
    2452:	7b c0       	rjmp	.+246    	; 0x254a <lcd_sendCommand+0xfe4>
	{
		_delay_ms(__us / 1000.0);
    2454:	6d 89       	ldd	r22, Y+21	; 0x15
    2456:	7e 89       	ldd	r23, Y+22	; 0x16
    2458:	8f 89       	ldd	r24, Y+23	; 0x17
    245a:	98 8d       	ldd	r25, Y+24	; 0x18
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a e7       	ldi	r20, 0x7A	; 122
    2462:	54 e4       	ldi	r21, 0x44	; 68
    2464:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8c 87       	std	Y+12, r24	; 0x0c
    246e:	9d 87       	std	Y+13, r25	; 0x0d
    2470:	ae 87       	std	Y+14, r26	; 0x0e
    2472:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2474:	6c 85       	ldd	r22, Y+12	; 0x0c
    2476:	7d 85       	ldd	r23, Y+13	; 0x0d
    2478:	8e 85       	ldd	r24, Y+14	; 0x0e
    247a:	9f 85       	ldd	r25, Y+15	; 0x0f
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a e7       	ldi	r20, 0x7A	; 122
    2482:	55 e4       	ldi	r21, 0x45	; 69
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	88 87       	std	Y+8, r24	; 0x08
    248e:	99 87       	std	Y+9, r25	; 0x09
    2490:	aa 87       	std	Y+10, r26	; 0x0a
    2492:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2494:	68 85       	ldd	r22, Y+8	; 0x08
    2496:	79 85       	ldd	r23, Y+9	; 0x09
    2498:	8a 85       	ldd	r24, Y+10	; 0x0a
    249a:	9b 85       	ldd	r25, Y+11	; 0x0b
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e8       	ldi	r20, 0x80	; 128
    24a2:	5f e3       	ldi	r21, 0x3F	; 63
    24a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a8:	88 23       	and	r24, r24
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <lcd_sendCommand+0xf50>
		__ticks = 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9f 83       	std	Y+7, r25	; 0x07
    24b2:	8e 83       	std	Y+6, r24	; 0x06
    24b4:	3f c0       	rjmp	.+126    	; 0x2534 <lcd_sendCommand+0xfce>
	else if (__tmp > 65535)
    24b6:	68 85       	ldd	r22, Y+8	; 0x08
    24b8:	79 85       	ldd	r23, Y+9	; 0x09
    24ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    24bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	57 e4       	ldi	r21, 0x47	; 71
    24c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	4c f5       	brge	.+82     	; 0x2520 <lcd_sendCommand+0xfba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    24d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    24d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e2       	ldi	r20, 0x20	; 32
    24dc:	51 e4       	ldi	r21, 0x41	; 65
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9f 83       	std	Y+7, r25	; 0x07
    24f4:	8e 83       	std	Y+6, r24	; 0x06
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <lcd_sendCommand+0xfb0>
    24f8:	80 e9       	ldi	r24, 0x90	; 144
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	9d 83       	std	Y+5, r25	; 0x05
    24fe:	8c 83       	std	Y+4, r24	; 0x04
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	9d 81       	ldd	r25, Y+5	; 0x05
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <lcd_sendCommand+0xf9e>
    2508:	9d 83       	std	Y+5, r25	; 0x05
    250a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250c:	8e 81       	ldd	r24, Y+6	; 0x06
    250e:	9f 81       	ldd	r25, Y+7	; 0x07
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	9f 83       	std	Y+7, r25	; 0x07
    2514:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	8e 81       	ldd	r24, Y+6	; 0x06
    2518:	9f 81       	ldd	r25, Y+7	; 0x07
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	69 f7       	brne	.-38     	; 0x24f8 <lcd_sendCommand+0xf92>
    251e:	24 c0       	rjmp	.+72     	; 0x2568 <lcd_sendCommand+0x1002>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	68 85       	ldd	r22, Y+8	; 0x08
    2522:	79 85       	ldd	r23, Y+9	; 0x09
    2524:	8a 85       	ldd	r24, Y+10	; 0x0a
    2526:	9b 85       	ldd	r25, Y+11	; 0x0b
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9f 83       	std	Y+7, r25	; 0x07
    2532:	8e 83       	std	Y+6, r24	; 0x06
    2534:	8e 81       	ldd	r24, Y+6	; 0x06
    2536:	9f 81       	ldd	r25, Y+7	; 0x07
    2538:	9b 83       	std	Y+3, r25	; 0x03
    253a:	8a 83       	std	Y+2, r24	; 0x02
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	9b 81       	ldd	r25, Y+3	; 0x03
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <lcd_sendCommand+0xfda>
    2544:	9b 83       	std	Y+3, r25	; 0x03
    2546:	8a 83       	std	Y+2, r24	; 0x02
    2548:	0f c0       	rjmp	.+30     	; 0x2568 <lcd_sendCommand+0x1002>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    254a:	69 89       	ldd	r22, Y+17	; 0x11
    254c:	7a 89       	ldd	r23, Y+18	; 0x12
    254e:	8b 89       	ldd	r24, Y+19	; 0x13
    2550:	9c 89       	ldd	r25, Y+20	; 0x14
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	88 8b       	std	Y+16, r24	; 0x10
    255c:	88 89       	ldd	r24, Y+16	; 0x10
    255e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	8a 95       	dec	r24
    2564:	f1 f7       	brne	.-4      	; 0x2562 <lcd_sendCommand+0xffc>
    2566:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
	}else{
		_delay_us(100);
	}
}
    2568:	c9 54       	subi	r28, 0x49	; 73
    256a:	df 4f       	sbci	r29, 0xFF	; 255
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	08 95       	ret

00002580 <lcd_init>:
	lcd_sendCommand(LCD_COMMAND_2_LINE_8_BIT);
	lcd_sendCommand(LCD_COMMAND_DISPLAY_ON_CURSOR_OFF);
	lcd_sendCommand(LCD_COMMAND_CLEAR_DISPLAY);
}
#elif LCD_DATA_BUS_SIZE == 4
void lcd_init(uint8 cursor_or_not_command){
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	c5 58       	subi	r28, 0x85	; 133
    258e:	d1 40       	sbci	r29, 0x01	; 1
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	fe 01       	movw	r30, r28
    259c:	eb 57       	subi	r30, 0x7B	; 123
    259e:	fe 4f       	sbci	r31, 0xFE	; 254
    25a0:	80 83       	st	Z, r24
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	61 e0       	ldi	r22, 0x01	; 1
    25a6:	41 e0       	ldi	r20, 0x01	; 1
    25a8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT, LCD_EN_PIN, PIN_OUTPUT);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	62 e0       	ldi	r22, 0x02	; 2
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPortDirectionMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, PORT_OUTPUT);
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	68 e7       	ldi	r22, 0x78	; 120
    25ba:	4f ef       	ldi	r20, 0xFF	; 255
    25bc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <GPIO_setupPortDirectionMasked>
    25c0:	fe 01       	movw	r30, r28
    25c2:	ef 57       	subi	r30, 0x7F	; 127
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a0 ea       	ldi	r26, 0xA0	; 160
    25cc:	b1 e4       	ldi	r27, 0x41	; 65
    25ce:	80 83       	st	Z, r24
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	a2 83       	std	Z+2, r26	; 0x02
    25d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	8e 01       	movw	r16, r28
    25d8:	03 58       	subi	r16, 0x83	; 131
    25da:	1e 4f       	sbci	r17, 0xFE	; 254
    25dc:	fe 01       	movw	r30, r28
    25de:	ef 57       	subi	r30, 0x7F	; 127
    25e0:	fe 4f       	sbci	r31, 0xFE	; 254
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a e7       	ldi	r20, 0x7A	; 122
    25f0:	55 e4       	ldi	r21, 0x45	; 69
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2604:	fe 01       	movw	r30, r28
    2606:	e3 58       	subi	r30, 0x83	; 131
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e8       	ldi	r20, 0x80	; 128
    2618:	5f e3       	ldi	r21, 0x3F	; 63
    261a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261e:	88 23       	and	r24, r24
    2620:	44 f4       	brge	.+16     	; 0x2632 <lcd_init+0xb2>
		__ticks = 1;
    2622:	fe 01       	movw	r30, r28
    2624:	e5 58       	subi	r30, 0x85	; 133
    2626:	fe 4f       	sbci	r31, 0xFE	; 254
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
    2630:	64 c0       	rjmp	.+200    	; 0x26fa <lcd_init+0x17a>
	else if (__tmp > 65535)
    2632:	fe 01       	movw	r30, r28
    2634:	e3 58       	subi	r30, 0x83	; 131
    2636:	fe 4f       	sbci	r31, 0xFE	; 254
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	93 81       	ldd	r25, Z+3	; 0x03
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	0c f0       	brlt	.+2      	; 0x2652 <lcd_init+0xd2>
    2650:	43 c0       	rjmp	.+134    	; 0x26d8 <lcd_init+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	fe 01       	movw	r30, r28
    2654:	ef 57       	subi	r30, 0x7F	; 127
    2656:	fe 4f       	sbci	r31, 0xFE	; 254
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8e 01       	movw	r16, r28
    2672:	05 58       	subi	r16, 0x85	; 133
    2674:	1e 4f       	sbci	r17, 0xFE	; 254
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	f8 01       	movw	r30, r16
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	1f c0       	rjmp	.+62     	; 0x26c8 <lcd_init+0x148>
    268a:	fe 01       	movw	r30, r28
    268c:	e7 58       	subi	r30, 0x87	; 135
    268e:	fe 4f       	sbci	r31, 0xFE	; 254
    2690:	80 e9       	ldi	r24, 0x90	; 144
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2698:	fe 01       	movw	r30, r28
    269a:	e7 58       	subi	r30, 0x87	; 135
    269c:	fe 4f       	sbci	r31, 0xFE	; 254
    269e:	80 81       	ld	r24, Z
    26a0:	91 81       	ldd	r25, Z+1	; 0x01
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <lcd_init+0x122>
    26a6:	fe 01       	movw	r30, r28
    26a8:	e7 58       	subi	r30, 0x87	; 135
    26aa:	fe 4f       	sbci	r31, 0xFE	; 254
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	de 01       	movw	r26, r28
    26b2:	a5 58       	subi	r26, 0x85	; 133
    26b4:	be 4f       	sbci	r27, 0xFE	; 254
    26b6:	fe 01       	movw	r30, r28
    26b8:	e5 58       	subi	r30, 0x85	; 133
    26ba:	fe 4f       	sbci	r31, 0xFE	; 254
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	9c 93       	st	X, r25
    26c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	fe 01       	movw	r30, r28
    26ca:	e5 58       	subi	r30, 0x85	; 133
    26cc:	fe 4f       	sbci	r31, 0xFE	; 254
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	d1 f6       	brne	.-76     	; 0x268a <lcd_init+0x10a>
    26d6:	27 c0       	rjmp	.+78     	; 0x2726 <lcd_init+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d8:	8e 01       	movw	r16, r28
    26da:	05 58       	subi	r16, 0x85	; 133
    26dc:	1e 4f       	sbci	r17, 0xFE	; 254
    26de:	fe 01       	movw	r30, r28
    26e0:	e3 58       	subi	r30, 0x83	; 131
    26e2:	fe 4f       	sbci	r31, 0xFE	; 254
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	f8 01       	movw	r30, r16
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
    26fa:	de 01       	movw	r26, r28
    26fc:	a9 58       	subi	r26, 0x89	; 137
    26fe:	be 4f       	sbci	r27, 0xFE	; 254
    2700:	fe 01       	movw	r30, r28
    2702:	e5 58       	subi	r30, 0x85	; 133
    2704:	fe 4f       	sbci	r31, 0xFE	; 254
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	8d 93       	st	X+, r24
    270c:	9c 93       	st	X, r25
    270e:	fe 01       	movw	r30, r28
    2710:	e9 58       	subi	r30, 0x89	; 137
    2712:	fe 4f       	sbci	r31, 0xFE	; 254
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <lcd_init+0x198>
    271c:	fe 01       	movw	r30, r28
    271e:	e9 58       	subi	r30, 0x89	; 137
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
	_delay_ms(20);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	62 e0       	ldi	r22, 0x02	; 2
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    273a:	fe 01       	movw	r30, r28
    273c:	ed 58       	subi	r30, 0x8D	; 141
    273e:	fe 4f       	sbci	r31, 0xFE	; 254
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 ea       	ldi	r26, 0xA0	; 160
    2746:	b0 e4       	ldi	r27, 0x40	; 64
    2748:	80 83       	st	Z, r24
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	a2 83       	std	Z+2, r26	; 0x02
    274e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2750:	8e 01       	movw	r16, r28
    2752:	01 59       	subi	r16, 0x91	; 145
    2754:	1e 4f       	sbci	r17, 0xFE	; 254
    2756:	fe 01       	movw	r30, r28
    2758:	ed 58       	subi	r30, 0x8D	; 141
    275a:	fe 4f       	sbci	r31, 0xFE	; 254
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	2b ea       	ldi	r18, 0xAB	; 171
    2766:	3a ea       	ldi	r19, 0xAA	; 170
    2768:	4a ea       	ldi	r20, 0xAA	; 170
    276a:	50 e4       	ldi	r21, 0x40	; 64
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	f8 01       	movw	r30, r16
    2776:	80 83       	st	Z, r24
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	a2 83       	std	Z+2, r26	; 0x02
    277c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277e:	fe 01       	movw	r30, r28
    2780:	e1 59       	subi	r30, 0x91	; 145
    2782:	fe 4f       	sbci	r31, 0xFE	; 254
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	34 f4       	brge	.+12     	; 0x27a8 <lcd_init+0x228>
		__ticks = 1;
    279c:	fe 01       	movw	r30, r28
    279e:	e2 59       	subi	r30, 0x92	; 146
    27a0:	fe 4f       	sbci	r31, 0xFE	; 254
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	80 83       	st	Z, r24
    27a6:	e0 c0       	rjmp	.+448    	; 0x2968 <lcd_init+0x3e8>
	else if (__tmp > 255)
    27a8:	fe 01       	movw	r30, r28
    27aa:	e1 59       	subi	r30, 0x91	; 145
    27ac:	fe 4f       	sbci	r31, 0xFE	; 254
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	53 e4       	ldi	r21, 0x43	; 67
    27be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	0c f0       	brlt	.+2      	; 0x27c8 <lcd_init+0x248>
    27c6:	c0 c0       	rjmp	.+384    	; 0x2948 <lcd_init+0x3c8>
	{
		_delay_ms(__us / 1000.0);
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 58       	subi	r30, 0x8D	; 141
    27cc:	fe 4f       	sbci	r31, 0xFE	; 254
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a e7       	ldi	r20, 0x7A	; 122
    27dc:	54 e4       	ldi	r21, 0x44	; 68
    27de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	fe 01       	movw	r30, r28
    27e8:	e6 59       	subi	r30, 0x96	; 150
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	80 83       	st	Z, r24
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	a2 83       	std	Z+2, r26	; 0x02
    27f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	8e 01       	movw	r16, r28
    27f6:	0a 59       	subi	r16, 0x9A	; 154
    27f8:	1e 4f       	sbci	r17, 0xFE	; 254
    27fa:	fe 01       	movw	r30, r28
    27fc:	e6 59       	subi	r30, 0x96	; 150
    27fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2800:	60 81       	ld	r22, Z
    2802:	71 81       	ldd	r23, Z+1	; 0x01
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a e7       	ldi	r20, 0x7A	; 122
    280e:	55 e4       	ldi	r21, 0x45	; 69
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	f8 01       	movw	r30, r16
    281a:	80 83       	st	Z, r24
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	a2 83       	std	Z+2, r26	; 0x02
    2820:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2822:	fe 01       	movw	r30, r28
    2824:	ea 59       	subi	r30, 0x9A	; 154
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	44 f4       	brge	.+16     	; 0x2850 <lcd_init+0x2d0>
		__ticks = 1;
    2840:	fe 01       	movw	r30, r28
    2842:	ec 59       	subi	r30, 0x9C	; 156
    2844:	fe 4f       	sbci	r31, 0xFE	; 254
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	80 83       	st	Z, r24
    284e:	64 c0       	rjmp	.+200    	; 0x2918 <lcd_init+0x398>
	else if (__tmp > 65535)
    2850:	fe 01       	movw	r30, r28
    2852:	ea 59       	subi	r30, 0x9A	; 154
    2854:	fe 4f       	sbci	r31, 0xFE	; 254
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	0c f0       	brlt	.+2      	; 0x2870 <lcd_init+0x2f0>
    286e:	43 c0       	rjmp	.+134    	; 0x28f6 <lcd_init+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	fe 01       	movw	r30, r28
    2872:	e6 59       	subi	r30, 0x96	; 150
    2874:	fe 4f       	sbci	r31, 0xFE	; 254
    2876:	60 81       	ld	r22, Z
    2878:	71 81       	ldd	r23, Z+1	; 0x01
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	8e 01       	movw	r16, r28
    2890:	0c 59       	subi	r16, 0x9C	; 156
    2892:	1e 4f       	sbci	r17, 0xFE	; 254
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	f8 01       	movw	r30, r16
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	80 83       	st	Z, r24
    28a6:	1f c0       	rjmp	.+62     	; 0x28e6 <lcd_init+0x366>
    28a8:	fe 01       	movw	r30, r28
    28aa:	ee 59       	subi	r30, 0x9E	; 158
    28ac:	fe 4f       	sbci	r31, 0xFE	; 254
    28ae:	80 e9       	ldi	r24, 0x90	; 144
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
    28b6:	fe 01       	movw	r30, r28
    28b8:	ee 59       	subi	r30, 0x9E	; 158
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <lcd_init+0x340>
    28c4:	fe 01       	movw	r30, r28
    28c6:	ee 59       	subi	r30, 0x9E	; 158
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ce:	de 01       	movw	r26, r28
    28d0:	ac 59       	subi	r26, 0x9C	; 156
    28d2:	be 4f       	sbci	r27, 0xFE	; 254
    28d4:	fe 01       	movw	r30, r28
    28d6:	ec 59       	subi	r30, 0x9C	; 156
    28d8:	fe 4f       	sbci	r31, 0xFE	; 254
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	11 96       	adiw	r26, 0x01	; 1
    28e2:	9c 93       	st	X, r25
    28e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	fe 01       	movw	r30, r28
    28e8:	ec 59       	subi	r30, 0x9C	; 156
    28ea:	fe 4f       	sbci	r31, 0xFE	; 254
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	d1 f6       	brne	.-76     	; 0x28a8 <lcd_init+0x328>
    28f4:	4b c0       	rjmp	.+150    	; 0x298c <lcd_init+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	8e 01       	movw	r16, r28
    28f8:	0c 59       	subi	r16, 0x9C	; 156
    28fa:	1e 4f       	sbci	r17, 0xFE	; 254
    28fc:	fe 01       	movw	r30, r28
    28fe:	ea 59       	subi	r30, 0x9A	; 154
    2900:	fe 4f       	sbci	r31, 0xFE	; 254
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	f8 01       	movw	r30, r16
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
    2918:	de 01       	movw	r26, r28
    291a:	a0 5a       	subi	r26, 0xA0	; 160
    291c:	be 4f       	sbci	r27, 0xFE	; 254
    291e:	fe 01       	movw	r30, r28
    2920:	ec 59       	subi	r30, 0x9C	; 156
    2922:	fe 4f       	sbci	r31, 0xFE	; 254
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	11 96       	adiw	r26, 0x01	; 1
    292a:	9c 93       	st	X, r25
    292c:	8e 93       	st	-X, r24
    292e:	fe 01       	movw	r30, r28
    2930:	e0 5a       	subi	r30, 0xA0	; 160
    2932:	fe 4f       	sbci	r31, 0xFE	; 254
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <lcd_init+0x3b8>
    293c:	fe 01       	movw	r30, r28
    293e:	e0 5a       	subi	r30, 0xA0	; 160
    2940:	fe 4f       	sbci	r31, 0xFE	; 254
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	80 83       	st	Z, r24
    2946:	22 c0       	rjmp	.+68     	; 0x298c <lcd_init+0x40c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2948:	8e 01       	movw	r16, r28
    294a:	02 59       	subi	r16, 0x92	; 146
    294c:	1e 4f       	sbci	r17, 0xFE	; 254
    294e:	fe 01       	movw	r30, r28
    2950:	e1 59       	subi	r30, 0x91	; 145
    2952:	fe 4f       	sbci	r31, 0xFE	; 254
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	f8 01       	movw	r30, r16
    2966:	80 83       	st	Z, r24
    2968:	de 01       	movw	r26, r28
    296a:	a1 5a       	subi	r26, 0xA1	; 161
    296c:	be 4f       	sbci	r27, 0xFE	; 254
    296e:	fe 01       	movw	r30, r28
    2970:	e2 59       	subi	r30, 0x92	; 146
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	80 81       	ld	r24, Z
    2976:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2978:	fe 01       	movw	r30, r28
    297a:	e1 5a       	subi	r30, 0xA1	; 161
    297c:	fe 4f       	sbci	r31, 0xFE	; 254
    297e:	80 81       	ld	r24, Z
    2980:	8a 95       	dec	r24
    2982:	f1 f7       	brne	.-4      	; 0x2980 <lcd_init+0x400>
    2984:	fe 01       	movw	r30, r28
    2986:	e1 5a       	subi	r30, 0xA1	; 161
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	62 e0       	ldi	r22, 0x02	; 2
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    2996:	fe 01       	movw	r30, r28
    2998:	e5 5a       	subi	r30, 0xA5	; 165
    299a:	fe 4f       	sbci	r31, 0xFE	; 254
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 ea       	ldi	r26, 0xA0	; 160
    29a2:	b0 e4       	ldi	r27, 0x40	; 64
    29a4:	80 83       	st	Z, r24
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	a2 83       	std	Z+2, r26	; 0x02
    29aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29ac:	8e 01       	movw	r16, r28
    29ae:	09 5a       	subi	r16, 0xA9	; 169
    29b0:	1e 4f       	sbci	r17, 0xFE	; 254
    29b2:	fe 01       	movw	r30, r28
    29b4:	e5 5a       	subi	r30, 0xA5	; 165
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	2b ea       	ldi	r18, 0xAB	; 171
    29c2:	3a ea       	ldi	r19, 0xAA	; 170
    29c4:	4a ea       	ldi	r20, 0xAA	; 170
    29c6:	50 e4       	ldi	r21, 0x40	; 64
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29da:	fe 01       	movw	r30, r28
    29dc:	e9 5a       	subi	r30, 0xA9	; 169
    29de:	fe 4f       	sbci	r31, 0xFE	; 254
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	34 f4       	brge	.+12     	; 0x2a04 <lcd_init+0x484>
		__ticks = 1;
    29f8:	fe 01       	movw	r30, r28
    29fa:	ea 5a       	subi	r30, 0xAA	; 170
    29fc:	fe 4f       	sbci	r31, 0xFE	; 254
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	80 83       	st	Z, r24
    2a02:	e0 c0       	rjmp	.+448    	; 0x2bc4 <lcd_init+0x644>
	else if (__tmp > 255)
    2a04:	fe 01       	movw	r30, r28
    2a06:	e9 5a       	subi	r30, 0xA9	; 169
    2a08:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	53 e4       	ldi	r21, 0x43	; 67
    2a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	0c f0       	brlt	.+2      	; 0x2a24 <lcd_init+0x4a4>
    2a22:	c0 c0       	rjmp	.+384    	; 0x2ba4 <lcd_init+0x624>
	{
		_delay_ms(__us / 1000.0);
    2a24:	fe 01       	movw	r30, r28
    2a26:	e5 5a       	subi	r30, 0xA5	; 165
    2a28:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	54 e4       	ldi	r21, 0x44	; 68
    2a3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	fe 01       	movw	r30, r28
    2a44:	ee 5a       	subi	r30, 0xAE	; 174
    2a46:	fe 4f       	sbci	r31, 0xFE	; 254
    2a48:	80 83       	st	Z, r24
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	a2 83       	std	Z+2, r26	; 0x02
    2a4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	8e 01       	movw	r16, r28
    2a52:	02 5b       	subi	r16, 0xB2	; 178
    2a54:	1e 4f       	sbci	r17, 0xFE	; 254
    2a56:	fe 01       	movw	r30, r28
    2a58:	ee 5a       	subi	r30, 0xAE	; 174
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a e7       	ldi	r20, 0x7A	; 122
    2a6a:	55 e4       	ldi	r21, 0x45	; 69
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	80 83       	st	Z, r24
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	a2 83       	std	Z+2, r26	; 0x02
    2a7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e2 5b       	subi	r30, 0xB2	; 178
    2a82:	fe 4f       	sbci	r31, 0xFE	; 254
    2a84:	60 81       	ld	r22, Z
    2a86:	71 81       	ldd	r23, Z+1	; 0x01
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	93 81       	ldd	r25, Z+3	; 0x03
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	44 f4       	brge	.+16     	; 0x2aac <lcd_init+0x52c>
		__ticks = 1;
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e4 5b       	subi	r30, 0xB4	; 180
    2aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	64 c0       	rjmp	.+200    	; 0x2b74 <lcd_init+0x5f4>
	else if (__tmp > 65535)
    2aac:	fe 01       	movw	r30, r28
    2aae:	e2 5b       	subi	r30, 0xB2	; 178
    2ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	57 e4       	ldi	r21, 0x47	; 71
    2ac2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <lcd_init+0x54c>
    2aca:	43 c0       	rjmp	.+134    	; 0x2b52 <lcd_init+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	fe 01       	movw	r30, r28
    2ace:	ee 5a       	subi	r30, 0xAE	; 174
    2ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8e 01       	movw	r16, r28
    2aec:	04 5b       	subi	r16, 0xB4	; 180
    2aee:	1e 4f       	sbci	r17, 0xFE	; 254
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	f8 01       	movw	r30, r16
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	1f c0       	rjmp	.+62     	; 0x2b42 <lcd_init+0x5c2>
    2b04:	fe 01       	movw	r30, r28
    2b06:	e6 5b       	subi	r30, 0xB6	; 182
    2b08:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0a:	80 e9       	ldi	r24, 0x90	; 144
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b12:	fe 01       	movw	r30, r28
    2b14:	e6 5b       	subi	r30, 0xB6	; 182
    2b16:	fe 4f       	sbci	r31, 0xFE	; 254
    2b18:	80 81       	ld	r24, Z
    2b1a:	91 81       	ldd	r25, Z+1	; 0x01
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <lcd_init+0x59c>
    2b20:	fe 01       	movw	r30, r28
    2b22:	e6 5b       	subi	r30, 0xB6	; 182
    2b24:	fe 4f       	sbci	r31, 0xFE	; 254
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2a:	de 01       	movw	r26, r28
    2b2c:	a4 5b       	subi	r26, 0xB4	; 180
    2b2e:	be 4f       	sbci	r27, 0xFE	; 254
    2b30:	fe 01       	movw	r30, r28
    2b32:	e4 5b       	subi	r30, 0xB4	; 180
    2b34:	fe 4f       	sbci	r31, 0xFE	; 254
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	9c 93       	st	X, r25
    2b40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b42:	fe 01       	movw	r30, r28
    2b44:	e4 5b       	subi	r30, 0xB4	; 180
    2b46:	fe 4f       	sbci	r31, 0xFE	; 254
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	d1 f6       	brne	.-76     	; 0x2b04 <lcd_init+0x584>
    2b50:	4b c0       	rjmp	.+150    	; 0x2be8 <lcd_init+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	8e 01       	movw	r16, r28
    2b54:	04 5b       	subi	r16, 0xB4	; 180
    2b56:	1e 4f       	sbci	r17, 0xFE	; 254
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e2 5b       	subi	r30, 0xB2	; 178
    2b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	f8 01       	movw	r30, r16
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
    2b74:	de 01       	movw	r26, r28
    2b76:	a8 5b       	subi	r26, 0xB8	; 184
    2b78:	be 4f       	sbci	r27, 0xFE	; 254
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e4 5b       	subi	r30, 0xB4	; 180
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	9c 93       	st	X, r25
    2b88:	8e 93       	st	-X, r24
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e8 5b       	subi	r30, 0xB8	; 184
    2b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	f1 f7       	brne	.-4      	; 0x2b94 <lcd_init+0x614>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e8 5b       	subi	r30, 0xB8	; 184
    2b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
    2ba2:	22 c0       	rjmp	.+68     	; 0x2be8 <lcd_init+0x668>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ba4:	8e 01       	movw	r16, r28
    2ba6:	0a 5a       	subi	r16, 0xAA	; 170
    2ba8:	1e 4f       	sbci	r17, 0xFE	; 254
    2baa:	fe 01       	movw	r30, r28
    2bac:	e9 5a       	subi	r30, 0xA9	; 169
    2bae:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb0:	60 81       	ld	r22, Z
    2bb2:	71 81       	ldd	r23, Z+1	; 0x01
    2bb4:	82 81       	ldd	r24, Z+2	; 0x02
    2bb6:	93 81       	ldd	r25, Z+3	; 0x03
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	80 83       	st	Z, r24
    2bc4:	de 01       	movw	r26, r28
    2bc6:	a9 5b       	subi	r26, 0xB9	; 185
    2bc8:	be 4f       	sbci	r27, 0xFE	; 254
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ea 5a       	subi	r30, 0xAA	; 170
    2bce:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e9 5b       	subi	r30, 0xB9	; 185
    2bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bda:	80 81       	ld	r24, Z
    2bdc:	8a 95       	dec	r24
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <lcd_init+0x65c>
    2be0:	fe 01       	movw	r30, r28
    2be2:	e9 5b       	subi	r30, 0xB9	; 185
    2be4:	fe 4f       	sbci	r31, 0xFE	; 254
    2be6:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ed 5b       	subi	r30, 0xBD	; 189
    2bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 ea       	ldi	r26, 0xA0	; 160
    2bfe:	b0 e4       	ldi	r27, 0x40	; 64
    2c00:	80 83       	st	Z, r24
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	a2 83       	std	Z+2, r26	; 0x02
    2c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c08:	8e 01       	movw	r16, r28
    2c0a:	01 5c       	subi	r16, 0xC1	; 193
    2c0c:	1e 4f       	sbci	r17, 0xFE	; 254
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ed 5b       	subi	r30, 0xBD	; 189
    2c12:	fe 4f       	sbci	r31, 0xFE	; 254
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	2b ea       	ldi	r18, 0xAB	; 171
    2c1e:	3a ea       	ldi	r19, 0xAA	; 170
    2c20:	4a ea       	ldi	r20, 0xAA	; 170
    2c22:	50 e4       	ldi	r21, 0x40	; 64
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c36:	fe 01       	movw	r30, r28
    2c38:	e1 5c       	subi	r30, 0xC1	; 193
    2c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	34 f4       	brge	.+12     	; 0x2c60 <lcd_init+0x6e0>
		__ticks = 1;
    2c54:	fe 01       	movw	r30, r28
    2c56:	e2 5c       	subi	r30, 0xC2	; 194
    2c58:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	80 83       	st	Z, r24
    2c5e:	e0 c0       	rjmp	.+448    	; 0x2e20 <lcd_init+0x8a0>
	else if (__tmp > 255)
    2c60:	fe 01       	movw	r30, r28
    2c62:	e1 5c       	subi	r30, 0xC1	; 193
    2c64:	fe 4f       	sbci	r31, 0xFE	; 254
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	53 e4       	ldi	r21, 0x43	; 67
    2c76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	0c f0       	brlt	.+2      	; 0x2c80 <lcd_init+0x700>
    2c7e:	c0 c0       	rjmp	.+384    	; 0x2e00 <lcd_init+0x880>
	{
		_delay_ms(__us / 1000.0);
    2c80:	fe 01       	movw	r30, r28
    2c82:	ed 5b       	subi	r30, 0xBD	; 189
    2c84:	fe 4f       	sbci	r31, 0xFE	; 254
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	4a e7       	ldi	r20, 0x7A	; 122
    2c94:	54 e4       	ldi	r21, 0x44	; 68
    2c96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e6 5c       	subi	r30, 0xC6	; 198
    2ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca4:	80 83       	st	Z, r24
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	a2 83       	std	Z+2, r26	; 0x02
    2caa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	8e 01       	movw	r16, r28
    2cae:	0a 5c       	subi	r16, 0xCA	; 202
    2cb0:	1e 4f       	sbci	r17, 0xFE	; 254
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e6 5c       	subi	r30, 0xC6	; 198
    2cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a e7       	ldi	r20, 0x7A	; 122
    2cc6:	55 e4       	ldi	r21, 0x45	; 69
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	80 83       	st	Z, r24
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	a2 83       	std	Z+2, r26	; 0x02
    2cd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ea 5c       	subi	r30, 0xCA	; 202
    2cde:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce0:	60 81       	ld	r22, Z
    2ce2:	71 81       	ldd	r23, Z+1	; 0x01
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	93 81       	ldd	r25, Z+3	; 0x03
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e8       	ldi	r20, 0x80	; 128
    2cee:	5f e3       	ldi	r21, 0x3F	; 63
    2cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf4:	88 23       	and	r24, r24
    2cf6:	44 f4       	brge	.+16     	; 0x2d08 <lcd_init+0x788>
		__ticks = 1;
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	ec 5c       	subi	r30, 0xCC	; 204
    2cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24
    2d06:	64 c0       	rjmp	.+200    	; 0x2dd0 <lcd_init+0x850>
	else if (__tmp > 65535)
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ea 5c       	subi	r30, 0xCA	; 202
    2d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d22:	18 16       	cp	r1, r24
    2d24:	0c f0       	brlt	.+2      	; 0x2d28 <lcd_init+0x7a8>
    2d26:	43 c0       	rjmp	.+134    	; 0x2dae <lcd_init+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e6 5c       	subi	r30, 0xC6	; 198
    2d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	51 e4       	ldi	r21, 0x41	; 65
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	8e 01       	movw	r16, r28
    2d48:	0c 5c       	subi	r16, 0xCC	; 204
    2d4a:	1e 4f       	sbci	r17, 0xFE	; 254
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	f8 01       	movw	r30, r16
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
    2d5e:	1f c0       	rjmp	.+62     	; 0x2d9e <lcd_init+0x81e>
    2d60:	fe 01       	movw	r30, r28
    2d62:	ee 5c       	subi	r30, 0xCE	; 206
    2d64:	fe 4f       	sbci	r31, 0xFE	; 254
    2d66:	80 e9       	ldi	r24, 0x90	; 144
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ee 5c       	subi	r30, 0xCE	; 206
    2d72:	fe 4f       	sbci	r31, 0xFE	; 254
    2d74:	80 81       	ld	r24, Z
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <lcd_init+0x7f8>
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ee 5c       	subi	r30, 0xCE	; 206
    2d80:	fe 4f       	sbci	r31, 0xFE	; 254
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	de 01       	movw	r26, r28
    2d88:	ac 5c       	subi	r26, 0xCC	; 204
    2d8a:	be 4f       	sbci	r27, 0xFE	; 254
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ec 5c       	subi	r30, 0xCC	; 204
    2d90:	fe 4f       	sbci	r31, 0xFE	; 254
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	11 96       	adiw	r26, 0x01	; 1
    2d9a:	9c 93       	st	X, r25
    2d9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ec 5c       	subi	r30, 0xCC	; 204
    2da2:	fe 4f       	sbci	r31, 0xFE	; 254
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	d1 f6       	brne	.-76     	; 0x2d60 <lcd_init+0x7e0>
    2dac:	4b c0       	rjmp	.+150    	; 0x2e44 <lcd_init+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	8e 01       	movw	r16, r28
    2db0:	0c 5c       	subi	r16, 0xCC	; 204
    2db2:	1e 4f       	sbci	r17, 0xFE	; 254
    2db4:	fe 01       	movw	r30, r28
    2db6:	ea 5c       	subi	r30, 0xCA	; 202
    2db8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	f8 01       	movw	r30, r16
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	80 83       	st	Z, r24
    2dd0:	de 01       	movw	r26, r28
    2dd2:	a0 5d       	subi	r26, 0xD0	; 208
    2dd4:	be 4f       	sbci	r27, 0xFE	; 254
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ec 5c       	subi	r30, 0xCC	; 204
    2dda:	fe 4f       	sbci	r31, 0xFE	; 254
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	11 96       	adiw	r26, 0x01	; 1
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
    2de6:	fe 01       	movw	r30, r28
    2de8:	e0 5d       	subi	r30, 0xD0	; 208
    2dea:	fe 4f       	sbci	r31, 0xFE	; 254
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <lcd_init+0x870>
    2df4:	fe 01       	movw	r30, r28
    2df6:	e0 5d       	subi	r30, 0xD0	; 208
    2df8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	22 c0       	rjmp	.+68     	; 0x2e44 <lcd_init+0x8c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e00:	8e 01       	movw	r16, r28
    2e02:	02 5c       	subi	r16, 0xC2	; 194
    2e04:	1e 4f       	sbci	r17, 0xFE	; 254
    2e06:	fe 01       	movw	r30, r28
    2e08:	e1 5c       	subi	r30, 0xC1	; 193
    2e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	80 83       	st	Z, r24
    2e20:	de 01       	movw	r26, r28
    2e22:	a1 5d       	subi	r26, 0xD1	; 209
    2e24:	be 4f       	sbci	r27, 0xFE	; 254
    2e26:	fe 01       	movw	r30, r28
    2e28:	e2 5c       	subi	r30, 0xC2	; 194
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e30:	fe 01       	movw	r30, r28
    2e32:	e1 5d       	subi	r30, 0xD1	; 209
    2e34:	fe 4f       	sbci	r31, 0xFE	; 254
    2e36:	80 81       	ld	r24, Z
    2e38:	8a 95       	dec	r24
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <lcd_init+0x8b8>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e1 5d       	subi	r30, 0xD1	; 209
    2e40:	fe 4f       	sbci	r31, 0xFE	; 254
    2e42:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 3 << LCD_DATA_BUS_PORT_OFFSET);
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	68 e7       	ldi	r22, 0x78	; 120
    2e48:	48 e1       	ldi	r20, 0x18	; 24
    2e4a:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e5 5d       	subi	r30, 0xD5	; 213
    2e52:	fe 4f       	sbci	r31, 0xFE	; 254
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	a0 ea       	ldi	r26, 0xA0	; 160
    2e5a:	b0 e4       	ldi	r27, 0x40	; 64
    2e5c:	80 83       	st	Z, r24
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	a2 83       	std	Z+2, r26	; 0x02
    2e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e64:	8e 01       	movw	r16, r28
    2e66:	09 5d       	subi	r16, 0xD9	; 217
    2e68:	1e 4f       	sbci	r17, 0xFE	; 254
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e5 5d       	subi	r30, 0xD5	; 213
    2e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e70:	60 81       	ld	r22, Z
    2e72:	71 81       	ldd	r23, Z+1	; 0x01
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	93 81       	ldd	r25, Z+3	; 0x03
    2e78:	2b ea       	ldi	r18, 0xAB	; 171
    2e7a:	3a ea       	ldi	r19, 0xAA	; 170
    2e7c:	4a ea       	ldi	r20, 0xAA	; 170
    2e7e:	50 e4       	ldi	r21, 0x40	; 64
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	f8 01       	movw	r30, r16
    2e8a:	80 83       	st	Z, r24
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	a2 83       	std	Z+2, r26	; 0x02
    2e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e92:	fe 01       	movw	r30, r28
    2e94:	e9 5d       	subi	r30, 0xD9	; 217
    2e96:	fe 4f       	sbci	r31, 0xFE	; 254
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5f e3       	ldi	r21, 0x3F	; 63
    2ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	34 f4       	brge	.+12     	; 0x2ebc <lcd_init+0x93c>
		__ticks = 1;
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	ea 5d       	subi	r30, 0xDA	; 218
    2eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	80 83       	st	Z, r24
    2eba:	e0 c0       	rjmp	.+448    	; 0x307c <lcd_init+0xafc>
	else if (__tmp > 255)
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e9 5d       	subi	r30, 0xD9	; 217
    2ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4f e7       	ldi	r20, 0x7F	; 127
    2ed0:	53 e4       	ldi	r21, 0x43	; 67
    2ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed6:	18 16       	cp	r1, r24
    2ed8:	0c f0       	brlt	.+2      	; 0x2edc <lcd_init+0x95c>
    2eda:	c0 c0       	rjmp	.+384    	; 0x305c <lcd_init+0xadc>
	{
		_delay_ms(__us / 1000.0);
    2edc:	fe 01       	movw	r30, r28
    2ede:	e5 5d       	subi	r30, 0xD5	; 213
    2ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	4a e7       	ldi	r20, 0x7A	; 122
    2ef0:	54 e4       	ldi	r21, 0x44	; 68
    2ef2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	fe 01       	movw	r30, r28
    2efc:	ee 5d       	subi	r30, 0xDE	; 222
    2efe:	fe 4f       	sbci	r31, 0xFE	; 254
    2f00:	80 83       	st	Z, r24
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	a2 83       	std	Z+2, r26	; 0x02
    2f06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f08:	8e 01       	movw	r16, r28
    2f0a:	02 5e       	subi	r16, 0xE2	; 226
    2f0c:	1e 4f       	sbci	r17, 0xFE	; 254
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ee 5d       	subi	r30, 0xDE	; 222
    2f12:	fe 4f       	sbci	r31, 0xFE	; 254
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a e7       	ldi	r20, 0x7A	; 122
    2f22:	55 e4       	ldi	r21, 0x45	; 69
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	80 83       	st	Z, r24
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	a2 83       	std	Z+2, r26	; 0x02
    2f34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f36:	fe 01       	movw	r30, r28
    2f38:	e2 5e       	subi	r30, 0xE2	; 226
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e8       	ldi	r20, 0x80	; 128
    2f4a:	5f e3       	ldi	r21, 0x3F	; 63
    2f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f50:	88 23       	and	r24, r24
    2f52:	44 f4       	brge	.+16     	; 0x2f64 <lcd_init+0x9e4>
		__ticks = 1;
    2f54:	fe 01       	movw	r30, r28
    2f56:	e4 5e       	subi	r30, 0xE4	; 228
    2f58:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	64 c0       	rjmp	.+200    	; 0x302c <lcd_init+0xaac>
	else if (__tmp > 65535)
    2f64:	fe 01       	movw	r30, r28
    2f66:	e2 5e       	subi	r30, 0xE2	; 226
    2f68:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	57 e4       	ldi	r21, 0x47	; 71
    2f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	0c f0       	brlt	.+2      	; 0x2f84 <lcd_init+0xa04>
    2f82:	43 c0       	rjmp	.+134    	; 0x300a <lcd_init+0xa8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f84:	fe 01       	movw	r30, r28
    2f86:	ee 5d       	subi	r30, 0xDE	; 222
    2f88:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8a:	60 81       	ld	r22, Z
    2f8c:	71 81       	ldd	r23, Z+1	; 0x01
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e2       	ldi	r20, 0x20	; 32
    2f98:	51 e4       	ldi	r21, 0x41	; 65
    2f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	8e 01       	movw	r16, r28
    2fa4:	04 5e       	subi	r16, 0xE4	; 228
    2fa6:	1e 4f       	sbci	r17, 0xFE	; 254
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
    2fba:	1f c0       	rjmp	.+62     	; 0x2ffa <lcd_init+0xa7a>
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e6 5e       	subi	r30, 0xE6	; 230
    2fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc2:	80 e9       	ldi	r24, 0x90	; 144
    2fc4:	91 e0       	ldi	r25, 0x01	; 1
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e6 5e       	subi	r30, 0xE6	; 230
    2fce:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <lcd_init+0xa54>
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e6 5e       	subi	r30, 0xE6	; 230
    2fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe2:	de 01       	movw	r26, r28
    2fe4:	a4 5e       	subi	r26, 0xE4	; 228
    2fe6:	be 4f       	sbci	r27, 0xFE	; 254
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e4 5e       	subi	r30, 0xE4	; 228
    2fec:	fe 4f       	sbci	r31, 0xFE	; 254
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	11 96       	adiw	r26, 0x01	; 1
    2ff6:	9c 93       	st	X, r25
    2ff8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e4 5e       	subi	r30, 0xE4	; 228
    2ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    3000:	80 81       	ld	r24, Z
    3002:	91 81       	ldd	r25, Z+1	; 0x01
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	d1 f6       	brne	.-76     	; 0x2fbc <lcd_init+0xa3c>
    3008:	4b c0       	rjmp	.+150    	; 0x30a0 <lcd_init+0xb20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300a:	8e 01       	movw	r16, r28
    300c:	04 5e       	subi	r16, 0xE4	; 228
    300e:	1e 4f       	sbci	r17, 0xFE	; 254
    3010:	fe 01       	movw	r30, r28
    3012:	e2 5e       	subi	r30, 0xE2	; 226
    3014:	fe 4f       	sbci	r31, 0xFE	; 254
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	f8 01       	movw	r30, r16
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	80 83       	st	Z, r24
    302c:	de 01       	movw	r26, r28
    302e:	a8 5e       	subi	r26, 0xE8	; 232
    3030:	be 4f       	sbci	r27, 0xFE	; 254
    3032:	fe 01       	movw	r30, r28
    3034:	e4 5e       	subi	r30, 0xE4	; 228
    3036:	fe 4f       	sbci	r31, 0xFE	; 254
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	11 96       	adiw	r26, 0x01	; 1
    303e:	9c 93       	st	X, r25
    3040:	8e 93       	st	-X, r24
    3042:	fe 01       	movw	r30, r28
    3044:	e8 5e       	subi	r30, 0xE8	; 232
    3046:	fe 4f       	sbci	r31, 0xFE	; 254
    3048:	80 81       	ld	r24, Z
    304a:	91 81       	ldd	r25, Z+1	; 0x01
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <lcd_init+0xacc>
    3050:	fe 01       	movw	r30, r28
    3052:	e8 5e       	subi	r30, 0xE8	; 232
    3054:	fe 4f       	sbci	r31, 0xFE	; 254
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	80 83       	st	Z, r24
    305a:	22 c0       	rjmp	.+68     	; 0x30a0 <lcd_init+0xb20>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    305c:	8e 01       	movw	r16, r28
    305e:	0a 5d       	subi	r16, 0xDA	; 218
    3060:	1e 4f       	sbci	r17, 0xFE	; 254
    3062:	fe 01       	movw	r30, r28
    3064:	e9 5d       	subi	r30, 0xD9	; 217
    3066:	fe 4f       	sbci	r31, 0xFE	; 254
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	f8 01       	movw	r30, r16
    307a:	80 83       	st	Z, r24
    307c:	de 01       	movw	r26, r28
    307e:	a9 5e       	subi	r26, 0xE9	; 233
    3080:	be 4f       	sbci	r27, 0xFE	; 254
    3082:	fe 01       	movw	r30, r28
    3084:	ea 5d       	subi	r30, 0xDA	; 218
    3086:	fe 4f       	sbci	r31, 0xFE	; 254
    3088:	80 81       	ld	r24, Z
    308a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    308c:	fe 01       	movw	r30, r28
    308e:	e9 5e       	subi	r30, 0xE9	; 233
    3090:	fe 4f       	sbci	r31, 0xFE	; 254
    3092:	80 81       	ld	r24, Z
    3094:	8a 95       	dec	r24
    3096:	f1 f7       	brne	.-4      	; 0x3094 <lcd_init+0xb14>
    3098:	fe 01       	movw	r30, r28
    309a:	e9 5e       	subi	r30, 0xE9	; 233
    309c:	fe 4f       	sbci	r31, 0xFE	; 254
    309e:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	62 e0       	ldi	r22, 0x02	; 2
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    30aa:	fe 01       	movw	r30, r28
    30ac:	ed 5e       	subi	r30, 0xED	; 237
    30ae:	fe 4f       	sbci	r31, 0xFE	; 254
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	a0 ea       	ldi	r26, 0xA0	; 160
    30b6:	b0 e4       	ldi	r27, 0x40	; 64
    30b8:	80 83       	st	Z, r24
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	a2 83       	std	Z+2, r26	; 0x02
    30be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c0:	8e 01       	movw	r16, r28
    30c2:	01 5f       	subi	r16, 0xF1	; 241
    30c4:	1e 4f       	sbci	r17, 0xFE	; 254
    30c6:	fe 01       	movw	r30, r28
    30c8:	ed 5e       	subi	r30, 0xED	; 237
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	4a e7       	ldi	r20, 0x7A	; 122
    30da:	55 e4       	ldi	r21, 0x45	; 69
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	f8 01       	movw	r30, r16
    30e6:	80 83       	st	Z, r24
    30e8:	91 83       	std	Z+1, r25	; 0x01
    30ea:	a2 83       	std	Z+2, r26	; 0x02
    30ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30ee:	fe 01       	movw	r30, r28
    30f0:	e1 5f       	subi	r30, 0xF1	; 241
    30f2:	fe 4f       	sbci	r31, 0xFE	; 254
    30f4:	60 81       	ld	r22, Z
    30f6:	71 81       	ldd	r23, Z+1	; 0x01
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	93 81       	ldd	r25, Z+3	; 0x03
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e8       	ldi	r20, 0x80	; 128
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3108:	88 23       	and	r24, r24
    310a:	44 f4       	brge	.+16     	; 0x311c <lcd_init+0xb9c>
		__ticks = 1;
    310c:	fe 01       	movw	r30, r28
    310e:	e3 5f       	subi	r30, 0xF3	; 243
    3110:	fe 4f       	sbci	r31, 0xFE	; 254
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	80 83       	st	Z, r24
    311a:	64 c0       	rjmp	.+200    	; 0x31e4 <lcd_init+0xc64>
	else if (__tmp > 65535)
    311c:	fe 01       	movw	r30, r28
    311e:	e1 5f       	subi	r30, 0xF1	; 241
    3120:	fe 4f       	sbci	r31, 0xFE	; 254
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	0c f0       	brlt	.+2      	; 0x313c <lcd_init+0xbbc>
    313a:	43 c0       	rjmp	.+134    	; 0x31c2 <lcd_init+0xc42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313c:	fe 01       	movw	r30, r28
    313e:	ed 5e       	subi	r30, 0xED	; 237
    3140:	fe 4f       	sbci	r31, 0xFE	; 254
    3142:	60 81       	ld	r22, Z
    3144:	71 81       	ldd	r23, Z+1	; 0x01
    3146:	82 81       	ldd	r24, Z+2	; 0x02
    3148:	93 81       	ldd	r25, Z+3	; 0x03
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	8e 01       	movw	r16, r28
    315c:	03 5f       	subi	r16, 0xF3	; 243
    315e:	1e 4f       	sbci	r17, 0xFE	; 254
    3160:	bc 01       	movw	r22, r24
    3162:	cd 01       	movw	r24, r26
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	f8 01       	movw	r30, r16
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	1f c0       	rjmp	.+62     	; 0x31b2 <lcd_init+0xc32>
    3174:	fe 01       	movw	r30, r28
    3176:	e5 5f       	subi	r30, 0xF5	; 245
    3178:	fe 4f       	sbci	r31, 0xFE	; 254
    317a:	80 e9       	ldi	r24, 0x90	; 144
    317c:	91 e0       	ldi	r25, 0x01	; 1
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3182:	fe 01       	movw	r30, r28
    3184:	e5 5f       	subi	r30, 0xF5	; 245
    3186:	fe 4f       	sbci	r31, 0xFE	; 254
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <lcd_init+0xc0c>
    3190:	fe 01       	movw	r30, r28
    3192:	e5 5f       	subi	r30, 0xF5	; 245
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	91 83       	std	Z+1, r25	; 0x01
    3198:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319a:	de 01       	movw	r26, r28
    319c:	a3 5f       	subi	r26, 0xF3	; 243
    319e:	be 4f       	sbci	r27, 0xFE	; 254
    31a0:	fe 01       	movw	r30, r28
    31a2:	e3 5f       	subi	r30, 0xF3	; 243
    31a4:	fe 4f       	sbci	r31, 0xFE	; 254
    31a6:	80 81       	ld	r24, Z
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	11 96       	adiw	r26, 0x01	; 1
    31ae:	9c 93       	st	X, r25
    31b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b2:	fe 01       	movw	r30, r28
    31b4:	e3 5f       	subi	r30, 0xF3	; 243
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	80 81       	ld	r24, Z
    31ba:	91 81       	ldd	r25, Z+1	; 0x01
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	d1 f6       	brne	.-76     	; 0x3174 <lcd_init+0xbf4>
    31c0:	27 c0       	rjmp	.+78     	; 0x3210 <lcd_init+0xc90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c2:	8e 01       	movw	r16, r28
    31c4:	03 5f       	subi	r16, 0xF3	; 243
    31c6:	1e 4f       	sbci	r17, 0xFE	; 254
    31c8:	fe 01       	movw	r30, r28
    31ca:	e1 5f       	subi	r30, 0xF1	; 241
    31cc:	fe 4f       	sbci	r31, 0xFE	; 254
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	f8 01       	movw	r30, r16
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
    31e4:	de 01       	movw	r26, r28
    31e6:	a7 5f       	subi	r26, 0xF7	; 247
    31e8:	be 4f       	sbci	r27, 0xFE	; 254
    31ea:	fe 01       	movw	r30, r28
    31ec:	e3 5f       	subi	r30, 0xF3	; 243
    31ee:	fe 4f       	sbci	r31, 0xFE	; 254
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	8d 93       	st	X+, r24
    31f6:	9c 93       	st	X, r25
    31f8:	fe 01       	movw	r30, r28
    31fa:	e7 5f       	subi	r30, 0xF7	; 247
    31fc:	fe 4f       	sbci	r31, 0xFE	; 254
    31fe:	80 81       	ld	r24, Z
    3200:	91 81       	ldd	r25, Z+1	; 0x01
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <lcd_init+0xc82>
    3206:	fe 01       	movw	r30, r28
    3208:	e7 5f       	subi	r30, 0xF7	; 247
    320a:	fe 4f       	sbci	r31, 0xFE	; 254
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
	_delay_ms(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	62 e0       	ldi	r22, 0x02	; 2
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    321a:	fe 01       	movw	r30, r28
    321c:	eb 5f       	subi	r30, 0xFB	; 251
    321e:	fe 4f       	sbci	r31, 0xFE	; 254
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	a0 ea       	ldi	r26, 0xA0	; 160
    3226:	b0 e4       	ldi	r27, 0x40	; 64
    3228:	80 83       	st	Z, r24
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	a2 83       	std	Z+2, r26	; 0x02
    322e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3230:	8e 01       	movw	r16, r28
    3232:	0f 5f       	subi	r16, 0xFF	; 255
    3234:	1e 4f       	sbci	r17, 0xFE	; 254
    3236:	fe 01       	movw	r30, r28
    3238:	eb 5f       	subi	r30, 0xFB	; 251
    323a:	fe 4f       	sbci	r31, 0xFE	; 254
    323c:	60 81       	ld	r22, Z
    323e:	71 81       	ldd	r23, Z+1	; 0x01
    3240:	82 81       	ldd	r24, Z+2	; 0x02
    3242:	93 81       	ldd	r25, Z+3	; 0x03
    3244:	2b ea       	ldi	r18, 0xAB	; 171
    3246:	3a ea       	ldi	r19, 0xAA	; 170
    3248:	4a ea       	ldi	r20, 0xAA	; 170
    324a:	50 e4       	ldi	r21, 0x40	; 64
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	f8 01       	movw	r30, r16
    3256:	80 83       	st	Z, r24
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	a2 83       	std	Z+2, r26	; 0x02
    325c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    325e:	fe 01       	movw	r30, r28
    3260:	ef 5f       	subi	r30, 0xFF	; 255
    3262:	fe 4f       	sbci	r31, 0xFE	; 254
    3264:	60 81       	ld	r22, Z
    3266:	71 81       	ldd	r23, Z+1	; 0x01
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	40 e8       	ldi	r20, 0x80	; 128
    3272:	5f e3       	ldi	r21, 0x3F	; 63
    3274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3278:	88 23       	and	r24, r24
    327a:	34 f4       	brge	.+12     	; 0x3288 <lcd_init+0xd08>
		__ticks = 1;
    327c:	fe 01       	movw	r30, r28
    327e:	e0 50       	subi	r30, 0x00	; 0
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 83       	st	Z, r24
    3286:	e0 c0       	rjmp	.+448    	; 0x3448 <lcd_init+0xec8>
	else if (__tmp > 255)
    3288:	fe 01       	movw	r30, r28
    328a:	ef 5f       	subi	r30, 0xFF	; 255
    328c:	fe 4f       	sbci	r31, 0xFE	; 254
    328e:	60 81       	ld	r22, Z
    3290:	71 81       	ldd	r23, Z+1	; 0x01
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4f e7       	ldi	r20, 0x7F	; 127
    329c:	53 e4       	ldi	r21, 0x43	; 67
    329e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a2:	18 16       	cp	r1, r24
    32a4:	0c f0       	brlt	.+2      	; 0x32a8 <lcd_init+0xd28>
    32a6:	c0 c0       	rjmp	.+384    	; 0x3428 <lcd_init+0xea8>
	{
		_delay_ms(__us / 1000.0);
    32a8:	fe 01       	movw	r30, r28
    32aa:	eb 5f       	subi	r30, 0xFB	; 251
    32ac:	fe 4f       	sbci	r31, 0xFE	; 254
    32ae:	60 81       	ld	r22, Z
    32b0:	71 81       	ldd	r23, Z+1	; 0x01
    32b2:	82 81       	ldd	r24, Z+2	; 0x02
    32b4:	93 81       	ldd	r25, Z+3	; 0x03
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	4a e7       	ldi	r20, 0x7A	; 122
    32bc:	54 e4       	ldi	r21, 0x44	; 68
    32be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	fe 01       	movw	r30, r28
    32c8:	e4 50       	subi	r30, 0x04	; 4
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	80 83       	st	Z, r24
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	a2 83       	std	Z+2, r26	; 0x02
    32d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d4:	8e 01       	movw	r16, r28
    32d6:	08 50       	subi	r16, 0x08	; 8
    32d8:	1f 4f       	sbci	r17, 0xFF	; 255
    32da:	fe 01       	movw	r30, r28
    32dc:	e4 50       	subi	r30, 0x04	; 4
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	4a e7       	ldi	r20, 0x7A	; 122
    32ee:	55 e4       	ldi	r21, 0x45	; 69
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	f8 01       	movw	r30, r16
    32fa:	80 83       	st	Z, r24
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	a2 83       	std	Z+2, r26	; 0x02
    3300:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3302:	fe 01       	movw	r30, r28
    3304:	e8 50       	subi	r30, 0x08	; 8
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	60 81       	ld	r22, Z
    330a:	71 81       	ldd	r23, Z+1	; 0x01
    330c:	82 81       	ldd	r24, Z+2	; 0x02
    330e:	93 81       	ldd	r25, Z+3	; 0x03
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e8       	ldi	r20, 0x80	; 128
    3316:	5f e3       	ldi	r21, 0x3F	; 63
    3318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    331c:	88 23       	and	r24, r24
    331e:	44 f4       	brge	.+16     	; 0x3330 <lcd_init+0xdb0>
		__ticks = 1;
    3320:	fe 01       	movw	r30, r28
    3322:	ea 50       	subi	r30, 0x0A	; 10
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	80 83       	st	Z, r24
    332e:	64 c0       	rjmp	.+200    	; 0x33f8 <lcd_init+0xe78>
	else if (__tmp > 65535)
    3330:	fe 01       	movw	r30, r28
    3332:	e8 50       	subi	r30, 0x08	; 8
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	60 81       	ld	r22, Z
    3338:	71 81       	ldd	r23, Z+1	; 0x01
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	3f ef       	ldi	r19, 0xFF	; 255
    3342:	4f e7       	ldi	r20, 0x7F	; 127
    3344:	57 e4       	ldi	r21, 0x47	; 71
    3346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334a:	18 16       	cp	r1, r24
    334c:	0c f0       	brlt	.+2      	; 0x3350 <lcd_init+0xdd0>
    334e:	43 c0       	rjmp	.+134    	; 0x33d6 <lcd_init+0xe56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3350:	fe 01       	movw	r30, r28
    3352:	e4 50       	subi	r30, 0x04	; 4
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	60 81       	ld	r22, Z
    3358:	71 81       	ldd	r23, Z+1	; 0x01
    335a:	82 81       	ldd	r24, Z+2	; 0x02
    335c:	93 81       	ldd	r25, Z+3	; 0x03
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	51 e4       	ldi	r21, 0x41	; 65
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	8e 01       	movw	r16, r28
    3370:	0a 50       	subi	r16, 0x0A	; 10
    3372:	1f 4f       	sbci	r17, 0xFF	; 255
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
    3386:	1f c0       	rjmp	.+62     	; 0x33c6 <lcd_init+0xe46>
    3388:	fe 01       	movw	r30, r28
    338a:	ec 50       	subi	r30, 0x0C	; 12
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 e9       	ldi	r24, 0x90	; 144
    3390:	91 e0       	ldi	r25, 0x01	; 1
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
    3396:	fe 01       	movw	r30, r28
    3398:	ec 50       	subi	r30, 0x0C	; 12
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 81       	ld	r24, Z
    339e:	91 81       	ldd	r25, Z+1	; 0x01
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <lcd_init+0xe20>
    33a4:	fe 01       	movw	r30, r28
    33a6:	ec 50       	subi	r30, 0x0C	; 12
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ae:	de 01       	movw	r26, r28
    33b0:	aa 50       	subi	r26, 0x0A	; 10
    33b2:	bf 4f       	sbci	r27, 0xFF	; 255
    33b4:	fe 01       	movw	r30, r28
    33b6:	ea 50       	subi	r30, 0x0A	; 10
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	80 81       	ld	r24, Z
    33bc:	91 81       	ldd	r25, Z+1	; 0x01
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	11 96       	adiw	r26, 0x01	; 1
    33c2:	9c 93       	st	X, r25
    33c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c6:	fe 01       	movw	r30, r28
    33c8:	ea 50       	subi	r30, 0x0A	; 10
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	80 81       	ld	r24, Z
    33ce:	91 81       	ldd	r25, Z+1	; 0x01
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	d1 f6       	brne	.-76     	; 0x3388 <lcd_init+0xe08>
    33d4:	4b c0       	rjmp	.+150    	; 0x346c <lcd_init+0xeec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d6:	8e 01       	movw	r16, r28
    33d8:	0a 50       	subi	r16, 0x0A	; 10
    33da:	1f 4f       	sbci	r17, 0xFF	; 255
    33dc:	fe 01       	movw	r30, r28
    33de:	e8 50       	subi	r30, 0x08	; 8
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	60 81       	ld	r22, Z
    33e4:	71 81       	ldd	r23, Z+1	; 0x01
    33e6:	82 81       	ldd	r24, Z+2	; 0x02
    33e8:	93 81       	ldd	r25, Z+3	; 0x03
    33ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	f8 01       	movw	r30, r16
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	80 83       	st	Z, r24
    33f8:	de 01       	movw	r26, r28
    33fa:	ae 50       	subi	r26, 0x0E	; 14
    33fc:	bf 4f       	sbci	r27, 0xFF	; 255
    33fe:	fe 01       	movw	r30, r28
    3400:	ea 50       	subi	r30, 0x0A	; 10
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	11 96       	adiw	r26, 0x01	; 1
    340a:	9c 93       	st	X, r25
    340c:	8e 93       	st	-X, r24
    340e:	fe 01       	movw	r30, r28
    3410:	ee 50       	subi	r30, 0x0E	; 14
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <lcd_init+0xe98>
    341c:	fe 01       	movw	r30, r28
    341e:	ee 50       	subi	r30, 0x0E	; 14
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
    3426:	22 c0       	rjmp	.+68     	; 0x346c <lcd_init+0xeec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3428:	8e 01       	movw	r16, r28
    342a:	00 50       	subi	r16, 0x00	; 0
    342c:	1f 4f       	sbci	r17, 0xFF	; 255
    342e:	fe 01       	movw	r30, r28
    3430:	ef 5f       	subi	r30, 0xFF	; 255
    3432:	fe 4f       	sbci	r31, 0xFE	; 254
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	f8 01       	movw	r30, r16
    3446:	80 83       	st	Z, r24
    3448:	de 01       	movw	r26, r28
    344a:	af 50       	subi	r26, 0x0F	; 15
    344c:	bf 4f       	sbci	r27, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	e0 50       	subi	r30, 0x00	; 0
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3458:	fe 01       	movw	r30, r28
    345a:	ef 50       	subi	r30, 0x0F	; 15
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	80 81       	ld	r24, Z
    3460:	8a 95       	dec	r24
    3462:	f1 f7       	brne	.-4      	; 0x3460 <lcd_init+0xee0>
    3464:	fe 01       	movw	r30, r28
    3466:	ef 50       	subi	r30, 0x0F	; 15
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 3 << LCD_DATA_BUS_PORT_OFFSET);
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	68 e7       	ldi	r22, 0x78	; 120
    3470:	48 e1       	ldi	r20, 0x18	; 24
    3472:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    3476:	fe 01       	movw	r30, r28
    3478:	e3 51       	subi	r30, 0x13	; 19
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 ea       	ldi	r26, 0xA0	; 160
    3482:	b0 e4       	ldi	r27, 0x40	; 64
    3484:	80 83       	st	Z, r24
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	a2 83       	std	Z+2, r26	; 0x02
    348a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    348c:	8e 01       	movw	r16, r28
    348e:	07 51       	subi	r16, 0x17	; 23
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	fe 01       	movw	r30, r28
    3494:	e3 51       	subi	r30, 0x13	; 19
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	2b ea       	ldi	r18, 0xAB	; 171
    34a2:	3a ea       	ldi	r19, 0xAA	; 170
    34a4:	4a ea       	ldi	r20, 0xAA	; 170
    34a6:	50 e4       	ldi	r21, 0x40	; 64
    34a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	f8 01       	movw	r30, r16
    34b2:	80 83       	st	Z, r24
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	a2 83       	std	Z+2, r26	; 0x02
    34b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ba:	fe 01       	movw	r30, r28
    34bc:	e7 51       	subi	r30, 0x17	; 23
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e8       	ldi	r20, 0x80	; 128
    34ce:	5f e3       	ldi	r21, 0x3F	; 63
    34d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d4:	88 23       	and	r24, r24
    34d6:	34 f4       	brge	.+12     	; 0x34e4 <lcd_init+0xf64>
		__ticks = 1;
    34d8:	fe 01       	movw	r30, r28
    34da:	e8 51       	subi	r30, 0x18	; 24
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	80 83       	st	Z, r24
    34e2:	e0 c0       	rjmp	.+448    	; 0x36a4 <lcd_init+0x1124>
	else if (__tmp > 255)
    34e4:	fe 01       	movw	r30, r28
    34e6:	e7 51       	subi	r30, 0x17	; 23
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	53 e4       	ldi	r21, 0x43	; 67
    34fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	0c f0       	brlt	.+2      	; 0x3504 <lcd_init+0xf84>
    3502:	c0 c0       	rjmp	.+384    	; 0x3684 <lcd_init+0x1104>
	{
		_delay_ms(__us / 1000.0);
    3504:	fe 01       	movw	r30, r28
    3506:	e3 51       	subi	r30, 0x13	; 19
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a e7       	ldi	r20, 0x7A	; 122
    3518:	54 e4       	ldi	r21, 0x44	; 68
    351a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	fe 01       	movw	r30, r28
    3524:	ec 51       	subi	r30, 0x1C	; 28
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 83       	st	Z, r24
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	a2 83       	std	Z+2, r26	; 0x02
    352e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3530:	8e 01       	movw	r16, r28
    3532:	00 52       	subi	r16, 0x20	; 32
    3534:	1f 4f       	sbci	r17, 0xFF	; 255
    3536:	fe 01       	movw	r30, r28
    3538:	ec 51       	subi	r30, 0x1C	; 28
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	60 81       	ld	r22, Z
    353e:	71 81       	ldd	r23, Z+1	; 0x01
    3540:	82 81       	ldd	r24, Z+2	; 0x02
    3542:	93 81       	ldd	r25, Z+3	; 0x03
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	4a e7       	ldi	r20, 0x7A	; 122
    354a:	55 e4       	ldi	r21, 0x45	; 69
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	f8 01       	movw	r30, r16
    3556:	80 83       	st	Z, r24
    3558:	91 83       	std	Z+1, r25	; 0x01
    355a:	a2 83       	std	Z+2, r26	; 0x02
    355c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    355e:	fe 01       	movw	r30, r28
    3560:	e0 52       	subi	r30, 0x20	; 32
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	60 81       	ld	r22, Z
    3566:	71 81       	ldd	r23, Z+1	; 0x01
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e8       	ldi	r20, 0x80	; 128
    3572:	5f e3       	ldi	r21, 0x3F	; 63
    3574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3578:	88 23       	and	r24, r24
    357a:	44 f4       	brge	.+16     	; 0x358c <lcd_init+0x100c>
		__ticks = 1;
    357c:	fe 01       	movw	r30, r28
    357e:	e2 52       	subi	r30, 0x22	; 34
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	91 83       	std	Z+1, r25	; 0x01
    3588:	80 83       	st	Z, r24
    358a:	64 c0       	rjmp	.+200    	; 0x3654 <lcd_init+0x10d4>
	else if (__tmp > 65535)
    358c:	fe 01       	movw	r30, r28
    358e:	e0 52       	subi	r30, 0x20	; 32
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	0c f0       	brlt	.+2      	; 0x35ac <lcd_init+0x102c>
    35aa:	43 c0       	rjmp	.+134    	; 0x3632 <lcd_init+0x10b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ac:	fe 01       	movw	r30, r28
    35ae:	ec 51       	subi	r30, 0x1C	; 28
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e2       	ldi	r20, 0x20	; 32
    35c0:	51 e4       	ldi	r21, 0x41	; 65
    35c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	8e 01       	movw	r16, r28
    35cc:	02 52       	subi	r16, 0x22	; 34
    35ce:	1f 4f       	sbci	r17, 0xFF	; 255
    35d0:	bc 01       	movw	r22, r24
    35d2:	cd 01       	movw	r24, r26
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	f8 01       	movw	r30, r16
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	80 83       	st	Z, r24
    35e2:	1f c0       	rjmp	.+62     	; 0x3622 <lcd_init+0x10a2>
    35e4:	fe 01       	movw	r30, r28
    35e6:	e4 52       	subi	r30, 0x24	; 36
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 e9       	ldi	r24, 0x90	; 144
    35ec:	91 e0       	ldi	r25, 0x01	; 1
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35f2:	fe 01       	movw	r30, r28
    35f4:	e4 52       	subi	r30, 0x24	; 36
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <lcd_init+0x107c>
    3600:	fe 01       	movw	r30, r28
    3602:	e4 52       	subi	r30, 0x24	; 36
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	de 01       	movw	r26, r28
    360c:	a2 52       	subi	r26, 0x22	; 34
    360e:	bf 4f       	sbci	r27, 0xFF	; 255
    3610:	fe 01       	movw	r30, r28
    3612:	e2 52       	subi	r30, 0x22	; 34
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	80 81       	ld	r24, Z
    3618:	91 81       	ldd	r25, Z+1	; 0x01
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	11 96       	adiw	r26, 0x01	; 1
    361e:	9c 93       	st	X, r25
    3620:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3622:	fe 01       	movw	r30, r28
    3624:	e2 52       	subi	r30, 0x22	; 34
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 81       	ld	r24, Z
    362a:	91 81       	ldd	r25, Z+1	; 0x01
    362c:	00 97       	sbiw	r24, 0x00	; 0
    362e:	d1 f6       	brne	.-76     	; 0x35e4 <lcd_init+0x1064>
    3630:	4b c0       	rjmp	.+150    	; 0x36c8 <lcd_init+0x1148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3632:	8e 01       	movw	r16, r28
    3634:	02 52       	subi	r16, 0x22	; 34
    3636:	1f 4f       	sbci	r17, 0xFF	; 255
    3638:	fe 01       	movw	r30, r28
    363a:	e0 52       	subi	r30, 0x20	; 32
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	60 81       	ld	r22, Z
    3640:	71 81       	ldd	r23, Z+1	; 0x01
    3642:	82 81       	ldd	r24, Z+2	; 0x02
    3644:	93 81       	ldd	r25, Z+3	; 0x03
    3646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	f8 01       	movw	r30, r16
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
    3654:	de 01       	movw	r26, r28
    3656:	a6 52       	subi	r26, 0x26	; 38
    3658:	bf 4f       	sbci	r27, 0xFF	; 255
    365a:	fe 01       	movw	r30, r28
    365c:	e2 52       	subi	r30, 0x22	; 34
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 81       	ld	r24, Z
    3662:	91 81       	ldd	r25, Z+1	; 0x01
    3664:	11 96       	adiw	r26, 0x01	; 1
    3666:	9c 93       	st	X, r25
    3668:	8e 93       	st	-X, r24
    366a:	fe 01       	movw	r30, r28
    366c:	e6 52       	subi	r30, 0x26	; 38
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	80 81       	ld	r24, Z
    3672:	91 81       	ldd	r25, Z+1	; 0x01
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <lcd_init+0x10f4>
    3678:	fe 01       	movw	r30, r28
    367a:	e6 52       	subi	r30, 0x26	; 38
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
    3682:	22 c0       	rjmp	.+68     	; 0x36c8 <lcd_init+0x1148>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3684:	8e 01       	movw	r16, r28
    3686:	08 51       	subi	r16, 0x18	; 24
    3688:	1f 4f       	sbci	r17, 0xFF	; 255
    368a:	fe 01       	movw	r30, r28
    368c:	e7 51       	subi	r30, 0x17	; 23
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	f8 01       	movw	r30, r16
    36a2:	80 83       	st	Z, r24
    36a4:	de 01       	movw	r26, r28
    36a6:	a7 52       	subi	r26, 0x27	; 39
    36a8:	bf 4f       	sbci	r27, 0xFF	; 255
    36aa:	fe 01       	movw	r30, r28
    36ac:	e8 51       	subi	r30, 0x18	; 24
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 81       	ld	r24, Z
    36b2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36b4:	fe 01       	movw	r30, r28
    36b6:	e7 52       	subi	r30, 0x27	; 39
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	80 81       	ld	r24, Z
    36bc:	8a 95       	dec	r24
    36be:	f1 f7       	brne	.-4      	; 0x36bc <lcd_init+0x113c>
    36c0:	fe 01       	movw	r30, r28
    36c2:	e7 52       	subi	r30, 0x27	; 39
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	62 e0       	ldi	r22, 0x02	; 2
    36cc:	40 e0       	ldi	r20, 0x00	; 0
    36ce:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    36d2:	fe 01       	movw	r30, r28
    36d4:	eb 52       	subi	r30, 0x2B	; 43
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	a6 e1       	ldi	r26, 0x16	; 22
    36de:	b3 e4       	ldi	r27, 0x43	; 67
    36e0:	80 83       	st	Z, r24
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	a2 83       	std	Z+2, r26	; 0x02
    36e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36e8:	8e 01       	movw	r16, r28
    36ea:	0f 52       	subi	r16, 0x2F	; 47
    36ec:	1f 4f       	sbci	r17, 0xFF	; 255
    36ee:	fe 01       	movw	r30, r28
    36f0:	eb 52       	subi	r30, 0x2B	; 43
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	60 81       	ld	r22, Z
    36f6:	71 81       	ldd	r23, Z+1	; 0x01
    36f8:	82 81       	ldd	r24, Z+2	; 0x02
    36fa:	93 81       	ldd	r25, Z+3	; 0x03
    36fc:	2b ea       	ldi	r18, 0xAB	; 171
    36fe:	3a ea       	ldi	r19, 0xAA	; 170
    3700:	4a ea       	ldi	r20, 0xAA	; 170
    3702:	50 e4       	ldi	r21, 0x40	; 64
    3704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	f8 01       	movw	r30, r16
    370e:	80 83       	st	Z, r24
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	a2 83       	std	Z+2, r26	; 0x02
    3714:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3716:	fe 01       	movw	r30, r28
    3718:	ef 52       	subi	r30, 0x2F	; 47
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 81       	ld	r22, Z
    371e:	71 81       	ldd	r23, Z+1	; 0x01
    3720:	82 81       	ldd	r24, Z+2	; 0x02
    3722:	93 81       	ldd	r25, Z+3	; 0x03
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	34 f4       	brge	.+12     	; 0x3740 <lcd_init+0x11c0>
		__ticks = 1;
    3734:	fe 01       	movw	r30, r28
    3736:	e0 53       	subi	r30, 0x30	; 48
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	80 83       	st	Z, r24
    373e:	e0 c0       	rjmp	.+448    	; 0x3900 <lcd_init+0x1380>
	else if (__tmp > 255)
    3740:	fe 01       	movw	r30, r28
    3742:	ef 52       	subi	r30, 0x2F	; 47
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	4f e7       	ldi	r20, 0x7F	; 127
    3754:	53 e4       	ldi	r21, 0x43	; 67
    3756:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    375a:	18 16       	cp	r1, r24
    375c:	0c f0       	brlt	.+2      	; 0x3760 <lcd_init+0x11e0>
    375e:	c0 c0       	rjmp	.+384    	; 0x38e0 <lcd_init+0x1360>
	{
		_delay_ms(__us / 1000.0);
    3760:	fe 01       	movw	r30, r28
    3762:	eb 52       	subi	r30, 0x2B	; 43
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	60 81       	ld	r22, Z
    3768:	71 81       	ldd	r23, Z+1	; 0x01
    376a:	82 81       	ldd	r24, Z+2	; 0x02
    376c:	93 81       	ldd	r25, Z+3	; 0x03
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	4a e7       	ldi	r20, 0x7A	; 122
    3774:	54 e4       	ldi	r21, 0x44	; 68
    3776:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	fe 01       	movw	r30, r28
    3780:	e4 53       	subi	r30, 0x34	; 52
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	80 83       	st	Z, r24
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	a2 83       	std	Z+2, r26	; 0x02
    378a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378c:	8e 01       	movw	r16, r28
    378e:	08 53       	subi	r16, 0x38	; 56
    3790:	1f 4f       	sbci	r17, 0xFF	; 255
    3792:	fe 01       	movw	r30, r28
    3794:	e4 53       	subi	r30, 0x34	; 52
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	4a e7       	ldi	r20, 0x7A	; 122
    37a6:	55 e4       	ldi	r21, 0x45	; 69
    37a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	f8 01       	movw	r30, r16
    37b2:	80 83       	st	Z, r24
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	a2 83       	std	Z+2, r26	; 0x02
    37b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ba:	fe 01       	movw	r30, r28
    37bc:	e8 53       	subi	r30, 0x38	; 56
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	60 81       	ld	r22, Z
    37c2:	71 81       	ldd	r23, Z+1	; 0x01
    37c4:	82 81       	ldd	r24, Z+2	; 0x02
    37c6:	93 81       	ldd	r25, Z+3	; 0x03
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d4:	88 23       	and	r24, r24
    37d6:	44 f4       	brge	.+16     	; 0x37e8 <lcd_init+0x1268>
		__ticks = 1;
    37d8:	fe 01       	movw	r30, r28
    37da:	ea 53       	subi	r30, 0x3A	; 58
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	91 83       	std	Z+1, r25	; 0x01
    37e4:	80 83       	st	Z, r24
    37e6:	64 c0       	rjmp	.+200    	; 0x38b0 <lcd_init+0x1330>
	else if (__tmp > 65535)
    37e8:	fe 01       	movw	r30, r28
    37ea:	e8 53       	subi	r30, 0x38	; 56
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	60 81       	ld	r22, Z
    37f0:	71 81       	ldd	r23, Z+1	; 0x01
    37f2:	82 81       	ldd	r24, Z+2	; 0x02
    37f4:	93 81       	ldd	r25, Z+3	; 0x03
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	3f ef       	ldi	r19, 0xFF	; 255
    37fa:	4f e7       	ldi	r20, 0x7F	; 127
    37fc:	57 e4       	ldi	r21, 0x47	; 71
    37fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3802:	18 16       	cp	r1, r24
    3804:	0c f0       	brlt	.+2      	; 0x3808 <lcd_init+0x1288>
    3806:	43 c0       	rjmp	.+134    	; 0x388e <lcd_init+0x130e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3808:	fe 01       	movw	r30, r28
    380a:	e4 53       	subi	r30, 0x34	; 52
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e2       	ldi	r20, 0x20	; 32
    381c:	51 e4       	ldi	r21, 0x41	; 65
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	8e 01       	movw	r16, r28
    3828:	0a 53       	subi	r16, 0x3A	; 58
    382a:	1f 4f       	sbci	r17, 0xFF	; 255
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	f8 01       	movw	r30, r16
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24
    383e:	1f c0       	rjmp	.+62     	; 0x387e <lcd_init+0x12fe>
    3840:	fe 01       	movw	r30, r28
    3842:	ec 53       	subi	r30, 0x3C	; 60
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 e9       	ldi	r24, 0x90	; 144
    3848:	91 e0       	ldi	r25, 0x01	; 1
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    384e:	fe 01       	movw	r30, r28
    3850:	ec 53       	subi	r30, 0x3C	; 60
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <lcd_init+0x12d8>
    385c:	fe 01       	movw	r30, r28
    385e:	ec 53       	subi	r30, 0x3C	; 60
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	de 01       	movw	r26, r28
    3868:	aa 53       	subi	r26, 0x3A	; 58
    386a:	bf 4f       	sbci	r27, 0xFF	; 255
    386c:	fe 01       	movw	r30, r28
    386e:	ea 53       	subi	r30, 0x3A	; 58
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	01 97       	sbiw	r24, 0x01	; 1
    3878:	11 96       	adiw	r26, 0x01	; 1
    387a:	9c 93       	st	X, r25
    387c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	fe 01       	movw	r30, r28
    3880:	ea 53       	subi	r30, 0x3A	; 58
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 81       	ld	r24, Z
    3886:	91 81       	ldd	r25, Z+1	; 0x01
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	d1 f6       	brne	.-76     	; 0x3840 <lcd_init+0x12c0>
    388c:	4b c0       	rjmp	.+150    	; 0x3924 <lcd_init+0x13a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388e:	8e 01       	movw	r16, r28
    3890:	0a 53       	subi	r16, 0x3A	; 58
    3892:	1f 4f       	sbci	r17, 0xFF	; 255
    3894:	fe 01       	movw	r30, r28
    3896:	e8 53       	subi	r30, 0x38	; 56
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	f8 01       	movw	r30, r16
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	80 83       	st	Z, r24
    38b0:	de 01       	movw	r26, r28
    38b2:	ae 53       	subi	r26, 0x3E	; 62
    38b4:	bf 4f       	sbci	r27, 0xFF	; 255
    38b6:	fe 01       	movw	r30, r28
    38b8:	ea 53       	subi	r30, 0x3A	; 58
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 81       	ld	r24, Z
    38be:	91 81       	ldd	r25, Z+1	; 0x01
    38c0:	11 96       	adiw	r26, 0x01	; 1
    38c2:	9c 93       	st	X, r25
    38c4:	8e 93       	st	-X, r24
    38c6:	fe 01       	movw	r30, r28
    38c8:	ee 53       	subi	r30, 0x3E	; 62
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	80 81       	ld	r24, Z
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	01 97       	sbiw	r24, 0x01	; 1
    38d2:	f1 f7       	brne	.-4      	; 0x38d0 <lcd_init+0x1350>
    38d4:	fe 01       	movw	r30, r28
    38d6:	ee 53       	subi	r30, 0x3E	; 62
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	91 83       	std	Z+1, r25	; 0x01
    38dc:	80 83       	st	Z, r24
    38de:	22 c0       	rjmp	.+68     	; 0x3924 <lcd_init+0x13a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38e0:	8e 01       	movw	r16, r28
    38e2:	00 53       	subi	r16, 0x30	; 48
    38e4:	1f 4f       	sbci	r17, 0xFF	; 255
    38e6:	fe 01       	movw	r30, r28
    38e8:	ef 52       	subi	r30, 0x2F	; 47
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	60 81       	ld	r22, Z
    38ee:	71 81       	ldd	r23, Z+1	; 0x01
    38f0:	82 81       	ldd	r24, Z+2	; 0x02
    38f2:	93 81       	ldd	r25, Z+3	; 0x03
    38f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	f8 01       	movw	r30, r16
    38fe:	80 83       	st	Z, r24
    3900:	de 01       	movw	r26, r28
    3902:	af 53       	subi	r26, 0x3F	; 63
    3904:	bf 4f       	sbci	r27, 0xFF	; 255
    3906:	fe 01       	movw	r30, r28
    3908:	e0 53       	subi	r30, 0x30	; 48
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 81       	ld	r24, Z
    390e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3910:	fe 01       	movw	r30, r28
    3912:	ef 53       	subi	r30, 0x3F	; 63
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	8a 95       	dec	r24
    391a:	f1 f7       	brne	.-4      	; 0x3918 <lcd_init+0x1398>
    391c:	fe 01       	movw	r30, r28
    391e:	ef 53       	subi	r30, 0x3F	; 63
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	80 83       	st	Z, r24
	_delay_us(150);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	62 e0       	ldi	r22, 0x02	; 2
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    392e:	fe 01       	movw	r30, r28
    3930:	e3 54       	subi	r30, 0x43	; 67
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a0 ea       	ldi	r26, 0xA0	; 160
    393a:	b0 e4       	ldi	r27, 0x40	; 64
    393c:	80 83       	st	Z, r24
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	a2 83       	std	Z+2, r26	; 0x02
    3942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3944:	8e 01       	movw	r16, r28
    3946:	07 54       	subi	r16, 0x47	; 71
    3948:	1f 4f       	sbci	r17, 0xFF	; 255
    394a:	fe 01       	movw	r30, r28
    394c:	e3 54       	subi	r30, 0x43	; 67
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	2b ea       	ldi	r18, 0xAB	; 171
    395a:	3a ea       	ldi	r19, 0xAA	; 170
    395c:	4a ea       	ldi	r20, 0xAA	; 170
    395e:	50 e4       	ldi	r21, 0x40	; 64
    3960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	f8 01       	movw	r30, r16
    396a:	80 83       	st	Z, r24
    396c:	91 83       	std	Z+1, r25	; 0x01
    396e:	a2 83       	std	Z+2, r26	; 0x02
    3970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3972:	fe 01       	movw	r30, r28
    3974:	e7 54       	subi	r30, 0x47	; 71
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	60 81       	ld	r22, Z
    397a:	71 81       	ldd	r23, Z+1	; 0x01
    397c:	82 81       	ldd	r24, Z+2	; 0x02
    397e:	93 81       	ldd	r25, Z+3	; 0x03
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e8       	ldi	r20, 0x80	; 128
    3986:	5f e3       	ldi	r21, 0x3F	; 63
    3988:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    398c:	88 23       	and	r24, r24
    398e:	34 f4       	brge	.+12     	; 0x399c <lcd_init+0x141c>
		__ticks = 1;
    3990:	fe 01       	movw	r30, r28
    3992:	e8 54       	subi	r30, 0x48	; 72
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	80 83       	st	Z, r24
    399a:	e0 c0       	rjmp	.+448    	; 0x3b5c <lcd_init+0x15dc>
	else if (__tmp > 255)
    399c:	fe 01       	movw	r30, r28
    399e:	e7 54       	subi	r30, 0x47	; 71
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	60 81       	ld	r22, Z
    39a4:	71 81       	ldd	r23, Z+1	; 0x01
    39a6:	82 81       	ldd	r24, Z+2	; 0x02
    39a8:	93 81       	ldd	r25, Z+3	; 0x03
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	4f e7       	ldi	r20, 0x7F	; 127
    39b0:	53 e4       	ldi	r21, 0x43	; 67
    39b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39b6:	18 16       	cp	r1, r24
    39b8:	0c f0       	brlt	.+2      	; 0x39bc <lcd_init+0x143c>
    39ba:	c0 c0       	rjmp	.+384    	; 0x3b3c <lcd_init+0x15bc>
	{
		_delay_ms(__us / 1000.0);
    39bc:	fe 01       	movw	r30, r28
    39be:	e3 54       	subi	r30, 0x43	; 67
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	4a e7       	ldi	r20, 0x7A	; 122
    39d0:	54 e4       	ldi	r21, 0x44	; 68
    39d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	fe 01       	movw	r30, r28
    39dc:	ec 54       	subi	r30, 0x4C	; 76
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 83       	st	Z, r24
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	a2 83       	std	Z+2, r26	; 0x02
    39e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e8:	8e 01       	movw	r16, r28
    39ea:	00 55       	subi	r16, 0x50	; 80
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	fe 01       	movw	r30, r28
    39f0:	ec 54       	subi	r30, 0x4C	; 76
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	60 81       	ld	r22, Z
    39f6:	71 81       	ldd	r23, Z+1	; 0x01
    39f8:	82 81       	ldd	r24, Z+2	; 0x02
    39fa:	93 81       	ldd	r25, Z+3	; 0x03
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	4a e7       	ldi	r20, 0x7A	; 122
    3a02:	55 e4       	ldi	r21, 0x45	; 69
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	f8 01       	movw	r30, r16
    3a0e:	80 83       	st	Z, r24
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	a2 83       	std	Z+2, r26	; 0x02
    3a14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a16:	fe 01       	movw	r30, r28
    3a18:	e0 55       	subi	r30, 0x50	; 80
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	60 81       	ld	r22, Z
    3a1e:	71 81       	ldd	r23, Z+1	; 0x01
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	93 81       	ldd	r25, Z+3	; 0x03
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e8       	ldi	r20, 0x80	; 128
    3a2a:	5f e3       	ldi	r21, 0x3F	; 63
    3a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a30:	88 23       	and	r24, r24
    3a32:	44 f4       	brge	.+16     	; 0x3a44 <lcd_init+0x14c4>
		__ticks = 1;
    3a34:	fe 01       	movw	r30, r28
    3a36:	e2 55       	subi	r30, 0x52	; 82
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	80 83       	st	Z, r24
    3a42:	64 c0       	rjmp	.+200    	; 0x3b0c <lcd_init+0x158c>
	else if (__tmp > 65535)
    3a44:	fe 01       	movw	r30, r28
    3a46:	e0 55       	subi	r30, 0x50	; 80
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	60 81       	ld	r22, Z
    3a4c:	71 81       	ldd	r23, Z+1	; 0x01
    3a4e:	82 81       	ldd	r24, Z+2	; 0x02
    3a50:	93 81       	ldd	r25, Z+3	; 0x03
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	3f ef       	ldi	r19, 0xFF	; 255
    3a56:	4f e7       	ldi	r20, 0x7F	; 127
    3a58:	57 e4       	ldi	r21, 0x47	; 71
    3a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5e:	18 16       	cp	r1, r24
    3a60:	0c f0       	brlt	.+2      	; 0x3a64 <lcd_init+0x14e4>
    3a62:	43 c0       	rjmp	.+134    	; 0x3aea <lcd_init+0x156a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a64:	fe 01       	movw	r30, r28
    3a66:	ec 54       	subi	r30, 0x4C	; 76
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	60 81       	ld	r22, Z
    3a6c:	71 81       	ldd	r23, Z+1	; 0x01
    3a6e:	82 81       	ldd	r24, Z+2	; 0x02
    3a70:	93 81       	ldd	r25, Z+3	; 0x03
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e2       	ldi	r20, 0x20	; 32
    3a78:	51 e4       	ldi	r21, 0x41	; 65
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	8e 01       	movw	r16, r28
    3a84:	02 55       	subi	r16, 0x52	; 82
    3a86:	1f 4f       	sbci	r17, 0xFF	; 255
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	f8 01       	movw	r30, r16
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	1f c0       	rjmp	.+62     	; 0x3ada <lcd_init+0x155a>
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	e4 55       	subi	r30, 0x54	; 84
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	80 e9       	ldi	r24, 0x90	; 144
    3aa4:	91 e0       	ldi	r25, 0x01	; 1
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e4 55       	subi	r30, 0x54	; 84
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 81       	ld	r24, Z
    3ab2:	91 81       	ldd	r25, Z+1	; 0x01
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <lcd_init+0x1534>
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e4 55       	subi	r30, 0x54	; 84
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	91 83       	std	Z+1, r25	; 0x01
    3ac0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	de 01       	movw	r26, r28
    3ac4:	a2 55       	subi	r26, 0x52	; 82
    3ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e2 55       	subi	r30, 0x52	; 82
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	91 81       	ldd	r25, Z+1	; 0x01
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	11 96       	adiw	r26, 0x01	; 1
    3ad6:	9c 93       	st	X, r25
    3ad8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ada:	fe 01       	movw	r30, r28
    3adc:	e2 55       	subi	r30, 0x52	; 82
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	d1 f6       	brne	.-76     	; 0x3a9c <lcd_init+0x151c>
    3ae8:	4b c0       	rjmp	.+150    	; 0x3b80 <lcd_init+0x1600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aea:	8e 01       	movw	r16, r28
    3aec:	02 55       	subi	r16, 0x52	; 82
    3aee:	1f 4f       	sbci	r17, 0xFF	; 255
    3af0:	fe 01       	movw	r30, r28
    3af2:	e0 55       	subi	r30, 0x50	; 80
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	60 81       	ld	r22, Z
    3af8:	71 81       	ldd	r23, Z+1	; 0x01
    3afa:	82 81       	ldd	r24, Z+2	; 0x02
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	f8 01       	movw	r30, r16
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	80 83       	st	Z, r24
    3b0c:	de 01       	movw	r26, r28
    3b0e:	a6 55       	subi	r26, 0x56	; 86
    3b10:	bf 4f       	sbci	r27, 0xFF	; 255
    3b12:	fe 01       	movw	r30, r28
    3b14:	e2 55       	subi	r30, 0x52	; 82
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	80 81       	ld	r24, Z
    3b1a:	91 81       	ldd	r25, Z+1	; 0x01
    3b1c:	11 96       	adiw	r26, 0x01	; 1
    3b1e:	9c 93       	st	X, r25
    3b20:	8e 93       	st	-X, r24
    3b22:	fe 01       	movw	r30, r28
    3b24:	e6 55       	subi	r30, 0x56	; 86
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	80 81       	ld	r24, Z
    3b2a:	91 81       	ldd	r25, Z+1	; 0x01
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	f1 f7       	brne	.-4      	; 0x3b2c <lcd_init+0x15ac>
    3b30:	fe 01       	movw	r30, r28
    3b32:	e6 55       	subi	r30, 0x56	; 86
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24
    3b3a:	22 c0       	rjmp	.+68     	; 0x3b80 <lcd_init+0x1600>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b3c:	8e 01       	movw	r16, r28
    3b3e:	08 54       	subi	r16, 0x48	; 72
    3b40:	1f 4f       	sbci	r17, 0xFF	; 255
    3b42:	fe 01       	movw	r30, r28
    3b44:	e7 54       	subi	r30, 0x47	; 71
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	f8 01       	movw	r30, r16
    3b5a:	80 83       	st	Z, r24
    3b5c:	de 01       	movw	r26, r28
    3b5e:	a7 55       	subi	r26, 0x57	; 87
    3b60:	bf 4f       	sbci	r27, 0xFF	; 255
    3b62:	fe 01       	movw	r30, r28
    3b64:	e8 54       	subi	r30, 0x48	; 72
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	80 81       	ld	r24, Z
    3b6a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e7 55       	subi	r30, 0x57	; 87
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	80 81       	ld	r24, Z
    3b74:	8a 95       	dec	r24
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <lcd_init+0x15f4>
    3b78:	fe 01       	movw	r30, r28
    3b7a:	e7 55       	subi	r30, 0x57	; 87
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	62 e0       	ldi	r22, 0x02	; 2
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	eb 55       	subi	r30, 0x5B	; 91
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	a0 ea       	ldi	r26, 0xA0	; 160
    3b96:	b0 e4       	ldi	r27, 0x40	; 64
    3b98:	80 83       	st	Z, r24
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	a2 83       	std	Z+2, r26	; 0x02
    3b9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ba0:	8e 01       	movw	r16, r28
    3ba2:	0f 55       	subi	r16, 0x5F	; 95
    3ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	eb 55       	subi	r30, 0x5B	; 91
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	2b ea       	ldi	r18, 0xAB	; 171
    3bb6:	3a ea       	ldi	r19, 0xAA	; 170
    3bb8:	4a ea       	ldi	r20, 0xAA	; 170
    3bba:	50 e4       	ldi	r21, 0x40	; 64
    3bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	f8 01       	movw	r30, r16
    3bc6:	80 83       	st	Z, r24
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	a2 83       	std	Z+2, r26	; 0x02
    3bcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ef 55       	subi	r30, 0x5F	; 95
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	60 81       	ld	r22, Z
    3bd6:	71 81       	ldd	r23, Z+1	; 0x01
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	93 81       	ldd	r25, Z+3	; 0x03
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e8       	ldi	r20, 0x80	; 128
    3be2:	5f e3       	ldi	r21, 0x3F	; 63
    3be4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3be8:	88 23       	and	r24, r24
    3bea:	34 f4       	brge	.+12     	; 0x3bf8 <lcd_init+0x1678>
		__ticks = 1;
    3bec:	fe 01       	movw	r30, r28
    3bee:	e0 56       	subi	r30, 0x60	; 96
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	80 83       	st	Z, r24
    3bf6:	e0 c0       	rjmp	.+448    	; 0x3db8 <lcd_init+0x1838>
	else if (__tmp > 255)
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	ef 55       	subi	r30, 0x5F	; 95
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	60 81       	ld	r22, Z
    3c00:	71 81       	ldd	r23, Z+1	; 0x01
    3c02:	82 81       	ldd	r24, Z+2	; 0x02
    3c04:	93 81       	ldd	r25, Z+3	; 0x03
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	53 e4       	ldi	r21, 0x43	; 67
    3c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	0c f0       	brlt	.+2      	; 0x3c18 <lcd_init+0x1698>
    3c16:	c0 c0       	rjmp	.+384    	; 0x3d98 <lcd_init+0x1818>
	{
		_delay_ms(__us / 1000.0);
    3c18:	fe 01       	movw	r30, r28
    3c1a:	eb 55       	subi	r30, 0x5B	; 91
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	60 81       	ld	r22, Z
    3c20:	71 81       	ldd	r23, Z+1	; 0x01
    3c22:	82 81       	ldd	r24, Z+2	; 0x02
    3c24:	93 81       	ldd	r25, Z+3	; 0x03
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	4a e7       	ldi	r20, 0x7A	; 122
    3c2c:	54 e4       	ldi	r21, 0x44	; 68
    3c2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	fe 01       	movw	r30, r28
    3c38:	e4 56       	subi	r30, 0x64	; 100
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	80 83       	st	Z, r24
    3c3e:	91 83       	std	Z+1, r25	; 0x01
    3c40:	a2 83       	std	Z+2, r26	; 0x02
    3c42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c44:	8e 01       	movw	r16, r28
    3c46:	08 56       	subi	r16, 0x68	; 104
    3c48:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e4 56       	subi	r30, 0x64	; 100
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	60 81       	ld	r22, Z
    3c52:	71 81       	ldd	r23, Z+1	; 0x01
    3c54:	82 81       	ldd	r24, Z+2	; 0x02
    3c56:	93 81       	ldd	r25, Z+3	; 0x03
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	4a e7       	ldi	r20, 0x7A	; 122
    3c5e:	55 e4       	ldi	r21, 0x45	; 69
    3c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	f8 01       	movw	r30, r16
    3c6a:	80 83       	st	Z, r24
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	a2 83       	std	Z+2, r26	; 0x02
    3c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c72:	fe 01       	movw	r30, r28
    3c74:	e8 56       	subi	r30, 0x68	; 104
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	60 81       	ld	r22, Z
    3c7a:	71 81       	ldd	r23, Z+1	; 0x01
    3c7c:	82 81       	ldd	r24, Z+2	; 0x02
    3c7e:	93 81       	ldd	r25, Z+3	; 0x03
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e8       	ldi	r20, 0x80	; 128
    3c86:	5f e3       	ldi	r21, 0x3F	; 63
    3c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c8c:	88 23       	and	r24, r24
    3c8e:	44 f4       	brge	.+16     	; 0x3ca0 <lcd_init+0x1720>
		__ticks = 1;
    3c90:	fe 01       	movw	r30, r28
    3c92:	ea 56       	subi	r30, 0x6A	; 106
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	80 83       	st	Z, r24
    3c9e:	64 c0       	rjmp	.+200    	; 0x3d68 <lcd_init+0x17e8>
	else if (__tmp > 65535)
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e8 56       	subi	r30, 0x68	; 104
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	60 81       	ld	r22, Z
    3ca8:	71 81       	ldd	r23, Z+1	; 0x01
    3caa:	82 81       	ldd	r24, Z+2	; 0x02
    3cac:	93 81       	ldd	r25, Z+3	; 0x03
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	3f ef       	ldi	r19, 0xFF	; 255
    3cb2:	4f e7       	ldi	r20, 0x7F	; 127
    3cb4:	57 e4       	ldi	r21, 0x47	; 71
    3cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cba:	18 16       	cp	r1, r24
    3cbc:	0c f0       	brlt	.+2      	; 0x3cc0 <lcd_init+0x1740>
    3cbe:	43 c0       	rjmp	.+134    	; 0x3d46 <lcd_init+0x17c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	e4 56       	subi	r30, 0x64	; 100
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	60 81       	ld	r22, Z
    3cc8:	71 81       	ldd	r23, Z+1	; 0x01
    3cca:	82 81       	ldd	r24, Z+2	; 0x02
    3ccc:	93 81       	ldd	r25, Z+3	; 0x03
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	40 e2       	ldi	r20, 0x20	; 32
    3cd4:	51 e4       	ldi	r21, 0x41	; 65
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	8e 01       	movw	r16, r28
    3ce0:	0a 56       	subi	r16, 0x6A	; 106
    3ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	f8 01       	movw	r30, r16
    3cf2:	91 83       	std	Z+1, r25	; 0x01
    3cf4:	80 83       	st	Z, r24
    3cf6:	1f c0       	rjmp	.+62     	; 0x3d36 <lcd_init+0x17b6>
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	ec 56       	subi	r30, 0x6C	; 108
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	80 e9       	ldi	r24, 0x90	; 144
    3d00:	91 e0       	ldi	r25, 0x01	; 1
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d06:	fe 01       	movw	r30, r28
    3d08:	ec 56       	subi	r30, 0x6C	; 108
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	f1 f7       	brne	.-4      	; 0x3d10 <lcd_init+0x1790>
    3d14:	fe 01       	movw	r30, r28
    3d16:	ec 56       	subi	r30, 0x6C	; 108
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	91 83       	std	Z+1, r25	; 0x01
    3d1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1e:	de 01       	movw	r26, r28
    3d20:	aa 56       	subi	r26, 0x6A	; 106
    3d22:	bf 4f       	sbci	r27, 0xFF	; 255
    3d24:	fe 01       	movw	r30, r28
    3d26:	ea 56       	subi	r30, 0x6A	; 106
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	80 81       	ld	r24, Z
    3d2c:	91 81       	ldd	r25, Z+1	; 0x01
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	11 96       	adiw	r26, 0x01	; 1
    3d32:	9c 93       	st	X, r25
    3d34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d36:	fe 01       	movw	r30, r28
    3d38:	ea 56       	subi	r30, 0x6A	; 106
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	80 81       	ld	r24, Z
    3d3e:	91 81       	ldd	r25, Z+1	; 0x01
    3d40:	00 97       	sbiw	r24, 0x00	; 0
    3d42:	d1 f6       	brne	.-76     	; 0x3cf8 <lcd_init+0x1778>
    3d44:	4b c0       	rjmp	.+150    	; 0x3ddc <lcd_init+0x185c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d46:	8e 01       	movw	r16, r28
    3d48:	0a 56       	subi	r16, 0x6A	; 106
    3d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	e8 56       	subi	r30, 0x68	; 104
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	60 81       	ld	r22, Z
    3d54:	71 81       	ldd	r23, Z+1	; 0x01
    3d56:	82 81       	ldd	r24, Z+2	; 0x02
    3d58:	93 81       	ldd	r25, Z+3	; 0x03
    3d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	f8 01       	movw	r30, r16
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	80 83       	st	Z, r24
    3d68:	de 01       	movw	r26, r28
    3d6a:	ae 56       	subi	r26, 0x6E	; 110
    3d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ea 56       	subi	r30, 0x6A	; 106
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	80 81       	ld	r24, Z
    3d76:	91 81       	ldd	r25, Z+1	; 0x01
    3d78:	11 96       	adiw	r26, 0x01	; 1
    3d7a:	9c 93       	st	X, r25
    3d7c:	8e 93       	st	-X, r24
    3d7e:	fe 01       	movw	r30, r28
    3d80:	ee 56       	subi	r30, 0x6E	; 110
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	80 81       	ld	r24, Z
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <lcd_init+0x1808>
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	ee 56       	subi	r30, 0x6E	; 110
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	80 83       	st	Z, r24
    3d96:	22 c0       	rjmp	.+68     	; 0x3ddc <lcd_init+0x185c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d98:	8e 01       	movw	r16, r28
    3d9a:	00 56       	subi	r16, 0x60	; 96
    3d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9e:	fe 01       	movw	r30, r28
    3da0:	ef 55       	subi	r30, 0x5F	; 95
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	f8 01       	movw	r30, r16
    3db6:	80 83       	st	Z, r24
    3db8:	de 01       	movw	r26, r28
    3dba:	af 56       	subi	r26, 0x6F	; 111
    3dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	e0 56       	subi	r30, 0x60	; 96
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	80 81       	ld	r24, Z
    3dc6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dc8:	fe 01       	movw	r30, r28
    3dca:	ef 56       	subi	r30, 0x6F	; 111
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 81       	ld	r24, Z
    3dd0:	8a 95       	dec	r24
    3dd2:	f1 f7       	brne	.-4      	; 0x3dd0 <lcd_init+0x1850>
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	ef 56       	subi	r30, 0x6F	; 111
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 3 << LCD_DATA_BUS_PORT_OFFSET);
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	68 e7       	ldi	r22, 0x78	; 120
    3de0:	48 e1       	ldi	r20, 0x18	; 24
    3de2:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    3de6:	fe 01       	movw	r30, r28
    3de8:	e3 57       	subi	r30, 0x73	; 115
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	a0 ea       	ldi	r26, 0xA0	; 160
    3df2:	b0 e4       	ldi	r27, 0x40	; 64
    3df4:	80 83       	st	Z, r24
    3df6:	91 83       	std	Z+1, r25	; 0x01
    3df8:	a2 83       	std	Z+2, r26	; 0x02
    3dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3dfc:	8e 01       	movw	r16, r28
    3dfe:	07 57       	subi	r16, 0x77	; 119
    3e00:	1f 4f       	sbci	r17, 0xFF	; 255
    3e02:	fe 01       	movw	r30, r28
    3e04:	e3 57       	subi	r30, 0x73	; 115
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	60 81       	ld	r22, Z
    3e0a:	71 81       	ldd	r23, Z+1	; 0x01
    3e0c:	82 81       	ldd	r24, Z+2	; 0x02
    3e0e:	93 81       	ldd	r25, Z+3	; 0x03
    3e10:	2b ea       	ldi	r18, 0xAB	; 171
    3e12:	3a ea       	ldi	r19, 0xAA	; 170
    3e14:	4a ea       	ldi	r20, 0xAA	; 170
    3e16:	50 e4       	ldi	r21, 0x40	; 64
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	f8 01       	movw	r30, r16
    3e22:	80 83       	st	Z, r24
    3e24:	91 83       	std	Z+1, r25	; 0x01
    3e26:	a2 83       	std	Z+2, r26	; 0x02
    3e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e7 57       	subi	r30, 0x77	; 119
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	60 81       	ld	r22, Z
    3e32:	71 81       	ldd	r23, Z+1	; 0x01
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e8       	ldi	r20, 0x80	; 128
    3e3e:	5f e3       	ldi	r21, 0x3F	; 63
    3e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e44:	88 23       	and	r24, r24
    3e46:	34 f4       	brge	.+12     	; 0x3e54 <lcd_init+0x18d4>
		__ticks = 1;
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e8 57       	subi	r30, 0x78	; 120
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	80 83       	st	Z, r24
    3e52:	e0 c0       	rjmp	.+448    	; 0x4014 <lcd_init+0x1a94>
	else if (__tmp > 255)
    3e54:	fe 01       	movw	r30, r28
    3e56:	e7 57       	subi	r30, 0x77	; 119
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	4f e7       	ldi	r20, 0x7F	; 127
    3e68:	53 e4       	ldi	r21, 0x43	; 67
    3e6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e6e:	18 16       	cp	r1, r24
    3e70:	0c f0       	brlt	.+2      	; 0x3e74 <lcd_init+0x18f4>
    3e72:	c0 c0       	rjmp	.+384    	; 0x3ff4 <lcd_init+0x1a74>
	{
		_delay_ms(__us / 1000.0);
    3e74:	fe 01       	movw	r30, r28
    3e76:	e3 57       	subi	r30, 0x73	; 115
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	60 81       	ld	r22, Z
    3e7c:	71 81       	ldd	r23, Z+1	; 0x01
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	93 81       	ldd	r25, Z+3	; 0x03
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	4a e7       	ldi	r20, 0x7A	; 122
    3e88:	54 e4       	ldi	r21, 0x44	; 68
    3e8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	fe 01       	movw	r30, r28
    3e94:	ec 57       	subi	r30, 0x7C	; 124
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	80 83       	st	Z, r24
    3e9a:	91 83       	std	Z+1, r25	; 0x01
    3e9c:	a2 83       	std	Z+2, r26	; 0x02
    3e9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea0:	8e 01       	movw	r16, r28
    3ea2:	00 58       	subi	r16, 0x80	; 128
    3ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	ec 57       	subi	r30, 0x7C	; 124
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	4a e7       	ldi	r20, 0x7A	; 122
    3eba:	55 e4       	ldi	r21, 0x45	; 69
    3ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	80 83       	st	Z, r24
    3ec8:	91 83       	std	Z+1, r25	; 0x01
    3eca:	a2 83       	std	Z+2, r26	; 0x02
    3ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e0 58       	subi	r30, 0x80	; 128
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	60 81       	ld	r22, Z
    3ed6:	71 81       	ldd	r23, Z+1	; 0x01
    3ed8:	82 81       	ldd	r24, Z+2	; 0x02
    3eda:	93 81       	ldd	r25, Z+3	; 0x03
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e8       	ldi	r20, 0x80	; 128
    3ee2:	5f e3       	ldi	r21, 0x3F	; 63
    3ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ee8:	88 23       	and	r24, r24
    3eea:	44 f4       	brge	.+16     	; 0x3efc <lcd_init+0x197c>
		__ticks = 1;
    3eec:	fe 01       	movw	r30, r28
    3eee:	e2 58       	subi	r30, 0x82	; 130
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
    3efa:	64 c0       	rjmp	.+200    	; 0x3fc4 <lcd_init+0x1a44>
	else if (__tmp > 65535)
    3efc:	fe 01       	movw	r30, r28
    3efe:	e0 58       	subi	r30, 0x80	; 128
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	82 81       	ldd	r24, Z+2	; 0x02
    3f08:	93 81       	ldd	r25, Z+3	; 0x03
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	3f ef       	ldi	r19, 0xFF	; 255
    3f0e:	4f e7       	ldi	r20, 0x7F	; 127
    3f10:	57 e4       	ldi	r21, 0x47	; 71
    3f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f16:	18 16       	cp	r1, r24
    3f18:	0c f0       	brlt	.+2      	; 0x3f1c <lcd_init+0x199c>
    3f1a:	43 c0       	rjmp	.+134    	; 0x3fa2 <lcd_init+0x1a22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	ec 57       	subi	r30, 0x7C	; 124
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	60 81       	ld	r22, Z
    3f24:	71 81       	ldd	r23, Z+1	; 0x01
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e2       	ldi	r20, 0x20	; 32
    3f30:	51 e4       	ldi	r21, 0x41	; 65
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	02 58       	subi	r16, 0x82	; 130
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f40:	bc 01       	movw	r22, r24
    3f42:	cd 01       	movw	r24, r26
    3f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	f8 01       	movw	r30, r16
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	80 83       	st	Z, r24
    3f52:	1f c0       	rjmp	.+62     	; 0x3f92 <lcd_init+0x1a12>
    3f54:	fe 01       	movw	r30, r28
    3f56:	e4 58       	subi	r30, 0x84	; 132
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	80 e9       	ldi	r24, 0x90	; 144
    3f5c:	91 e0       	ldi	r25, 0x01	; 1
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f62:	fe 01       	movw	r30, r28
    3f64:	e4 58       	subi	r30, 0x84	; 132
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 81       	ld	r24, Z
    3f6a:	91 81       	ldd	r25, Z+1	; 0x01
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	f1 f7       	brne	.-4      	; 0x3f6c <lcd_init+0x19ec>
    3f70:	fe 01       	movw	r30, r28
    3f72:	e4 58       	subi	r30, 0x84	; 132
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	91 83       	std	Z+1, r25	; 0x01
    3f78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7a:	de 01       	movw	r26, r28
    3f7c:	a2 58       	subi	r26, 0x82	; 130
    3f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f80:	fe 01       	movw	r30, r28
    3f82:	e2 58       	subi	r30, 0x82	; 130
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	80 81       	ld	r24, Z
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	11 96       	adiw	r26, 0x01	; 1
    3f8e:	9c 93       	st	X, r25
    3f90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f92:	fe 01       	movw	r30, r28
    3f94:	e2 58       	subi	r30, 0x82	; 130
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	80 81       	ld	r24, Z
    3f9a:	91 81       	ldd	r25, Z+1	; 0x01
    3f9c:	00 97       	sbiw	r24, 0x00	; 0
    3f9e:	d1 f6       	brne	.-76     	; 0x3f54 <lcd_init+0x19d4>
    3fa0:	4b c0       	rjmp	.+150    	; 0x4038 <lcd_init+0x1ab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa2:	8e 01       	movw	r16, r28
    3fa4:	02 58       	subi	r16, 0x82	; 130
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e0 58       	subi	r30, 0x80	; 128
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	60 81       	ld	r22, Z
    3fb0:	71 81       	ldd	r23, Z+1	; 0x01
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	93 81       	ldd	r25, Z+3	; 0x03
    3fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	f8 01       	movw	r30, r16
    3fc0:	91 83       	std	Z+1, r25	; 0x01
    3fc2:	80 83       	st	Z, r24
    3fc4:	de 01       	movw	r26, r28
    3fc6:	a6 58       	subi	r26, 0x86	; 134
    3fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e2 58       	subi	r30, 0x82	; 130
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	80 81       	ld	r24, Z
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	11 96       	adiw	r26, 0x01	; 1
    3fd6:	9c 93       	st	X, r25
    3fd8:	8e 93       	st	-X, r24
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e6 58       	subi	r30, 0x86	; 134
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	80 81       	ld	r24, Z
    3fe2:	91 81       	ldd	r25, Z+1	; 0x01
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <lcd_init+0x1a64>
    3fe8:	fe 01       	movw	r30, r28
    3fea:	e6 58       	subi	r30, 0x86	; 134
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
    3ff2:	22 c0       	rjmp	.+68     	; 0x4038 <lcd_init+0x1ab8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ff4:	8e 01       	movw	r16, r28
    3ff6:	08 57       	subi	r16, 0x78	; 120
    3ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e7 57       	subi	r30, 0x77	; 119
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	60 81       	ld	r22, Z
    4002:	71 81       	ldd	r23, Z+1	; 0x01
    4004:	82 81       	ldd	r24, Z+2	; 0x02
    4006:	93 81       	ldd	r25, Z+3	; 0x03
    4008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	f8 01       	movw	r30, r16
    4012:	80 83       	st	Z, r24
    4014:	de 01       	movw	r26, r28
    4016:	a7 58       	subi	r26, 0x87	; 135
    4018:	bf 4f       	sbci	r27, 0xFF	; 255
    401a:	fe 01       	movw	r30, r28
    401c:	e8 57       	subi	r30, 0x78	; 120
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 81       	ld	r24, Z
    4022:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4024:	fe 01       	movw	r30, r28
    4026:	e7 58       	subi	r30, 0x87	; 135
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 81       	ld	r24, Z
    402c:	8a 95       	dec	r24
    402e:	f1 f7       	brne	.-4      	; 0x402c <lcd_init+0x1aac>
    4030:	fe 01       	movw	r30, r28
    4032:	e7 58       	subi	r30, 0x87	; 135
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	62 e0       	ldi	r22, 0x02	; 2
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    4042:	fe 01       	movw	r30, r28
    4044:	eb 58       	subi	r30, 0x8B	; 139
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	a0 ea       	ldi	r26, 0xA0	; 160
    404e:	b0 e4       	ldi	r27, 0x40	; 64
    4050:	80 83       	st	Z, r24
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	a2 83       	std	Z+2, r26	; 0x02
    4056:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4058:	8e 01       	movw	r16, r28
    405a:	0f 58       	subi	r16, 0x8F	; 143
    405c:	1f 4f       	sbci	r17, 0xFF	; 255
    405e:	fe 01       	movw	r30, r28
    4060:	eb 58       	subi	r30, 0x8B	; 139
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	60 81       	ld	r22, Z
    4066:	71 81       	ldd	r23, Z+1	; 0x01
    4068:	82 81       	ldd	r24, Z+2	; 0x02
    406a:	93 81       	ldd	r25, Z+3	; 0x03
    406c:	2b ea       	ldi	r18, 0xAB	; 171
    406e:	3a ea       	ldi	r19, 0xAA	; 170
    4070:	4a ea       	ldi	r20, 0xAA	; 170
    4072:	50 e4       	ldi	r21, 0x40	; 64
    4074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	f8 01       	movw	r30, r16
    407e:	80 83       	st	Z, r24
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	a2 83       	std	Z+2, r26	; 0x02
    4084:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4086:	fe 01       	movw	r30, r28
    4088:	ef 58       	subi	r30, 0x8F	; 143
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	60 81       	ld	r22, Z
    408e:	71 81       	ldd	r23, Z+1	; 0x01
    4090:	82 81       	ldd	r24, Z+2	; 0x02
    4092:	93 81       	ldd	r25, Z+3	; 0x03
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e8       	ldi	r20, 0x80	; 128
    409a:	5f e3       	ldi	r21, 0x3F	; 63
    409c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a0:	88 23       	and	r24, r24
    40a2:	34 f4       	brge	.+12     	; 0x40b0 <lcd_init+0x1b30>
		__ticks = 1;
    40a4:	fe 01       	movw	r30, r28
    40a6:	e0 59       	subi	r30, 0x90	; 144
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	80 83       	st	Z, r24
    40ae:	e0 c0       	rjmp	.+448    	; 0x4270 <lcd_init+0x1cf0>
	else if (__tmp > 255)
    40b0:	fe 01       	movw	r30, r28
    40b2:	ef 58       	subi	r30, 0x8F	; 143
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	60 81       	ld	r22, Z
    40b8:	71 81       	ldd	r23, Z+1	; 0x01
    40ba:	82 81       	ldd	r24, Z+2	; 0x02
    40bc:	93 81       	ldd	r25, Z+3	; 0x03
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	4f e7       	ldi	r20, 0x7F	; 127
    40c4:	53 e4       	ldi	r21, 0x43	; 67
    40c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ca:	18 16       	cp	r1, r24
    40cc:	0c f0       	brlt	.+2      	; 0x40d0 <lcd_init+0x1b50>
    40ce:	c0 c0       	rjmp	.+384    	; 0x4250 <lcd_init+0x1cd0>
	{
		_delay_ms(__us / 1000.0);
    40d0:	fe 01       	movw	r30, r28
    40d2:	eb 58       	subi	r30, 0x8B	; 139
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	60 81       	ld	r22, Z
    40d8:	71 81       	ldd	r23, Z+1	; 0x01
    40da:	82 81       	ldd	r24, Z+2	; 0x02
    40dc:	93 81       	ldd	r25, Z+3	; 0x03
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	4a e7       	ldi	r20, 0x7A	; 122
    40e4:	54 e4       	ldi	r21, 0x44	; 68
    40e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	fe 01       	movw	r30, r28
    40f0:	e4 59       	subi	r30, 0x94	; 148
    40f2:	ff 4f       	sbci	r31, 0xFF	; 255
    40f4:	80 83       	st	Z, r24
    40f6:	91 83       	std	Z+1, r25	; 0x01
    40f8:	a2 83       	std	Z+2, r26	; 0x02
    40fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fc:	8e 01       	movw	r16, r28
    40fe:	08 59       	subi	r16, 0x98	; 152
    4100:	1f 4f       	sbci	r17, 0xFF	; 255
    4102:	fe 01       	movw	r30, r28
    4104:	e4 59       	subi	r30, 0x94	; 148
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	60 81       	ld	r22, Z
    410a:	71 81       	ldd	r23, Z+1	; 0x01
    410c:	82 81       	ldd	r24, Z+2	; 0x02
    410e:	93 81       	ldd	r25, Z+3	; 0x03
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	4a e7       	ldi	r20, 0x7A	; 122
    4116:	55 e4       	ldi	r21, 0x45	; 69
    4118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	f8 01       	movw	r30, r16
    4122:	80 83       	st	Z, r24
    4124:	91 83       	std	Z+1, r25	; 0x01
    4126:	a2 83       	std	Z+2, r26	; 0x02
    4128:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    412a:	fe 01       	movw	r30, r28
    412c:	e8 59       	subi	r30, 0x98	; 152
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	60 81       	ld	r22, Z
    4132:	71 81       	ldd	r23, Z+1	; 0x01
    4134:	82 81       	ldd	r24, Z+2	; 0x02
    4136:	93 81       	ldd	r25, Z+3	; 0x03
    4138:	20 e0       	ldi	r18, 0x00	; 0
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	40 e8       	ldi	r20, 0x80	; 128
    413e:	5f e3       	ldi	r21, 0x3F	; 63
    4140:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4144:	88 23       	and	r24, r24
    4146:	44 f4       	brge	.+16     	; 0x4158 <lcd_init+0x1bd8>
		__ticks = 1;
    4148:	fe 01       	movw	r30, r28
    414a:	ea 59       	subi	r30, 0x9A	; 154
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
    4156:	64 c0       	rjmp	.+200    	; 0x4220 <lcd_init+0x1ca0>
	else if (__tmp > 65535)
    4158:	fe 01       	movw	r30, r28
    415a:	e8 59       	subi	r30, 0x98	; 152
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	60 81       	ld	r22, Z
    4160:	71 81       	ldd	r23, Z+1	; 0x01
    4162:	82 81       	ldd	r24, Z+2	; 0x02
    4164:	93 81       	ldd	r25, Z+3	; 0x03
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	3f ef       	ldi	r19, 0xFF	; 255
    416a:	4f e7       	ldi	r20, 0x7F	; 127
    416c:	57 e4       	ldi	r21, 0x47	; 71
    416e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4172:	18 16       	cp	r1, r24
    4174:	0c f0       	brlt	.+2      	; 0x4178 <lcd_init+0x1bf8>
    4176:	43 c0       	rjmp	.+134    	; 0x41fe <lcd_init+0x1c7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4178:	fe 01       	movw	r30, r28
    417a:	e4 59       	subi	r30, 0x94	; 148
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	60 81       	ld	r22, Z
    4180:	71 81       	ldd	r23, Z+1	; 0x01
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e2       	ldi	r20, 0x20	; 32
    418c:	51 e4       	ldi	r21, 0x41	; 65
    418e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	8e 01       	movw	r16, r28
    4198:	0a 59       	subi	r16, 0x9A	; 154
    419a:	1f 4f       	sbci	r17, 0xFF	; 255
    419c:	bc 01       	movw	r22, r24
    419e:	cd 01       	movw	r24, r26
    41a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	f8 01       	movw	r30, r16
    41aa:	91 83       	std	Z+1, r25	; 0x01
    41ac:	80 83       	st	Z, r24
    41ae:	1f c0       	rjmp	.+62     	; 0x41ee <lcd_init+0x1c6e>
    41b0:	fe 01       	movw	r30, r28
    41b2:	ec 59       	subi	r30, 0x9C	; 156
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 e9       	ldi	r24, 0x90	; 144
    41b8:	91 e0       	ldi	r25, 0x01	; 1
    41ba:	91 83       	std	Z+1, r25	; 0x01
    41bc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41be:	fe 01       	movw	r30, r28
    41c0:	ec 59       	subi	r30, 0x9C	; 156
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	80 81       	ld	r24, Z
    41c6:	91 81       	ldd	r25, Z+1	; 0x01
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	f1 f7       	brne	.-4      	; 0x41c8 <lcd_init+0x1c48>
    41cc:	fe 01       	movw	r30, r28
    41ce:	ec 59       	subi	r30, 0x9C	; 156
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	91 83       	std	Z+1, r25	; 0x01
    41d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d6:	de 01       	movw	r26, r28
    41d8:	aa 59       	subi	r26, 0x9A	; 154
    41da:	bf 4f       	sbci	r27, 0xFF	; 255
    41dc:	fe 01       	movw	r30, r28
    41de:	ea 59       	subi	r30, 0x9A	; 154
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	80 81       	ld	r24, Z
    41e4:	91 81       	ldd	r25, Z+1	; 0x01
    41e6:	01 97       	sbiw	r24, 0x01	; 1
    41e8:	11 96       	adiw	r26, 0x01	; 1
    41ea:	9c 93       	st	X, r25
    41ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ee:	fe 01       	movw	r30, r28
    41f0:	ea 59       	subi	r30, 0x9A	; 154
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	80 81       	ld	r24, Z
    41f6:	91 81       	ldd	r25, Z+1	; 0x01
    41f8:	00 97       	sbiw	r24, 0x00	; 0
    41fa:	d1 f6       	brne	.-76     	; 0x41b0 <lcd_init+0x1c30>
    41fc:	4b c0       	rjmp	.+150    	; 0x4294 <lcd_init+0x1d14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fe:	8e 01       	movw	r16, r28
    4200:	0a 59       	subi	r16, 0x9A	; 154
    4202:	1f 4f       	sbci	r17, 0xFF	; 255
    4204:	fe 01       	movw	r30, r28
    4206:	e8 59       	subi	r30, 0x98	; 152
    4208:	ff 4f       	sbci	r31, 0xFF	; 255
    420a:	60 81       	ld	r22, Z
    420c:	71 81       	ldd	r23, Z+1	; 0x01
    420e:	82 81       	ldd	r24, Z+2	; 0x02
    4210:	93 81       	ldd	r25, Z+3	; 0x03
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	f8 01       	movw	r30, r16
    421c:	91 83       	std	Z+1, r25	; 0x01
    421e:	80 83       	st	Z, r24
    4220:	de 01       	movw	r26, r28
    4222:	ae 59       	subi	r26, 0x9E	; 158
    4224:	bf 4f       	sbci	r27, 0xFF	; 255
    4226:	fe 01       	movw	r30, r28
    4228:	ea 59       	subi	r30, 0x9A	; 154
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	80 81       	ld	r24, Z
    422e:	91 81       	ldd	r25, Z+1	; 0x01
    4230:	11 96       	adiw	r26, 0x01	; 1
    4232:	9c 93       	st	X, r25
    4234:	8e 93       	st	-X, r24
    4236:	fe 01       	movw	r30, r28
    4238:	ee 59       	subi	r30, 0x9E	; 158
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	80 81       	ld	r24, Z
    423e:	91 81       	ldd	r25, Z+1	; 0x01
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <lcd_init+0x1cc0>
    4244:	fe 01       	movw	r30, r28
    4246:	ee 59       	subi	r30, 0x9E	; 158
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	91 83       	std	Z+1, r25	; 0x01
    424c:	80 83       	st	Z, r24
    424e:	22 c0       	rjmp	.+68     	; 0x4294 <lcd_init+0x1d14>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4250:	8e 01       	movw	r16, r28
    4252:	00 59       	subi	r16, 0x90	; 144
    4254:	1f 4f       	sbci	r17, 0xFF	; 255
    4256:	fe 01       	movw	r30, r28
    4258:	ef 58       	subi	r30, 0x8F	; 143
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	60 81       	ld	r22, Z
    425e:	71 81       	ldd	r23, Z+1	; 0x01
    4260:	82 81       	ldd	r24, Z+2	; 0x02
    4262:	93 81       	ldd	r25, Z+3	; 0x03
    4264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	f8 01       	movw	r30, r16
    426e:	80 83       	st	Z, r24
    4270:	de 01       	movw	r26, r28
    4272:	af 59       	subi	r26, 0x9F	; 159
    4274:	bf 4f       	sbci	r27, 0xFF	; 255
    4276:	fe 01       	movw	r30, r28
    4278:	e0 59       	subi	r30, 0x90	; 144
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 81       	ld	r24, Z
    427e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4280:	fe 01       	movw	r30, r28
    4282:	ef 59       	subi	r30, 0x9F	; 159
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	80 81       	ld	r24, Z
    4288:	8a 95       	dec	r24
    428a:	f1 f7       	brne	.-4      	; 0x4288 <lcd_init+0x1d08>
    428c:	fe 01       	movw	r30, r28
    428e:	ef 59       	subi	r30, 0x9F	; 159
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	80 83       	st	Z, r24

	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	62 e0       	ldi	r22, 0x02	; 2
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    429e:	fe 01       	movw	r30, r28
    42a0:	e3 5a       	subi	r30, 0xA3	; 163
    42a2:	ff 4f       	sbci	r31, 0xFF	; 255
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	a0 ea       	ldi	r26, 0xA0	; 160
    42aa:	b0 e4       	ldi	r27, 0x40	; 64
    42ac:	80 83       	st	Z, r24
    42ae:	91 83       	std	Z+1, r25	; 0x01
    42b0:	a2 83       	std	Z+2, r26	; 0x02
    42b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42b4:	8e 01       	movw	r16, r28
    42b6:	07 5a       	subi	r16, 0xA7	; 167
    42b8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ba:	fe 01       	movw	r30, r28
    42bc:	e3 5a       	subi	r30, 0xA3	; 163
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	60 81       	ld	r22, Z
    42c2:	71 81       	ldd	r23, Z+1	; 0x01
    42c4:	82 81       	ldd	r24, Z+2	; 0x02
    42c6:	93 81       	ldd	r25, Z+3	; 0x03
    42c8:	2b ea       	ldi	r18, 0xAB	; 171
    42ca:	3a ea       	ldi	r19, 0xAA	; 170
    42cc:	4a ea       	ldi	r20, 0xAA	; 170
    42ce:	50 e4       	ldi	r21, 0x40	; 64
    42d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	f8 01       	movw	r30, r16
    42da:	80 83       	st	Z, r24
    42dc:	91 83       	std	Z+1, r25	; 0x01
    42de:	a2 83       	std	Z+2, r26	; 0x02
    42e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42e2:	fe 01       	movw	r30, r28
    42e4:	e7 5a       	subi	r30, 0xA7	; 167
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	60 81       	ld	r22, Z
    42ea:	71 81       	ldd	r23, Z+1	; 0x01
    42ec:	82 81       	ldd	r24, Z+2	; 0x02
    42ee:	93 81       	ldd	r25, Z+3	; 0x03
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	40 e8       	ldi	r20, 0x80	; 128
    42f6:	5f e3       	ldi	r21, 0x3F	; 63
    42f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42fc:	88 23       	and	r24, r24
    42fe:	34 f4       	brge	.+12     	; 0x430c <lcd_init+0x1d8c>
		__ticks = 1;
    4300:	fe 01       	movw	r30, r28
    4302:	e8 5a       	subi	r30, 0xA8	; 168
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	80 83       	st	Z, r24
    430a:	e0 c0       	rjmp	.+448    	; 0x44cc <lcd_init+0x1f4c>
	else if (__tmp > 255)
    430c:	fe 01       	movw	r30, r28
    430e:	e7 5a       	subi	r30, 0xA7	; 167
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	60 81       	ld	r22, Z
    4314:	71 81       	ldd	r23, Z+1	; 0x01
    4316:	82 81       	ldd	r24, Z+2	; 0x02
    4318:	93 81       	ldd	r25, Z+3	; 0x03
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	4f e7       	ldi	r20, 0x7F	; 127
    4320:	53 e4       	ldi	r21, 0x43	; 67
    4322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4326:	18 16       	cp	r1, r24
    4328:	0c f0       	brlt	.+2      	; 0x432c <lcd_init+0x1dac>
    432a:	c0 c0       	rjmp	.+384    	; 0x44ac <lcd_init+0x1f2c>
	{
		_delay_ms(__us / 1000.0);
    432c:	fe 01       	movw	r30, r28
    432e:	e3 5a       	subi	r30, 0xA3	; 163
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	60 81       	ld	r22, Z
    4334:	71 81       	ldd	r23, Z+1	; 0x01
    4336:	82 81       	ldd	r24, Z+2	; 0x02
    4338:	93 81       	ldd	r25, Z+3	; 0x03
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	4a e7       	ldi	r20, 0x7A	; 122
    4340:	54 e4       	ldi	r21, 0x44	; 68
    4342:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	fe 01       	movw	r30, r28
    434c:	ec 5a       	subi	r30, 0xAC	; 172
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	80 83       	st	Z, r24
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	a2 83       	std	Z+2, r26	; 0x02
    4356:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4358:	8e 01       	movw	r16, r28
    435a:	00 5b       	subi	r16, 0xB0	; 176
    435c:	1f 4f       	sbci	r17, 0xFF	; 255
    435e:	fe 01       	movw	r30, r28
    4360:	ec 5a       	subi	r30, 0xAC	; 172
    4362:	ff 4f       	sbci	r31, 0xFF	; 255
    4364:	60 81       	ld	r22, Z
    4366:	71 81       	ldd	r23, Z+1	; 0x01
    4368:	82 81       	ldd	r24, Z+2	; 0x02
    436a:	93 81       	ldd	r25, Z+3	; 0x03
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	4a e7       	ldi	r20, 0x7A	; 122
    4372:	55 e4       	ldi	r21, 0x45	; 69
    4374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	f8 01       	movw	r30, r16
    437e:	80 83       	st	Z, r24
    4380:	91 83       	std	Z+1, r25	; 0x01
    4382:	a2 83       	std	Z+2, r26	; 0x02
    4384:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4386:	fe 01       	movw	r30, r28
    4388:	e0 5b       	subi	r30, 0xB0	; 176
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	60 81       	ld	r22, Z
    438e:	71 81       	ldd	r23, Z+1	; 0x01
    4390:	82 81       	ldd	r24, Z+2	; 0x02
    4392:	93 81       	ldd	r25, Z+3	; 0x03
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	40 e8       	ldi	r20, 0x80	; 128
    439a:	5f e3       	ldi	r21, 0x3F	; 63
    439c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43a0:	88 23       	and	r24, r24
    43a2:	44 f4       	brge	.+16     	; 0x43b4 <lcd_init+0x1e34>
		__ticks = 1;
    43a4:	fe 01       	movw	r30, r28
    43a6:	e2 5b       	subi	r30, 0xB2	; 178
    43a8:	ff 4f       	sbci	r31, 0xFF	; 255
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	91 83       	std	Z+1, r25	; 0x01
    43b0:	80 83       	st	Z, r24
    43b2:	64 c0       	rjmp	.+200    	; 0x447c <lcd_init+0x1efc>
	else if (__tmp > 65535)
    43b4:	fe 01       	movw	r30, r28
    43b6:	e0 5b       	subi	r30, 0xB0	; 176
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	60 81       	ld	r22, Z
    43bc:	71 81       	ldd	r23, Z+1	; 0x01
    43be:	82 81       	ldd	r24, Z+2	; 0x02
    43c0:	93 81       	ldd	r25, Z+3	; 0x03
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	3f ef       	ldi	r19, 0xFF	; 255
    43c6:	4f e7       	ldi	r20, 0x7F	; 127
    43c8:	57 e4       	ldi	r21, 0x47	; 71
    43ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43ce:	18 16       	cp	r1, r24
    43d0:	0c f0       	brlt	.+2      	; 0x43d4 <lcd_init+0x1e54>
    43d2:	43 c0       	rjmp	.+134    	; 0x445a <lcd_init+0x1eda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d4:	fe 01       	movw	r30, r28
    43d6:	ec 5a       	subi	r30, 0xAC	; 172
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	60 81       	ld	r22, Z
    43dc:	71 81       	ldd	r23, Z+1	; 0x01
    43de:	82 81       	ldd	r24, Z+2	; 0x02
    43e0:	93 81       	ldd	r25, Z+3	; 0x03
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	40 e2       	ldi	r20, 0x20	; 32
    43e8:	51 e4       	ldi	r21, 0x41	; 65
    43ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	8e 01       	movw	r16, r28
    43f4:	02 5b       	subi	r16, 0xB2	; 178
    43f6:	1f 4f       	sbci	r17, 0xFF	; 255
    43f8:	bc 01       	movw	r22, r24
    43fa:	cd 01       	movw	r24, r26
    43fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	f8 01       	movw	r30, r16
    4406:	91 83       	std	Z+1, r25	; 0x01
    4408:	80 83       	st	Z, r24
    440a:	1f c0       	rjmp	.+62     	; 0x444a <lcd_init+0x1eca>
    440c:	fe 01       	movw	r30, r28
    440e:	e4 5b       	subi	r30, 0xB4	; 180
    4410:	ff 4f       	sbci	r31, 0xFF	; 255
    4412:	80 e9       	ldi	r24, 0x90	; 144
    4414:	91 e0       	ldi	r25, 0x01	; 1
    4416:	91 83       	std	Z+1, r25	; 0x01
    4418:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    441a:	fe 01       	movw	r30, r28
    441c:	e4 5b       	subi	r30, 0xB4	; 180
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	80 81       	ld	r24, Z
    4422:	91 81       	ldd	r25, Z+1	; 0x01
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	f1 f7       	brne	.-4      	; 0x4424 <lcd_init+0x1ea4>
    4428:	fe 01       	movw	r30, r28
    442a:	e4 5b       	subi	r30, 0xB4	; 180
    442c:	ff 4f       	sbci	r31, 0xFF	; 255
    442e:	91 83       	std	Z+1, r25	; 0x01
    4430:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4432:	de 01       	movw	r26, r28
    4434:	a2 5b       	subi	r26, 0xB2	; 178
    4436:	bf 4f       	sbci	r27, 0xFF	; 255
    4438:	fe 01       	movw	r30, r28
    443a:	e2 5b       	subi	r30, 0xB2	; 178
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	80 81       	ld	r24, Z
    4440:	91 81       	ldd	r25, Z+1	; 0x01
    4442:	01 97       	sbiw	r24, 0x01	; 1
    4444:	11 96       	adiw	r26, 0x01	; 1
    4446:	9c 93       	st	X, r25
    4448:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    444a:	fe 01       	movw	r30, r28
    444c:	e2 5b       	subi	r30, 0xB2	; 178
    444e:	ff 4f       	sbci	r31, 0xFF	; 255
    4450:	80 81       	ld	r24, Z
    4452:	91 81       	ldd	r25, Z+1	; 0x01
    4454:	00 97       	sbiw	r24, 0x00	; 0
    4456:	d1 f6       	brne	.-76     	; 0x440c <lcd_init+0x1e8c>
    4458:	4b c0       	rjmp	.+150    	; 0x44f0 <lcd_init+0x1f70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445a:	8e 01       	movw	r16, r28
    445c:	02 5b       	subi	r16, 0xB2	; 178
    445e:	1f 4f       	sbci	r17, 0xFF	; 255
    4460:	fe 01       	movw	r30, r28
    4462:	e0 5b       	subi	r30, 0xB0	; 176
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	60 81       	ld	r22, Z
    4468:	71 81       	ldd	r23, Z+1	; 0x01
    446a:	82 81       	ldd	r24, Z+2	; 0x02
    446c:	93 81       	ldd	r25, Z+3	; 0x03
    446e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	f8 01       	movw	r30, r16
    4478:	91 83       	std	Z+1, r25	; 0x01
    447a:	80 83       	st	Z, r24
    447c:	de 01       	movw	r26, r28
    447e:	a6 5b       	subi	r26, 0xB6	; 182
    4480:	bf 4f       	sbci	r27, 0xFF	; 255
    4482:	fe 01       	movw	r30, r28
    4484:	e2 5b       	subi	r30, 0xB2	; 178
    4486:	ff 4f       	sbci	r31, 0xFF	; 255
    4488:	80 81       	ld	r24, Z
    448a:	91 81       	ldd	r25, Z+1	; 0x01
    448c:	11 96       	adiw	r26, 0x01	; 1
    448e:	9c 93       	st	X, r25
    4490:	8e 93       	st	-X, r24
    4492:	fe 01       	movw	r30, r28
    4494:	e6 5b       	subi	r30, 0xB6	; 182
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	80 81       	ld	r24, Z
    449a:	91 81       	ldd	r25, Z+1	; 0x01
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	f1 f7       	brne	.-4      	; 0x449c <lcd_init+0x1f1c>
    44a0:	fe 01       	movw	r30, r28
    44a2:	e6 5b       	subi	r30, 0xB6	; 182
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	91 83       	std	Z+1, r25	; 0x01
    44a8:	80 83       	st	Z, r24
    44aa:	22 c0       	rjmp	.+68     	; 0x44f0 <lcd_init+0x1f70>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44ac:	8e 01       	movw	r16, r28
    44ae:	08 5a       	subi	r16, 0xA8	; 168
    44b0:	1f 4f       	sbci	r17, 0xFF	; 255
    44b2:	fe 01       	movw	r30, r28
    44b4:	e7 5a       	subi	r30, 0xA7	; 167
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	60 81       	ld	r22, Z
    44ba:	71 81       	ldd	r23, Z+1	; 0x01
    44bc:	82 81       	ldd	r24, Z+2	; 0x02
    44be:	93 81       	ldd	r25, Z+3	; 0x03
    44c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c4:	dc 01       	movw	r26, r24
    44c6:	cb 01       	movw	r24, r22
    44c8:	f8 01       	movw	r30, r16
    44ca:	80 83       	st	Z, r24
    44cc:	de 01       	movw	r26, r28
    44ce:	a7 5b       	subi	r26, 0xB7	; 183
    44d0:	bf 4f       	sbci	r27, 0xFF	; 255
    44d2:	fe 01       	movw	r30, r28
    44d4:	e8 5a       	subi	r30, 0xA8	; 168
    44d6:	ff 4f       	sbci	r31, 0xFF	; 255
    44d8:	80 81       	ld	r24, Z
    44da:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44dc:	fe 01       	movw	r30, r28
    44de:	e7 5b       	subi	r30, 0xB7	; 183
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 81       	ld	r24, Z
    44e4:	8a 95       	dec	r24
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <lcd_init+0x1f64>
    44e8:	fe 01       	movw	r30, r28
    44ea:	e7 5b       	subi	r30, 0xB7	; 183
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	62 e0       	ldi	r22, 0x02	; 2
    44f4:	41 e0       	ldi	r20, 0x01	; 1
    44f6:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    44fa:	fe 01       	movw	r30, r28
    44fc:	eb 5b       	subi	r30, 0xBB	; 187
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	a0 ea       	ldi	r26, 0xA0	; 160
    4506:	b0 e4       	ldi	r27, 0x40	; 64
    4508:	80 83       	st	Z, r24
    450a:	91 83       	std	Z+1, r25	; 0x01
    450c:	a2 83       	std	Z+2, r26	; 0x02
    450e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4510:	8e 01       	movw	r16, r28
    4512:	0f 5b       	subi	r16, 0xBF	; 191
    4514:	1f 4f       	sbci	r17, 0xFF	; 255
    4516:	fe 01       	movw	r30, r28
    4518:	eb 5b       	subi	r30, 0xBB	; 187
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	60 81       	ld	r22, Z
    451e:	71 81       	ldd	r23, Z+1	; 0x01
    4520:	82 81       	ldd	r24, Z+2	; 0x02
    4522:	93 81       	ldd	r25, Z+3	; 0x03
    4524:	2b ea       	ldi	r18, 0xAB	; 171
    4526:	3a ea       	ldi	r19, 0xAA	; 170
    4528:	4a ea       	ldi	r20, 0xAA	; 170
    452a:	50 e4       	ldi	r21, 0x40	; 64
    452c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	f8 01       	movw	r30, r16
    4536:	80 83       	st	Z, r24
    4538:	91 83       	std	Z+1, r25	; 0x01
    453a:	a2 83       	std	Z+2, r26	; 0x02
    453c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    453e:	fe 01       	movw	r30, r28
    4540:	ef 5b       	subi	r30, 0xBF	; 191
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	60 81       	ld	r22, Z
    4546:	71 81       	ldd	r23, Z+1	; 0x01
    4548:	82 81       	ldd	r24, Z+2	; 0x02
    454a:	93 81       	ldd	r25, Z+3	; 0x03
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e8       	ldi	r20, 0x80	; 128
    4552:	5f e3       	ldi	r21, 0x3F	; 63
    4554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4558:	88 23       	and	r24, r24
    455a:	34 f4       	brge	.+12     	; 0x4568 <lcd_init+0x1fe8>
		__ticks = 1;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	fe 01       	movw	r30, r28
    4560:	e0 5c       	subi	r30, 0xC0	; 192
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	80 83       	st	Z, r24
    4566:	9d c0       	rjmp	.+314    	; 0x46a2 <lcd_init+0x2122>
	else if (__tmp > 255)
    4568:	fe 01       	movw	r30, r28
    456a:	ef 5b       	subi	r30, 0xBF	; 191
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	60 81       	ld	r22, Z
    4570:	71 81       	ldd	r23, Z+1	; 0x01
    4572:	82 81       	ldd	r24, Z+2	; 0x02
    4574:	93 81       	ldd	r25, Z+3	; 0x03
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	4f e7       	ldi	r20, 0x7F	; 127
    457c:	53 e4       	ldi	r21, 0x43	; 67
    457e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4582:	18 16       	cp	r1, r24
    4584:	0c f0       	brlt	.+2      	; 0x4588 <lcd_init+0x2008>
    4586:	7e c0       	rjmp	.+252    	; 0x4684 <lcd_init+0x2104>
	{
		_delay_ms(__us / 1000.0);
    4588:	fe 01       	movw	r30, r28
    458a:	eb 5b       	subi	r30, 0xBB	; 187
    458c:	ff 4f       	sbci	r31, 0xFF	; 255
    458e:	60 81       	ld	r22, Z
    4590:	71 81       	ldd	r23, Z+1	; 0x01
    4592:	82 81       	ldd	r24, Z+2	; 0x02
    4594:	93 81       	ldd	r25, Z+3	; 0x03
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	4a e7       	ldi	r20, 0x7A	; 122
    459c:	54 e4       	ldi	r21, 0x44	; 68
    459e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	8c af       	std	Y+60, r24	; 0x3c
    45a8:	9d af       	std	Y+61, r25	; 0x3d
    45aa:	ae af       	std	Y+62, r26	; 0x3e
    45ac:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    45b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    45b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    45b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	4a e7       	ldi	r20, 0x7A	; 122
    45bc:	55 e4       	ldi	r21, 0x45	; 69
    45be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	88 af       	std	Y+56, r24	; 0x38
    45c8:	99 af       	std	Y+57, r25	; 0x39
    45ca:	aa af       	std	Y+58, r26	; 0x3a
    45cc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    45ce:	68 ad       	ldd	r22, Y+56	; 0x38
    45d0:	79 ad       	ldd	r23, Y+57	; 0x39
    45d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    45d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	40 e8       	ldi	r20, 0x80	; 128
    45dc:	5f e3       	ldi	r21, 0x3F	; 63
    45de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e2:	88 23       	and	r24, r24
    45e4:	2c f4       	brge	.+10     	; 0x45f0 <lcd_init+0x2070>
		__ticks = 1;
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	9f ab       	std	Y+55, r25	; 0x37
    45ec:	8e ab       	std	Y+54, r24	; 0x36
    45ee:	3f c0       	rjmp	.+126    	; 0x466e <lcd_init+0x20ee>
	else if (__tmp > 65535)
    45f0:	68 ad       	ldd	r22, Y+56	; 0x38
    45f2:	79 ad       	ldd	r23, Y+57	; 0x39
    45f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    45f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	3f ef       	ldi	r19, 0xFF	; 255
    45fc:	4f e7       	ldi	r20, 0x7F	; 127
    45fe:	57 e4       	ldi	r21, 0x47	; 71
    4600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4604:	18 16       	cp	r1, r24
    4606:	4c f5       	brge	.+82     	; 0x465a <lcd_init+0x20da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4608:	6c ad       	ldd	r22, Y+60	; 0x3c
    460a:	7d ad       	ldd	r23, Y+61	; 0x3d
    460c:	8e ad       	ldd	r24, Y+62	; 0x3e
    460e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	40 e2       	ldi	r20, 0x20	; 32
    4616:	51 e4       	ldi	r21, 0x41	; 65
    4618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	bc 01       	movw	r22, r24
    4622:	cd 01       	movw	r24, r26
    4624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	9f ab       	std	Y+55, r25	; 0x37
    462e:	8e ab       	std	Y+54, r24	; 0x36
    4630:	0f c0       	rjmp	.+30     	; 0x4650 <lcd_init+0x20d0>
    4632:	80 e9       	ldi	r24, 0x90	; 144
    4634:	91 e0       	ldi	r25, 0x01	; 1
    4636:	9d ab       	std	Y+53, r25	; 0x35
    4638:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    463a:	8c a9       	ldd	r24, Y+52	; 0x34
    463c:	9d a9       	ldd	r25, Y+53	; 0x35
    463e:	01 97       	sbiw	r24, 0x01	; 1
    4640:	f1 f7       	brne	.-4      	; 0x463e <lcd_init+0x20be>
    4642:	9d ab       	std	Y+53, r25	; 0x35
    4644:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4646:	8e a9       	ldd	r24, Y+54	; 0x36
    4648:	9f a9       	ldd	r25, Y+55	; 0x37
    464a:	01 97       	sbiw	r24, 0x01	; 1
    464c:	9f ab       	std	Y+55, r25	; 0x37
    464e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4650:	8e a9       	ldd	r24, Y+54	; 0x36
    4652:	9f a9       	ldd	r25, Y+55	; 0x37
    4654:	00 97       	sbiw	r24, 0x00	; 0
    4656:	69 f7       	brne	.-38     	; 0x4632 <lcd_init+0x20b2>
    4658:	2d c0       	rjmp	.+90     	; 0x46b4 <lcd_init+0x2134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465a:	68 ad       	ldd	r22, Y+56	; 0x38
    465c:	79 ad       	ldd	r23, Y+57	; 0x39
    465e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4660:	9b ad       	ldd	r25, Y+59	; 0x3b
    4662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4666:	dc 01       	movw	r26, r24
    4668:	cb 01       	movw	r24, r22
    466a:	9f ab       	std	Y+55, r25	; 0x37
    466c:	8e ab       	std	Y+54, r24	; 0x36
    466e:	8e a9       	ldd	r24, Y+54	; 0x36
    4670:	9f a9       	ldd	r25, Y+55	; 0x37
    4672:	9b ab       	std	Y+51, r25	; 0x33
    4674:	8a ab       	std	Y+50, r24	; 0x32
    4676:	8a a9       	ldd	r24, Y+50	; 0x32
    4678:	9b a9       	ldd	r25, Y+51	; 0x33
    467a:	01 97       	sbiw	r24, 0x01	; 1
    467c:	f1 f7       	brne	.-4      	; 0x467a <lcd_init+0x20fa>
    467e:	9b ab       	std	Y+51, r25	; 0x33
    4680:	8a ab       	std	Y+50, r24	; 0x32
    4682:	18 c0       	rjmp	.+48     	; 0x46b4 <lcd_init+0x2134>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4684:	fe 01       	movw	r30, r28
    4686:	ef 5b       	subi	r30, 0xBF	; 191
    4688:	ff 4f       	sbci	r31, 0xFF	; 255
    468a:	60 81       	ld	r22, Z
    468c:	71 81       	ldd	r23, Z+1	; 0x01
    468e:	82 81       	ldd	r24, Z+2	; 0x02
    4690:	93 81       	ldd	r25, Z+3	; 0x03
    4692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	fe 01       	movw	r30, r28
    469c:	e0 5c       	subi	r30, 0xC0	; 192
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	80 83       	st	Z, r24
    46a2:	fe 01       	movw	r30, r28
    46a4:	e0 5c       	subi	r30, 0xC0	; 192
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	80 81       	ld	r24, Z
    46aa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46ac:	89 a9       	ldd	r24, Y+49	; 0x31
    46ae:	8a 95       	dec	r24
    46b0:	f1 f7       	brne	.-4      	; 0x46ae <lcd_init+0x212e>
    46b2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 2 << LCD_DATA_BUS_PORT_OFFSET);
    46b4:	80 e0       	ldi	r24, 0x00	; 0
    46b6:	68 e7       	ldi	r22, 0x78	; 120
    46b8:	40 e1       	ldi	r20, 0x10	; 16
    46ba:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	a0 ea       	ldi	r26, 0xA0	; 160
    46c4:	b0 e4       	ldi	r27, 0x40	; 64
    46c6:	8d a7       	std	Y+45, r24	; 0x2d
    46c8:	9e a7       	std	Y+46, r25	; 0x2e
    46ca:	af a7       	std	Y+47, r26	; 0x2f
    46cc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    46ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    46d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    46d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    46d4:	98 a9       	ldd	r25, Y+48	; 0x30
    46d6:	2b ea       	ldi	r18, 0xAB	; 171
    46d8:	3a ea       	ldi	r19, 0xAA	; 170
    46da:	4a ea       	ldi	r20, 0xAA	; 170
    46dc:	50 e4       	ldi	r21, 0x40	; 64
    46de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	89 a7       	std	Y+41, r24	; 0x29
    46e8:	9a a7       	std	Y+42, r25	; 0x2a
    46ea:	ab a7       	std	Y+43, r26	; 0x2b
    46ec:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    46ee:	69 a5       	ldd	r22, Y+41	; 0x29
    46f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    46f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    46f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    46f6:	20 e0       	ldi	r18, 0x00	; 0
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	40 e8       	ldi	r20, 0x80	; 128
    46fc:	5f e3       	ldi	r21, 0x3F	; 63
    46fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4702:	88 23       	and	r24, r24
    4704:	1c f4       	brge	.+6      	; 0x470c <lcd_init+0x218c>
		__ticks = 1;
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	88 a7       	std	Y+40, r24	; 0x28
    470a:	91 c0       	rjmp	.+290    	; 0x482e <lcd_init+0x22ae>
	else if (__tmp > 255)
    470c:	69 a5       	ldd	r22, Y+41	; 0x29
    470e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4710:	8b a5       	ldd	r24, Y+43	; 0x2b
    4712:	9c a5       	ldd	r25, Y+44	; 0x2c
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	4f e7       	ldi	r20, 0x7F	; 127
    471a:	53 e4       	ldi	r21, 0x43	; 67
    471c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4720:	18 16       	cp	r1, r24
    4722:	0c f0       	brlt	.+2      	; 0x4726 <lcd_init+0x21a6>
    4724:	7b c0       	rjmp	.+246    	; 0x481c <lcd_init+0x229c>
	{
		_delay_ms(__us / 1000.0);
    4726:	6d a5       	ldd	r22, Y+45	; 0x2d
    4728:	7e a5       	ldd	r23, Y+46	; 0x2e
    472a:	8f a5       	ldd	r24, Y+47	; 0x2f
    472c:	98 a9       	ldd	r25, Y+48	; 0x30
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	4a e7       	ldi	r20, 0x7A	; 122
    4734:	54 e4       	ldi	r21, 0x44	; 68
    4736:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    473a:	dc 01       	movw	r26, r24
    473c:	cb 01       	movw	r24, r22
    473e:	8c a3       	std	Y+36, r24	; 0x24
    4740:	9d a3       	std	Y+37, r25	; 0x25
    4742:	ae a3       	std	Y+38, r26	; 0x26
    4744:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4746:	6c a1       	ldd	r22, Y+36	; 0x24
    4748:	7d a1       	ldd	r23, Y+37	; 0x25
    474a:	8e a1       	ldd	r24, Y+38	; 0x26
    474c:	9f a1       	ldd	r25, Y+39	; 0x27
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	4a e7       	ldi	r20, 0x7A	; 122
    4754:	55 e4       	ldi	r21, 0x45	; 69
    4756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	88 a3       	std	Y+32, r24	; 0x20
    4760:	99 a3       	std	Y+33, r25	; 0x21
    4762:	aa a3       	std	Y+34, r26	; 0x22
    4764:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4766:	68 a1       	ldd	r22, Y+32	; 0x20
    4768:	79 a1       	ldd	r23, Y+33	; 0x21
    476a:	8a a1       	ldd	r24, Y+34	; 0x22
    476c:	9b a1       	ldd	r25, Y+35	; 0x23
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	40 e8       	ldi	r20, 0x80	; 128
    4774:	5f e3       	ldi	r21, 0x3F	; 63
    4776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    477a:	88 23       	and	r24, r24
    477c:	2c f4       	brge	.+10     	; 0x4788 <lcd_init+0x2208>
		__ticks = 1;
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	9f 8f       	std	Y+31, r25	; 0x1f
    4784:	8e 8f       	std	Y+30, r24	; 0x1e
    4786:	3f c0       	rjmp	.+126    	; 0x4806 <lcd_init+0x2286>
	else if (__tmp > 65535)
    4788:	68 a1       	ldd	r22, Y+32	; 0x20
    478a:	79 a1       	ldd	r23, Y+33	; 0x21
    478c:	8a a1       	ldd	r24, Y+34	; 0x22
    478e:	9b a1       	ldd	r25, Y+35	; 0x23
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	3f ef       	ldi	r19, 0xFF	; 255
    4794:	4f e7       	ldi	r20, 0x7F	; 127
    4796:	57 e4       	ldi	r21, 0x47	; 71
    4798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    479c:	18 16       	cp	r1, r24
    479e:	4c f5       	brge	.+82     	; 0x47f2 <lcd_init+0x2272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47a0:	6c a1       	ldd	r22, Y+36	; 0x24
    47a2:	7d a1       	ldd	r23, Y+37	; 0x25
    47a4:	8e a1       	ldd	r24, Y+38	; 0x26
    47a6:	9f a1       	ldd	r25, Y+39	; 0x27
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	40 e2       	ldi	r20, 0x20	; 32
    47ae:	51 e4       	ldi	r21, 0x41	; 65
    47b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	bc 01       	movw	r22, r24
    47ba:	cd 01       	movw	r24, r26
    47bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c0:	dc 01       	movw	r26, r24
    47c2:	cb 01       	movw	r24, r22
    47c4:	9f 8f       	std	Y+31, r25	; 0x1f
    47c6:	8e 8f       	std	Y+30, r24	; 0x1e
    47c8:	0f c0       	rjmp	.+30     	; 0x47e8 <lcd_init+0x2268>
    47ca:	80 e9       	ldi	r24, 0x90	; 144
    47cc:	91 e0       	ldi	r25, 0x01	; 1
    47ce:	9d 8f       	std	Y+29, r25	; 0x1d
    47d0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    47d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	f1 f7       	brne	.-4      	; 0x47d6 <lcd_init+0x2256>
    47da:	9d 8f       	std	Y+29, r25	; 0x1d
    47dc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    47e2:	01 97       	sbiw	r24, 0x01	; 1
    47e4:	9f 8f       	std	Y+31, r25	; 0x1f
    47e6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    47ec:	00 97       	sbiw	r24, 0x00	; 0
    47ee:	69 f7       	brne	.-38     	; 0x47ca <lcd_init+0x224a>
    47f0:	24 c0       	rjmp	.+72     	; 0x483a <lcd_init+0x22ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f2:	68 a1       	ldd	r22, Y+32	; 0x20
    47f4:	79 a1       	ldd	r23, Y+33	; 0x21
    47f6:	8a a1       	ldd	r24, Y+34	; 0x22
    47f8:	9b a1       	ldd	r25, Y+35	; 0x23
    47fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fe:	dc 01       	movw	r26, r24
    4800:	cb 01       	movw	r24, r22
    4802:	9f 8f       	std	Y+31, r25	; 0x1f
    4804:	8e 8f       	std	Y+30, r24	; 0x1e
    4806:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4808:	9f 8d       	ldd	r25, Y+31	; 0x1f
    480a:	9b 8f       	std	Y+27, r25	; 0x1b
    480c:	8a 8f       	std	Y+26, r24	; 0x1a
    480e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4810:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4812:	01 97       	sbiw	r24, 0x01	; 1
    4814:	f1 f7       	brne	.-4      	; 0x4812 <lcd_init+0x2292>
    4816:	9b 8f       	std	Y+27, r25	; 0x1b
    4818:	8a 8f       	std	Y+26, r24	; 0x1a
    481a:	0f c0       	rjmp	.+30     	; 0x483a <lcd_init+0x22ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    481c:	69 a5       	ldd	r22, Y+41	; 0x29
    481e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4820:	8b a5       	ldd	r24, Y+43	; 0x2b
    4822:	9c a5       	ldd	r25, Y+44	; 0x2c
    4824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4828:	dc 01       	movw	r26, r24
    482a:	cb 01       	movw	r24, r22
    482c:	88 a7       	std	Y+40, r24	; 0x28
    482e:	88 a5       	ldd	r24, Y+40	; 0x28
    4830:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4832:	89 8d       	ldd	r24, Y+25	; 0x19
    4834:	8a 95       	dec	r24
    4836:	f1 f7       	brne	.-4      	; 0x4834 <lcd_init+0x22b4>
    4838:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	62 e0       	ldi	r22, 0x02	; 2
    483e:	40 e0       	ldi	r20, 0x00	; 0
    4840:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	a6 e1       	ldi	r26, 0x16	; 22
    484a:	b3 e4       	ldi	r27, 0x43	; 67
    484c:	8d 8b       	std	Y+21, r24	; 0x15
    484e:	9e 8b       	std	Y+22, r25	; 0x16
    4850:	af 8b       	std	Y+23, r26	; 0x17
    4852:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4854:	6d 89       	ldd	r22, Y+21	; 0x15
    4856:	7e 89       	ldd	r23, Y+22	; 0x16
    4858:	8f 89       	ldd	r24, Y+23	; 0x17
    485a:	98 8d       	ldd	r25, Y+24	; 0x18
    485c:	2b ea       	ldi	r18, 0xAB	; 171
    485e:	3a ea       	ldi	r19, 0xAA	; 170
    4860:	4a ea       	ldi	r20, 0xAA	; 170
    4862:	50 e4       	ldi	r21, 0x40	; 64
    4864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	89 8b       	std	Y+17, r24	; 0x11
    486e:	9a 8b       	std	Y+18, r25	; 0x12
    4870:	ab 8b       	std	Y+19, r26	; 0x13
    4872:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4874:	69 89       	ldd	r22, Y+17	; 0x11
    4876:	7a 89       	ldd	r23, Y+18	; 0x12
    4878:	8b 89       	ldd	r24, Y+19	; 0x13
    487a:	9c 89       	ldd	r25, Y+20	; 0x14
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	40 e8       	ldi	r20, 0x80	; 128
    4882:	5f e3       	ldi	r21, 0x3F	; 63
    4884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4888:	88 23       	and	r24, r24
    488a:	1c f4       	brge	.+6      	; 0x4892 <lcd_init+0x2312>
		__ticks = 1;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	88 8b       	std	Y+16, r24	; 0x10
    4890:	91 c0       	rjmp	.+290    	; 0x49b4 <lcd_init+0x2434>
	else if (__tmp > 255)
    4892:	69 89       	ldd	r22, Y+17	; 0x11
    4894:	7a 89       	ldd	r23, Y+18	; 0x12
    4896:	8b 89       	ldd	r24, Y+19	; 0x13
    4898:	9c 89       	ldd	r25, Y+20	; 0x14
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	4f e7       	ldi	r20, 0x7F	; 127
    48a0:	53 e4       	ldi	r21, 0x43	; 67
    48a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48a6:	18 16       	cp	r1, r24
    48a8:	0c f0       	brlt	.+2      	; 0x48ac <lcd_init+0x232c>
    48aa:	7b c0       	rjmp	.+246    	; 0x49a2 <lcd_init+0x2422>
	{
		_delay_ms(__us / 1000.0);
    48ac:	6d 89       	ldd	r22, Y+21	; 0x15
    48ae:	7e 89       	ldd	r23, Y+22	; 0x16
    48b0:	8f 89       	ldd	r24, Y+23	; 0x17
    48b2:	98 8d       	ldd	r25, Y+24	; 0x18
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	4a e7       	ldi	r20, 0x7A	; 122
    48ba:	54 e4       	ldi	r21, 0x44	; 68
    48bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	8c 87       	std	Y+12, r24	; 0x0c
    48c6:	9d 87       	std	Y+13, r25	; 0x0d
    48c8:	ae 87       	std	Y+14, r26	; 0x0e
    48ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    48ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    48d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    48d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	4a e7       	ldi	r20, 0x7A	; 122
    48da:	55 e4       	ldi	r21, 0x45	; 69
    48dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	88 87       	std	Y+8, r24	; 0x08
    48e6:	99 87       	std	Y+9, r25	; 0x09
    48e8:	aa 87       	std	Y+10, r26	; 0x0a
    48ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    48ec:	68 85       	ldd	r22, Y+8	; 0x08
    48ee:	79 85       	ldd	r23, Y+9	; 0x09
    48f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    48f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	40 e8       	ldi	r20, 0x80	; 128
    48fa:	5f e3       	ldi	r21, 0x3F	; 63
    48fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4900:	88 23       	and	r24, r24
    4902:	2c f4       	brge	.+10     	; 0x490e <lcd_init+0x238e>
		__ticks = 1;
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	9f 83       	std	Y+7, r25	; 0x07
    490a:	8e 83       	std	Y+6, r24	; 0x06
    490c:	3f c0       	rjmp	.+126    	; 0x498c <lcd_init+0x240c>
	else if (__tmp > 65535)
    490e:	68 85       	ldd	r22, Y+8	; 0x08
    4910:	79 85       	ldd	r23, Y+9	; 0x09
    4912:	8a 85       	ldd	r24, Y+10	; 0x0a
    4914:	9b 85       	ldd	r25, Y+11	; 0x0b
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	3f ef       	ldi	r19, 0xFF	; 255
    491a:	4f e7       	ldi	r20, 0x7F	; 127
    491c:	57 e4       	ldi	r21, 0x47	; 71
    491e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4922:	18 16       	cp	r1, r24
    4924:	4c f5       	brge	.+82     	; 0x4978 <lcd_init+0x23f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4926:	6c 85       	ldd	r22, Y+12	; 0x0c
    4928:	7d 85       	ldd	r23, Y+13	; 0x0d
    492a:	8e 85       	ldd	r24, Y+14	; 0x0e
    492c:	9f 85       	ldd	r25, Y+15	; 0x0f
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	40 e2       	ldi	r20, 0x20	; 32
    4934:	51 e4       	ldi	r21, 0x41	; 65
    4936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	bc 01       	movw	r22, r24
    4940:	cd 01       	movw	r24, r26
    4942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4946:	dc 01       	movw	r26, r24
    4948:	cb 01       	movw	r24, r22
    494a:	9f 83       	std	Y+7, r25	; 0x07
    494c:	8e 83       	std	Y+6, r24	; 0x06
    494e:	0f c0       	rjmp	.+30     	; 0x496e <lcd_init+0x23ee>
    4950:	80 e9       	ldi	r24, 0x90	; 144
    4952:	91 e0       	ldi	r25, 0x01	; 1
    4954:	9d 83       	std	Y+5, r25	; 0x05
    4956:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4958:	8c 81       	ldd	r24, Y+4	; 0x04
    495a:	9d 81       	ldd	r25, Y+5	; 0x05
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	f1 f7       	brne	.-4      	; 0x495c <lcd_init+0x23dc>
    4960:	9d 83       	std	Y+5, r25	; 0x05
    4962:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4964:	8e 81       	ldd	r24, Y+6	; 0x06
    4966:	9f 81       	ldd	r25, Y+7	; 0x07
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	9f 83       	std	Y+7, r25	; 0x07
    496c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    496e:	8e 81       	ldd	r24, Y+6	; 0x06
    4970:	9f 81       	ldd	r25, Y+7	; 0x07
    4972:	00 97       	sbiw	r24, 0x00	; 0
    4974:	69 f7       	brne	.-38     	; 0x4950 <lcd_init+0x23d0>
    4976:	24 c0       	rjmp	.+72     	; 0x49c0 <lcd_init+0x2440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4978:	68 85       	ldd	r22, Y+8	; 0x08
    497a:	79 85       	ldd	r23, Y+9	; 0x09
    497c:	8a 85       	ldd	r24, Y+10	; 0x0a
    497e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	9f 83       	std	Y+7, r25	; 0x07
    498a:	8e 83       	std	Y+6, r24	; 0x06
    498c:	8e 81       	ldd	r24, Y+6	; 0x06
    498e:	9f 81       	ldd	r25, Y+7	; 0x07
    4990:	9b 83       	std	Y+3, r25	; 0x03
    4992:	8a 83       	std	Y+2, r24	; 0x02
    4994:	8a 81       	ldd	r24, Y+2	; 0x02
    4996:	9b 81       	ldd	r25, Y+3	; 0x03
    4998:	01 97       	sbiw	r24, 0x01	; 1
    499a:	f1 f7       	brne	.-4      	; 0x4998 <lcd_init+0x2418>
    499c:	9b 83       	std	Y+3, r25	; 0x03
    499e:	8a 83       	std	Y+2, r24	; 0x02
    49a0:	0f c0       	rjmp	.+30     	; 0x49c0 <lcd_init+0x2440>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    49a2:	69 89       	ldd	r22, Y+17	; 0x11
    49a4:	7a 89       	ldd	r23, Y+18	; 0x12
    49a6:	8b 89       	ldd	r24, Y+19	; 0x13
    49a8:	9c 89       	ldd	r25, Y+20	; 0x14
    49aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	88 8b       	std	Y+16, r24	; 0x10
    49b4:	88 89       	ldd	r24, Y+16	; 0x10
    49b6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    49b8:	89 81       	ldd	r24, Y+1	; 0x01
    49ba:	8a 95       	dec	r24
    49bc:	f1 f7       	brne	.-4      	; 0x49ba <lcd_init+0x243a>
    49be:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
	lcd_sendCommand(LCD_COMMAND_2_LINE_4_BIT);
    49c0:	88 e2       	ldi	r24, 0x28	; 40
    49c2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_DISPLAY_OFF);
    49c6:	88 e0       	ldi	r24, 0x08	; 8
    49c8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_CLEAR_DISPLAY);
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_ENTRY_MODE_CURSOR_INCREAMENT_NO_SHIFT);
    49d2:	86 e0       	ldi	r24, 0x06	; 6
    49d4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_RETURN_HOME);
    49d8:	82 e0       	ldi	r24, 0x02	; 2
    49da:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
	lcd_sendCommand(cursor_or_not_command);
    49de:	fe 01       	movw	r30, r28
    49e0:	eb 57       	subi	r30, 0x7B	; 123
    49e2:	fe 4f       	sbci	r31, 0xFE	; 254
    49e4:	80 81       	ld	r24, Z
    49e6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>

}
    49ea:	cb 57       	subi	r28, 0x7B	; 123
    49ec:	de 4f       	sbci	r29, 0xFE	; 254
    49ee:	0f b6       	in	r0, 0x3f	; 63
    49f0:	f8 94       	cli
    49f2:	de bf       	out	0x3e, r29	; 62
    49f4:	0f be       	out	0x3f, r0	; 63
    49f6:	cd bf       	out	0x3d, r28	; 61
    49f8:	cf 91       	pop	r28
    49fa:	df 91       	pop	r29
    49fc:	1f 91       	pop	r17
    49fe:	0f 91       	pop	r16
    4a00:	08 95       	ret

00004a02 <lcd_displayCharacter>:
	_delay_us(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
	_delay_us(50);
}
#elif LCD_DATA_BUS_SIZE == 4
void lcd_displayCharacter(uint8 character){
    4a02:	0f 93       	push	r16
    4a04:	1f 93       	push	r17
    4a06:	df 93       	push	r29
    4a08:	cf 93       	push	r28
    4a0a:	cd b7       	in	r28, 0x3d	; 61
    4a0c:	de b7       	in	r29, 0x3e	; 62
    4a0e:	c9 5a       	subi	r28, 0xA9	; 169
    4a10:	d0 40       	sbci	r29, 0x00	; 0
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	f8 94       	cli
    4a16:	de bf       	out	0x3e, r29	; 62
    4a18:	0f be       	out	0x3f, r0	; 63
    4a1a:	cd bf       	out	0x3d, r28	; 61
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e7 55       	subi	r30, 0x57	; 87
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	61 e0       	ldi	r22, 0x01	; 1
    4a28:	41 e0       	ldi	r20, 0x01	; 1
    4a2a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    4a2e:	fe 01       	movw	r30, r28
    4a30:	eb 55       	subi	r30, 0x5B	; 91
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	a0 ea       	ldi	r26, 0xA0	; 160
    4a3a:	b0 e4       	ldi	r27, 0x40	; 64
    4a3c:	80 83       	st	Z, r24
    4a3e:	91 83       	std	Z+1, r25	; 0x01
    4a40:	a2 83       	std	Z+2, r26	; 0x02
    4a42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a44:	8e 01       	movw	r16, r28
    4a46:	0f 55       	subi	r16, 0x5F	; 95
    4a48:	1f 4f       	sbci	r17, 0xFF	; 255
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	eb 55       	subi	r30, 0x5B	; 91
    4a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a50:	60 81       	ld	r22, Z
    4a52:	71 81       	ldd	r23, Z+1	; 0x01
    4a54:	82 81       	ldd	r24, Z+2	; 0x02
    4a56:	93 81       	ldd	r25, Z+3	; 0x03
    4a58:	2b ea       	ldi	r18, 0xAB	; 171
    4a5a:	3a ea       	ldi	r19, 0xAA	; 170
    4a5c:	4a ea       	ldi	r20, 0xAA	; 170
    4a5e:	50 e4       	ldi	r21, 0x40	; 64
    4a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	f8 01       	movw	r30, r16
    4a6a:	80 83       	st	Z, r24
    4a6c:	91 83       	std	Z+1, r25	; 0x01
    4a6e:	a2 83       	std	Z+2, r26	; 0x02
    4a70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a72:	fe 01       	movw	r30, r28
    4a74:	ef 55       	subi	r30, 0x5F	; 95
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	60 81       	ld	r22, Z
    4a7a:	71 81       	ldd	r23, Z+1	; 0x01
    4a7c:	82 81       	ldd	r24, Z+2	; 0x02
    4a7e:	93 81       	ldd	r25, Z+3	; 0x03
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	40 e8       	ldi	r20, 0x80	; 128
    4a86:	5f e3       	ldi	r21, 0x3F	; 63
    4a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a8c:	88 23       	and	r24, r24
    4a8e:	34 f4       	brge	.+12     	; 0x4a9c <lcd_displayCharacter+0x9a>
		__ticks = 1;
    4a90:	fe 01       	movw	r30, r28
    4a92:	e0 56       	subi	r30, 0x60	; 96
    4a94:	ff 4f       	sbci	r31, 0xFF	; 255
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	80 83       	st	Z, r24
    4a9a:	e0 c0       	rjmp	.+448    	; 0x4c5c <lcd_displayCharacter+0x25a>
	else if (__tmp > 255)
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	ef 55       	subi	r30, 0x5F	; 95
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	60 81       	ld	r22, Z
    4aa4:	71 81       	ldd	r23, Z+1	; 0x01
    4aa6:	82 81       	ldd	r24, Z+2	; 0x02
    4aa8:	93 81       	ldd	r25, Z+3	; 0x03
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	4f e7       	ldi	r20, 0x7F	; 127
    4ab0:	53 e4       	ldi	r21, 0x43	; 67
    4ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ab6:	18 16       	cp	r1, r24
    4ab8:	0c f0       	brlt	.+2      	; 0x4abc <lcd_displayCharacter+0xba>
    4aba:	c0 c0       	rjmp	.+384    	; 0x4c3c <lcd_displayCharacter+0x23a>
	{
		_delay_ms(__us / 1000.0);
    4abc:	fe 01       	movw	r30, r28
    4abe:	eb 55       	subi	r30, 0x5B	; 91
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	60 81       	ld	r22, Z
    4ac4:	71 81       	ldd	r23, Z+1	; 0x01
    4ac6:	82 81       	ldd	r24, Z+2	; 0x02
    4ac8:	93 81       	ldd	r25, Z+3	; 0x03
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	4a e7       	ldi	r20, 0x7A	; 122
    4ad0:	54 e4       	ldi	r21, 0x44	; 68
    4ad2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	fe 01       	movw	r30, r28
    4adc:	e4 56       	subi	r30, 0x64	; 100
    4ade:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae0:	80 83       	st	Z, r24
    4ae2:	91 83       	std	Z+1, r25	; 0x01
    4ae4:	a2 83       	std	Z+2, r26	; 0x02
    4ae6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae8:	8e 01       	movw	r16, r28
    4aea:	08 56       	subi	r16, 0x68	; 104
    4aec:	1f 4f       	sbci	r17, 0xFF	; 255
    4aee:	fe 01       	movw	r30, r28
    4af0:	e4 56       	subi	r30, 0x64	; 100
    4af2:	ff 4f       	sbci	r31, 0xFF	; 255
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	4a e7       	ldi	r20, 0x7A	; 122
    4b02:	55 e4       	ldi	r21, 0x45	; 69
    4b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	f8 01       	movw	r30, r16
    4b0e:	80 83       	st	Z, r24
    4b10:	91 83       	std	Z+1, r25	; 0x01
    4b12:	a2 83       	std	Z+2, r26	; 0x02
    4b14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b16:	fe 01       	movw	r30, r28
    4b18:	e8 56       	subi	r30, 0x68	; 104
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	60 81       	ld	r22, Z
    4b1e:	71 81       	ldd	r23, Z+1	; 0x01
    4b20:	82 81       	ldd	r24, Z+2	; 0x02
    4b22:	93 81       	ldd	r25, Z+3	; 0x03
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	40 e8       	ldi	r20, 0x80	; 128
    4b2a:	5f e3       	ldi	r21, 0x3F	; 63
    4b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b30:	88 23       	and	r24, r24
    4b32:	44 f4       	brge	.+16     	; 0x4b44 <lcd_displayCharacter+0x142>
		__ticks = 1;
    4b34:	fe 01       	movw	r30, r28
    4b36:	ea 56       	subi	r30, 0x6A	; 106
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	81 e0       	ldi	r24, 0x01	; 1
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	91 83       	std	Z+1, r25	; 0x01
    4b40:	80 83       	st	Z, r24
    4b42:	64 c0       	rjmp	.+200    	; 0x4c0c <lcd_displayCharacter+0x20a>
	else if (__tmp > 65535)
    4b44:	fe 01       	movw	r30, r28
    4b46:	e8 56       	subi	r30, 0x68	; 104
    4b48:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4a:	60 81       	ld	r22, Z
    4b4c:	71 81       	ldd	r23, Z+1	; 0x01
    4b4e:	82 81       	ldd	r24, Z+2	; 0x02
    4b50:	93 81       	ldd	r25, Z+3	; 0x03
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	3f ef       	ldi	r19, 0xFF	; 255
    4b56:	4f e7       	ldi	r20, 0x7F	; 127
    4b58:	57 e4       	ldi	r21, 0x47	; 71
    4b5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b5e:	18 16       	cp	r1, r24
    4b60:	0c f0       	brlt	.+2      	; 0x4b64 <lcd_displayCharacter+0x162>
    4b62:	43 c0       	rjmp	.+134    	; 0x4bea <lcd_displayCharacter+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b64:	fe 01       	movw	r30, r28
    4b66:	e4 56       	subi	r30, 0x64	; 100
    4b68:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6a:	60 81       	ld	r22, Z
    4b6c:	71 81       	ldd	r23, Z+1	; 0x01
    4b6e:	82 81       	ldd	r24, Z+2	; 0x02
    4b70:	93 81       	ldd	r25, Z+3	; 0x03
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	40 e2       	ldi	r20, 0x20	; 32
    4b78:	51 e4       	ldi	r21, 0x41	; 65
    4b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	8e 01       	movw	r16, r28
    4b84:	0a 56       	subi	r16, 0x6A	; 106
    4b86:	1f 4f       	sbci	r17, 0xFF	; 255
    4b88:	bc 01       	movw	r22, r24
    4b8a:	cd 01       	movw	r24, r26
    4b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	f8 01       	movw	r30, r16
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	80 83       	st	Z, r24
    4b9a:	1f c0       	rjmp	.+62     	; 0x4bda <lcd_displayCharacter+0x1d8>
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	ec 56       	subi	r30, 0x6C	; 108
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	80 e9       	ldi	r24, 0x90	; 144
    4ba4:	91 e0       	ldi	r25, 0x01	; 1
    4ba6:	91 83       	std	Z+1, r25	; 0x01
    4ba8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4baa:	fe 01       	movw	r30, r28
    4bac:	ec 56       	subi	r30, 0x6C	; 108
    4bae:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb0:	80 81       	ld	r24, Z
    4bb2:	91 81       	ldd	r25, Z+1	; 0x01
    4bb4:	01 97       	sbiw	r24, 0x01	; 1
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <lcd_displayCharacter+0x1b2>
    4bb8:	fe 01       	movw	r30, r28
    4bba:	ec 56       	subi	r30, 0x6C	; 108
    4bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbe:	91 83       	std	Z+1, r25	; 0x01
    4bc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc2:	de 01       	movw	r26, r28
    4bc4:	aa 56       	subi	r26, 0x6A	; 106
    4bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    4bc8:	fe 01       	movw	r30, r28
    4bca:	ea 56       	subi	r30, 0x6A	; 106
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	80 81       	ld	r24, Z
    4bd0:	91 81       	ldd	r25, Z+1	; 0x01
    4bd2:	01 97       	sbiw	r24, 0x01	; 1
    4bd4:	11 96       	adiw	r26, 0x01	; 1
    4bd6:	9c 93       	st	X, r25
    4bd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bda:	fe 01       	movw	r30, r28
    4bdc:	ea 56       	subi	r30, 0x6A	; 106
    4bde:	ff 4f       	sbci	r31, 0xFF	; 255
    4be0:	80 81       	ld	r24, Z
    4be2:	91 81       	ldd	r25, Z+1	; 0x01
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	d1 f6       	brne	.-76     	; 0x4b9c <lcd_displayCharacter+0x19a>
    4be8:	4b c0       	rjmp	.+150    	; 0x4c80 <lcd_displayCharacter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bea:	8e 01       	movw	r16, r28
    4bec:	0a 56       	subi	r16, 0x6A	; 106
    4bee:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	e8 56       	subi	r30, 0x68	; 104
    4bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf6:	60 81       	ld	r22, Z
    4bf8:	71 81       	ldd	r23, Z+1	; 0x01
    4bfa:	82 81       	ldd	r24, Z+2	; 0x02
    4bfc:	93 81       	ldd	r25, Z+3	; 0x03
    4bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	f8 01       	movw	r30, r16
    4c08:	91 83       	std	Z+1, r25	; 0x01
    4c0a:	80 83       	st	Z, r24
    4c0c:	de 01       	movw	r26, r28
    4c0e:	ae 56       	subi	r26, 0x6E	; 110
    4c10:	bf 4f       	sbci	r27, 0xFF	; 255
    4c12:	fe 01       	movw	r30, r28
    4c14:	ea 56       	subi	r30, 0x6A	; 106
    4c16:	ff 4f       	sbci	r31, 0xFF	; 255
    4c18:	80 81       	ld	r24, Z
    4c1a:	91 81       	ldd	r25, Z+1	; 0x01
    4c1c:	11 96       	adiw	r26, 0x01	; 1
    4c1e:	9c 93       	st	X, r25
    4c20:	8e 93       	st	-X, r24
    4c22:	fe 01       	movw	r30, r28
    4c24:	ee 56       	subi	r30, 0x6E	; 110
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	f1 f7       	brne	.-4      	; 0x4c2c <lcd_displayCharacter+0x22a>
    4c30:	fe 01       	movw	r30, r28
    4c32:	ee 56       	subi	r30, 0x6E	; 110
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	91 83       	std	Z+1, r25	; 0x01
    4c38:	80 83       	st	Z, r24
    4c3a:	22 c0       	rjmp	.+68     	; 0x4c80 <lcd_displayCharacter+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4c3c:	8e 01       	movw	r16, r28
    4c3e:	00 56       	subi	r16, 0x60	; 96
    4c40:	1f 4f       	sbci	r17, 0xFF	; 255
    4c42:	fe 01       	movw	r30, r28
    4c44:	ef 55       	subi	r30, 0x5F	; 95
    4c46:	ff 4f       	sbci	r31, 0xFF	; 255
    4c48:	60 81       	ld	r22, Z
    4c4a:	71 81       	ldd	r23, Z+1	; 0x01
    4c4c:	82 81       	ldd	r24, Z+2	; 0x02
    4c4e:	93 81       	ldd	r25, Z+3	; 0x03
    4c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c54:	dc 01       	movw	r26, r24
    4c56:	cb 01       	movw	r24, r22
    4c58:	f8 01       	movw	r30, r16
    4c5a:	80 83       	st	Z, r24
    4c5c:	de 01       	movw	r26, r28
    4c5e:	af 56       	subi	r26, 0x6F	; 111
    4c60:	bf 4f       	sbci	r27, 0xFF	; 255
    4c62:	fe 01       	movw	r30, r28
    4c64:	e0 56       	subi	r30, 0x60	; 96
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	80 81       	ld	r24, Z
    4c6a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4c6c:	fe 01       	movw	r30, r28
    4c6e:	ef 56       	subi	r30, 0x6F	; 111
    4c70:	ff 4f       	sbci	r31, 0xFF	; 255
    4c72:	80 81       	ld	r24, Z
    4c74:	8a 95       	dec	r24
    4c76:	f1 f7       	brne	.-4      	; 0x4c74 <lcd_displayCharacter+0x272>
    4c78:	fe 01       	movw	r30, r28
    4c7a:	ef 56       	subi	r30, 0x6F	; 111
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	62 e0       	ldi	r22, 0x02	; 2
    4c84:	41 e0       	ldi	r20, 0x01	; 1
    4c86:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	e3 57       	subi	r30, 0x73	; 115
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	a0 ea       	ldi	r26, 0xA0	; 160
    4c96:	b0 e4       	ldi	r27, 0x40	; 64
    4c98:	80 83       	st	Z, r24
    4c9a:	91 83       	std	Z+1, r25	; 0x01
    4c9c:	a2 83       	std	Z+2, r26	; 0x02
    4c9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ca0:	8e 01       	movw	r16, r28
    4ca2:	07 57       	subi	r16, 0x77	; 119
    4ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	e3 57       	subi	r30, 0x73	; 115
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	60 81       	ld	r22, Z
    4cae:	71 81       	ldd	r23, Z+1	; 0x01
    4cb0:	82 81       	ldd	r24, Z+2	; 0x02
    4cb2:	93 81       	ldd	r25, Z+3	; 0x03
    4cb4:	2b ea       	ldi	r18, 0xAB	; 171
    4cb6:	3a ea       	ldi	r19, 0xAA	; 170
    4cb8:	4a ea       	ldi	r20, 0xAA	; 170
    4cba:	50 e4       	ldi	r21, 0x40	; 64
    4cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc0:	dc 01       	movw	r26, r24
    4cc2:	cb 01       	movw	r24, r22
    4cc4:	f8 01       	movw	r30, r16
    4cc6:	80 83       	st	Z, r24
    4cc8:	91 83       	std	Z+1, r25	; 0x01
    4cca:	a2 83       	std	Z+2, r26	; 0x02
    4ccc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cce:	fe 01       	movw	r30, r28
    4cd0:	e7 57       	subi	r30, 0x77	; 119
    4cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd4:	60 81       	ld	r22, Z
    4cd6:	71 81       	ldd	r23, Z+1	; 0x01
    4cd8:	82 81       	ldd	r24, Z+2	; 0x02
    4cda:	93 81       	ldd	r25, Z+3	; 0x03
    4cdc:	20 e0       	ldi	r18, 0x00	; 0
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	40 e8       	ldi	r20, 0x80	; 128
    4ce2:	5f e3       	ldi	r21, 0x3F	; 63
    4ce4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ce8:	88 23       	and	r24, r24
    4cea:	34 f4       	brge	.+12     	; 0x4cf8 <lcd_displayCharacter+0x2f6>
		__ticks = 1;
    4cec:	fe 01       	movw	r30, r28
    4cee:	e8 57       	subi	r30, 0x78	; 120
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	80 83       	st	Z, r24
    4cf6:	e0 c0       	rjmp	.+448    	; 0x4eb8 <lcd_displayCharacter+0x4b6>
	else if (__tmp > 255)
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	e7 57       	subi	r30, 0x77	; 119
    4cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfe:	60 81       	ld	r22, Z
    4d00:	71 81       	ldd	r23, Z+1	; 0x01
    4d02:	82 81       	ldd	r24, Z+2	; 0x02
    4d04:	93 81       	ldd	r25, Z+3	; 0x03
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	30 e0       	ldi	r19, 0x00	; 0
    4d0a:	4f e7       	ldi	r20, 0x7F	; 127
    4d0c:	53 e4       	ldi	r21, 0x43	; 67
    4d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d12:	18 16       	cp	r1, r24
    4d14:	0c f0       	brlt	.+2      	; 0x4d18 <lcd_displayCharacter+0x316>
    4d16:	c0 c0       	rjmp	.+384    	; 0x4e98 <lcd_displayCharacter+0x496>
	{
		_delay_ms(__us / 1000.0);
    4d18:	fe 01       	movw	r30, r28
    4d1a:	e3 57       	subi	r30, 0x73	; 115
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	60 81       	ld	r22, Z
    4d20:	71 81       	ldd	r23, Z+1	; 0x01
    4d22:	82 81       	ldd	r24, Z+2	; 0x02
    4d24:	93 81       	ldd	r25, Z+3	; 0x03
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	4a e7       	ldi	r20, 0x7A	; 122
    4d2c:	54 e4       	ldi	r21, 0x44	; 68
    4d2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	fe 01       	movw	r30, r28
    4d38:	ec 57       	subi	r30, 0x7C	; 124
    4d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3c:	80 83       	st	Z, r24
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	a2 83       	std	Z+2, r26	; 0x02
    4d42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d44:	8e 01       	movw	r16, r28
    4d46:	00 58       	subi	r16, 0x80	; 128
    4d48:	1f 4f       	sbci	r17, 0xFF	; 255
    4d4a:	fe 01       	movw	r30, r28
    4d4c:	ec 57       	subi	r30, 0x7C	; 124
    4d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d50:	60 81       	ld	r22, Z
    4d52:	71 81       	ldd	r23, Z+1	; 0x01
    4d54:	82 81       	ldd	r24, Z+2	; 0x02
    4d56:	93 81       	ldd	r25, Z+3	; 0x03
    4d58:	20 e0       	ldi	r18, 0x00	; 0
    4d5a:	30 e0       	ldi	r19, 0x00	; 0
    4d5c:	4a e7       	ldi	r20, 0x7A	; 122
    4d5e:	55 e4       	ldi	r21, 0x45	; 69
    4d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	f8 01       	movw	r30, r16
    4d6a:	80 83       	st	Z, r24
    4d6c:	91 83       	std	Z+1, r25	; 0x01
    4d6e:	a2 83       	std	Z+2, r26	; 0x02
    4d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d72:	fe 01       	movw	r30, r28
    4d74:	e0 58       	subi	r30, 0x80	; 128
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	60 81       	ld	r22, Z
    4d7a:	71 81       	ldd	r23, Z+1	; 0x01
    4d7c:	82 81       	ldd	r24, Z+2	; 0x02
    4d7e:	93 81       	ldd	r25, Z+3	; 0x03
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	40 e8       	ldi	r20, 0x80	; 128
    4d86:	5f e3       	ldi	r21, 0x3F	; 63
    4d88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d8c:	88 23       	and	r24, r24
    4d8e:	44 f4       	brge	.+16     	; 0x4da0 <lcd_displayCharacter+0x39e>
		__ticks = 1;
    4d90:	fe 01       	movw	r30, r28
    4d92:	e2 58       	subi	r30, 0x82	; 130
    4d94:	ff 4f       	sbci	r31, 0xFF	; 255
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	91 83       	std	Z+1, r25	; 0x01
    4d9c:	80 83       	st	Z, r24
    4d9e:	64 c0       	rjmp	.+200    	; 0x4e68 <lcd_displayCharacter+0x466>
	else if (__tmp > 65535)
    4da0:	fe 01       	movw	r30, r28
    4da2:	e0 58       	subi	r30, 0x80	; 128
    4da4:	ff 4f       	sbci	r31, 0xFF	; 255
    4da6:	60 81       	ld	r22, Z
    4da8:	71 81       	ldd	r23, Z+1	; 0x01
    4daa:	82 81       	ldd	r24, Z+2	; 0x02
    4dac:	93 81       	ldd	r25, Z+3	; 0x03
    4dae:	20 e0       	ldi	r18, 0x00	; 0
    4db0:	3f ef       	ldi	r19, 0xFF	; 255
    4db2:	4f e7       	ldi	r20, 0x7F	; 127
    4db4:	57 e4       	ldi	r21, 0x47	; 71
    4db6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dba:	18 16       	cp	r1, r24
    4dbc:	0c f0       	brlt	.+2      	; 0x4dc0 <lcd_displayCharacter+0x3be>
    4dbe:	43 c0       	rjmp	.+134    	; 0x4e46 <lcd_displayCharacter+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	ec 57       	subi	r30, 0x7C	; 124
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	60 81       	ld	r22, Z
    4dc8:	71 81       	ldd	r23, Z+1	; 0x01
    4dca:	82 81       	ldd	r24, Z+2	; 0x02
    4dcc:	93 81       	ldd	r25, Z+3	; 0x03
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	40 e2       	ldi	r20, 0x20	; 32
    4dd4:	51 e4       	ldi	r21, 0x41	; 65
    4dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	8e 01       	movw	r16, r28
    4de0:	02 58       	subi	r16, 0x82	; 130
    4de2:	1f 4f       	sbci	r17, 0xFF	; 255
    4de4:	bc 01       	movw	r22, r24
    4de6:	cd 01       	movw	r24, r26
    4de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	f8 01       	movw	r30, r16
    4df2:	91 83       	std	Z+1, r25	; 0x01
    4df4:	80 83       	st	Z, r24
    4df6:	1f c0       	rjmp	.+62     	; 0x4e36 <lcd_displayCharacter+0x434>
    4df8:	fe 01       	movw	r30, r28
    4dfa:	e4 58       	subi	r30, 0x84	; 132
    4dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfe:	80 e9       	ldi	r24, 0x90	; 144
    4e00:	91 e0       	ldi	r25, 0x01	; 1
    4e02:	91 83       	std	Z+1, r25	; 0x01
    4e04:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e06:	fe 01       	movw	r30, r28
    4e08:	e4 58       	subi	r30, 0x84	; 132
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	80 81       	ld	r24, Z
    4e0e:	91 81       	ldd	r25, Z+1	; 0x01
    4e10:	01 97       	sbiw	r24, 0x01	; 1
    4e12:	f1 f7       	brne	.-4      	; 0x4e10 <lcd_displayCharacter+0x40e>
    4e14:	fe 01       	movw	r30, r28
    4e16:	e4 58       	subi	r30, 0x84	; 132
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e1e:	de 01       	movw	r26, r28
    4e20:	a2 58       	subi	r26, 0x82	; 130
    4e22:	bf 4f       	sbci	r27, 0xFF	; 255
    4e24:	fe 01       	movw	r30, r28
    4e26:	e2 58       	subi	r30, 0x82	; 130
    4e28:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2a:	80 81       	ld	r24, Z
    4e2c:	91 81       	ldd	r25, Z+1	; 0x01
    4e2e:	01 97       	sbiw	r24, 0x01	; 1
    4e30:	11 96       	adiw	r26, 0x01	; 1
    4e32:	9c 93       	st	X, r25
    4e34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e36:	fe 01       	movw	r30, r28
    4e38:	e2 58       	subi	r30, 0x82	; 130
    4e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3c:	80 81       	ld	r24, Z
    4e3e:	91 81       	ldd	r25, Z+1	; 0x01
    4e40:	00 97       	sbiw	r24, 0x00	; 0
    4e42:	d1 f6       	brne	.-76     	; 0x4df8 <lcd_displayCharacter+0x3f6>
    4e44:	4b c0       	rjmp	.+150    	; 0x4edc <lcd_displayCharacter+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e46:	8e 01       	movw	r16, r28
    4e48:	02 58       	subi	r16, 0x82	; 130
    4e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	e0 58       	subi	r30, 0x80	; 128
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	60 81       	ld	r22, Z
    4e54:	71 81       	ldd	r23, Z+1	; 0x01
    4e56:	82 81       	ldd	r24, Z+2	; 0x02
    4e58:	93 81       	ldd	r25, Z+3	; 0x03
    4e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	f8 01       	movw	r30, r16
    4e64:	91 83       	std	Z+1, r25	; 0x01
    4e66:	80 83       	st	Z, r24
    4e68:	de 01       	movw	r26, r28
    4e6a:	a6 58       	subi	r26, 0x86	; 134
    4e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e6e:	fe 01       	movw	r30, r28
    4e70:	e2 58       	subi	r30, 0x82	; 130
    4e72:	ff 4f       	sbci	r31, 0xFF	; 255
    4e74:	80 81       	ld	r24, Z
    4e76:	91 81       	ldd	r25, Z+1	; 0x01
    4e78:	11 96       	adiw	r26, 0x01	; 1
    4e7a:	9c 93       	st	X, r25
    4e7c:	8e 93       	st	-X, r24
    4e7e:	fe 01       	movw	r30, r28
    4e80:	e6 58       	subi	r30, 0x86	; 134
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	80 81       	ld	r24, Z
    4e86:	91 81       	ldd	r25, Z+1	; 0x01
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	f1 f7       	brne	.-4      	; 0x4e88 <lcd_displayCharacter+0x486>
    4e8c:	fe 01       	movw	r30, r28
    4e8e:	e6 58       	subi	r30, 0x86	; 134
    4e90:	ff 4f       	sbci	r31, 0xFF	; 255
    4e92:	91 83       	std	Z+1, r25	; 0x01
    4e94:	80 83       	st	Z, r24
    4e96:	22 c0       	rjmp	.+68     	; 0x4edc <lcd_displayCharacter+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4e98:	8e 01       	movw	r16, r28
    4e9a:	08 57       	subi	r16, 0x78	; 120
    4e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	e7 57       	subi	r30, 0x77	; 119
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	60 81       	ld	r22, Z
    4ea6:	71 81       	ldd	r23, Z+1	; 0x01
    4ea8:	82 81       	ldd	r24, Z+2	; 0x02
    4eaa:	93 81       	ldd	r25, Z+3	; 0x03
    4eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	f8 01       	movw	r30, r16
    4eb6:	80 83       	st	Z, r24
    4eb8:	de 01       	movw	r26, r28
    4eba:	a7 58       	subi	r26, 0x87	; 135
    4ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	e8 57       	subi	r30, 0x78	; 120
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	80 81       	ld	r24, Z
    4ec6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e7 58       	subi	r30, 0x87	; 135
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	80 81       	ld	r24, Z
    4ed0:	8a 95       	dec	r24
    4ed2:	f1 f7       	brne	.-4      	; 0x4ed0 <lcd_displayCharacter+0x4ce>
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	e7 58       	subi	r30, 0x87	; 135
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((character & 0xF0) >> 4) << LCD_DATA_BUS_PORT_OFFSET);
    4edc:	fe 01       	movw	r30, r28
    4ede:	e7 55       	subi	r30, 0x57	; 87
    4ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee2:	80 81       	ld	r24, Z
    4ee4:	82 95       	swap	r24
    4ee6:	8f 70       	andi	r24, 0x0F	; 15
    4ee8:	98 2f       	mov	r25, r24
    4eea:	99 0f       	add	r25, r25
    4eec:	99 0f       	add	r25, r25
    4eee:	99 0f       	add	r25, r25
    4ef0:	80 e0       	ldi	r24, 0x00	; 0
    4ef2:	68 e7       	ldi	r22, 0x78	; 120
    4ef4:	49 2f       	mov	r20, r25
    4ef6:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    4efa:	fe 01       	movw	r30, r28
    4efc:	eb 58       	subi	r30, 0x8B	; 139
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	a0 ea       	ldi	r26, 0xA0	; 160
    4f06:	b0 e4       	ldi	r27, 0x40	; 64
    4f08:	80 83       	st	Z, r24
    4f0a:	91 83       	std	Z+1, r25	; 0x01
    4f0c:	a2 83       	std	Z+2, r26	; 0x02
    4f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4f10:	8e 01       	movw	r16, r28
    4f12:	0f 58       	subi	r16, 0x8F	; 143
    4f14:	1f 4f       	sbci	r17, 0xFF	; 255
    4f16:	fe 01       	movw	r30, r28
    4f18:	eb 58       	subi	r30, 0x8B	; 139
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	60 81       	ld	r22, Z
    4f1e:	71 81       	ldd	r23, Z+1	; 0x01
    4f20:	82 81       	ldd	r24, Z+2	; 0x02
    4f22:	93 81       	ldd	r25, Z+3	; 0x03
    4f24:	2b ea       	ldi	r18, 0xAB	; 171
    4f26:	3a ea       	ldi	r19, 0xAA	; 170
    4f28:	4a ea       	ldi	r20, 0xAA	; 170
    4f2a:	50 e4       	ldi	r21, 0x40	; 64
    4f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	f8 01       	movw	r30, r16
    4f36:	80 83       	st	Z, r24
    4f38:	91 83       	std	Z+1, r25	; 0x01
    4f3a:	a2 83       	std	Z+2, r26	; 0x02
    4f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f3e:	fe 01       	movw	r30, r28
    4f40:	ef 58       	subi	r30, 0x8F	; 143
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	60 81       	ld	r22, Z
    4f46:	71 81       	ldd	r23, Z+1	; 0x01
    4f48:	82 81       	ldd	r24, Z+2	; 0x02
    4f4a:	93 81       	ldd	r25, Z+3	; 0x03
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e8       	ldi	r20, 0x80	; 128
    4f52:	5f e3       	ldi	r21, 0x3F	; 63
    4f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f58:	88 23       	and	r24, r24
    4f5a:	34 f4       	brge	.+12     	; 0x4f68 <lcd_displayCharacter+0x566>
		__ticks = 1;
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	e0 59       	subi	r30, 0x90	; 144
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	80 83       	st	Z, r24
    4f66:	e0 c0       	rjmp	.+448    	; 0x5128 <lcd_displayCharacter+0x726>
	else if (__tmp > 255)
    4f68:	fe 01       	movw	r30, r28
    4f6a:	ef 58       	subi	r30, 0x8F	; 143
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	60 81       	ld	r22, Z
    4f70:	71 81       	ldd	r23, Z+1	; 0x01
    4f72:	82 81       	ldd	r24, Z+2	; 0x02
    4f74:	93 81       	ldd	r25, Z+3	; 0x03
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	4f e7       	ldi	r20, 0x7F	; 127
    4f7c:	53 e4       	ldi	r21, 0x43	; 67
    4f7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f82:	18 16       	cp	r1, r24
    4f84:	0c f0       	brlt	.+2      	; 0x4f88 <lcd_displayCharacter+0x586>
    4f86:	c0 c0       	rjmp	.+384    	; 0x5108 <lcd_displayCharacter+0x706>
	{
		_delay_ms(__us / 1000.0);
    4f88:	fe 01       	movw	r30, r28
    4f8a:	eb 58       	subi	r30, 0x8B	; 139
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	60 81       	ld	r22, Z
    4f90:	71 81       	ldd	r23, Z+1	; 0x01
    4f92:	82 81       	ldd	r24, Z+2	; 0x02
    4f94:	93 81       	ldd	r25, Z+3	; 0x03
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	4a e7       	ldi	r20, 0x7A	; 122
    4f9c:	54 e4       	ldi	r21, 0x44	; 68
    4f9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	fe 01       	movw	r30, r28
    4fa8:	e4 59       	subi	r30, 0x94	; 148
    4faa:	ff 4f       	sbci	r31, 0xFF	; 255
    4fac:	80 83       	st	Z, r24
    4fae:	91 83       	std	Z+1, r25	; 0x01
    4fb0:	a2 83       	std	Z+2, r26	; 0x02
    4fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fb4:	8e 01       	movw	r16, r28
    4fb6:	08 59       	subi	r16, 0x98	; 152
    4fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fba:	fe 01       	movw	r30, r28
    4fbc:	e4 59       	subi	r30, 0x94	; 148
    4fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc0:	60 81       	ld	r22, Z
    4fc2:	71 81       	ldd	r23, Z+1	; 0x01
    4fc4:	82 81       	ldd	r24, Z+2	; 0x02
    4fc6:	93 81       	ldd	r25, Z+3	; 0x03
    4fc8:	20 e0       	ldi	r18, 0x00	; 0
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	4a e7       	ldi	r20, 0x7A	; 122
    4fce:	55 e4       	ldi	r21, 0x45	; 69
    4fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	f8 01       	movw	r30, r16
    4fda:	80 83       	st	Z, r24
    4fdc:	91 83       	std	Z+1, r25	; 0x01
    4fde:	a2 83       	std	Z+2, r26	; 0x02
    4fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fe2:	fe 01       	movw	r30, r28
    4fe4:	e8 59       	subi	r30, 0x98	; 152
    4fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe8:	60 81       	ld	r22, Z
    4fea:	71 81       	ldd	r23, Z+1	; 0x01
    4fec:	82 81       	ldd	r24, Z+2	; 0x02
    4fee:	93 81       	ldd	r25, Z+3	; 0x03
    4ff0:	20 e0       	ldi	r18, 0x00	; 0
    4ff2:	30 e0       	ldi	r19, 0x00	; 0
    4ff4:	40 e8       	ldi	r20, 0x80	; 128
    4ff6:	5f e3       	ldi	r21, 0x3F	; 63
    4ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ffc:	88 23       	and	r24, r24
    4ffe:	44 f4       	brge	.+16     	; 0x5010 <lcd_displayCharacter+0x60e>
		__ticks = 1;
    5000:	fe 01       	movw	r30, r28
    5002:	ea 59       	subi	r30, 0x9A	; 154
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	91 83       	std	Z+1, r25	; 0x01
    500c:	80 83       	st	Z, r24
    500e:	64 c0       	rjmp	.+200    	; 0x50d8 <lcd_displayCharacter+0x6d6>
	else if (__tmp > 65535)
    5010:	fe 01       	movw	r30, r28
    5012:	e8 59       	subi	r30, 0x98	; 152
    5014:	ff 4f       	sbci	r31, 0xFF	; 255
    5016:	60 81       	ld	r22, Z
    5018:	71 81       	ldd	r23, Z+1	; 0x01
    501a:	82 81       	ldd	r24, Z+2	; 0x02
    501c:	93 81       	ldd	r25, Z+3	; 0x03
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	3f ef       	ldi	r19, 0xFF	; 255
    5022:	4f e7       	ldi	r20, 0x7F	; 127
    5024:	57 e4       	ldi	r21, 0x47	; 71
    5026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    502a:	18 16       	cp	r1, r24
    502c:	0c f0       	brlt	.+2      	; 0x5030 <lcd_displayCharacter+0x62e>
    502e:	43 c0       	rjmp	.+134    	; 0x50b6 <lcd_displayCharacter+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5030:	fe 01       	movw	r30, r28
    5032:	e4 59       	subi	r30, 0x94	; 148
    5034:	ff 4f       	sbci	r31, 0xFF	; 255
    5036:	60 81       	ld	r22, Z
    5038:	71 81       	ldd	r23, Z+1	; 0x01
    503a:	82 81       	ldd	r24, Z+2	; 0x02
    503c:	93 81       	ldd	r25, Z+3	; 0x03
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e2       	ldi	r20, 0x20	; 32
    5044:	51 e4       	ldi	r21, 0x41	; 65
    5046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	8e 01       	movw	r16, r28
    5050:	0a 59       	subi	r16, 0x9A	; 154
    5052:	1f 4f       	sbci	r17, 0xFF	; 255
    5054:	bc 01       	movw	r22, r24
    5056:	cd 01       	movw	r24, r26
    5058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	f8 01       	movw	r30, r16
    5062:	91 83       	std	Z+1, r25	; 0x01
    5064:	80 83       	st	Z, r24
    5066:	1f c0       	rjmp	.+62     	; 0x50a6 <lcd_displayCharacter+0x6a4>
    5068:	fe 01       	movw	r30, r28
    506a:	ec 59       	subi	r30, 0x9C	; 156
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 e9       	ldi	r24, 0x90	; 144
    5070:	91 e0       	ldi	r25, 0x01	; 1
    5072:	91 83       	std	Z+1, r25	; 0x01
    5074:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5076:	fe 01       	movw	r30, r28
    5078:	ec 59       	subi	r30, 0x9C	; 156
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	80 81       	ld	r24, Z
    507e:	91 81       	ldd	r25, Z+1	; 0x01
    5080:	01 97       	sbiw	r24, 0x01	; 1
    5082:	f1 f7       	brne	.-4      	; 0x5080 <lcd_displayCharacter+0x67e>
    5084:	fe 01       	movw	r30, r28
    5086:	ec 59       	subi	r30, 0x9C	; 156
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	91 83       	std	Z+1, r25	; 0x01
    508c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    508e:	de 01       	movw	r26, r28
    5090:	aa 59       	subi	r26, 0x9A	; 154
    5092:	bf 4f       	sbci	r27, 0xFF	; 255
    5094:	fe 01       	movw	r30, r28
    5096:	ea 59       	subi	r30, 0x9A	; 154
    5098:	ff 4f       	sbci	r31, 0xFF	; 255
    509a:	80 81       	ld	r24, Z
    509c:	91 81       	ldd	r25, Z+1	; 0x01
    509e:	01 97       	sbiw	r24, 0x01	; 1
    50a0:	11 96       	adiw	r26, 0x01	; 1
    50a2:	9c 93       	st	X, r25
    50a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50a6:	fe 01       	movw	r30, r28
    50a8:	ea 59       	subi	r30, 0x9A	; 154
    50aa:	ff 4f       	sbci	r31, 0xFF	; 255
    50ac:	80 81       	ld	r24, Z
    50ae:	91 81       	ldd	r25, Z+1	; 0x01
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	d1 f6       	brne	.-76     	; 0x5068 <lcd_displayCharacter+0x666>
    50b4:	4b c0       	rjmp	.+150    	; 0x514c <lcd_displayCharacter+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b6:	8e 01       	movw	r16, r28
    50b8:	0a 59       	subi	r16, 0x9A	; 154
    50ba:	1f 4f       	sbci	r17, 0xFF	; 255
    50bc:	fe 01       	movw	r30, r28
    50be:	e8 59       	subi	r30, 0x98	; 152
    50c0:	ff 4f       	sbci	r31, 0xFF	; 255
    50c2:	60 81       	ld	r22, Z
    50c4:	71 81       	ldd	r23, Z+1	; 0x01
    50c6:	82 81       	ldd	r24, Z+2	; 0x02
    50c8:	93 81       	ldd	r25, Z+3	; 0x03
    50ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ce:	dc 01       	movw	r26, r24
    50d0:	cb 01       	movw	r24, r22
    50d2:	f8 01       	movw	r30, r16
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	80 83       	st	Z, r24
    50d8:	de 01       	movw	r26, r28
    50da:	ae 59       	subi	r26, 0x9E	; 158
    50dc:	bf 4f       	sbci	r27, 0xFF	; 255
    50de:	fe 01       	movw	r30, r28
    50e0:	ea 59       	subi	r30, 0x9A	; 154
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	80 81       	ld	r24, Z
    50e6:	91 81       	ldd	r25, Z+1	; 0x01
    50e8:	11 96       	adiw	r26, 0x01	; 1
    50ea:	9c 93       	st	X, r25
    50ec:	8e 93       	st	-X, r24
    50ee:	fe 01       	movw	r30, r28
    50f0:	ee 59       	subi	r30, 0x9E	; 158
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	80 81       	ld	r24, Z
    50f6:	91 81       	ldd	r25, Z+1	; 0x01
    50f8:	01 97       	sbiw	r24, 0x01	; 1
    50fa:	f1 f7       	brne	.-4      	; 0x50f8 <lcd_displayCharacter+0x6f6>
    50fc:	fe 01       	movw	r30, r28
    50fe:	ee 59       	subi	r30, 0x9E	; 158
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	91 83       	std	Z+1, r25	; 0x01
    5104:	80 83       	st	Z, r24
    5106:	22 c0       	rjmp	.+68     	; 0x514c <lcd_displayCharacter+0x74a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5108:	8e 01       	movw	r16, r28
    510a:	00 59       	subi	r16, 0x90	; 144
    510c:	1f 4f       	sbci	r17, 0xFF	; 255
    510e:	fe 01       	movw	r30, r28
    5110:	ef 58       	subi	r30, 0x8F	; 143
    5112:	ff 4f       	sbci	r31, 0xFF	; 255
    5114:	60 81       	ld	r22, Z
    5116:	71 81       	ldd	r23, Z+1	; 0x01
    5118:	82 81       	ldd	r24, Z+2	; 0x02
    511a:	93 81       	ldd	r25, Z+3	; 0x03
    511c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	f8 01       	movw	r30, r16
    5126:	80 83       	st	Z, r24
    5128:	de 01       	movw	r26, r28
    512a:	af 59       	subi	r26, 0x9F	; 159
    512c:	bf 4f       	sbci	r27, 0xFF	; 255
    512e:	fe 01       	movw	r30, r28
    5130:	e0 59       	subi	r30, 0x90	; 144
    5132:	ff 4f       	sbci	r31, 0xFF	; 255
    5134:	80 81       	ld	r24, Z
    5136:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5138:	fe 01       	movw	r30, r28
    513a:	ef 59       	subi	r30, 0x9F	; 159
    513c:	ff 4f       	sbci	r31, 0xFF	; 255
    513e:	80 81       	ld	r24, Z
    5140:	8a 95       	dec	r24
    5142:	f1 f7       	brne	.-4      	; 0x5140 <lcd_displayCharacter+0x73e>
    5144:	fe 01       	movw	r30, r28
    5146:	ef 59       	subi	r30, 0x9F	; 159
    5148:	ff 4f       	sbci	r31, 0xFF	; 255
    514a:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	62 e0       	ldi	r22, 0x02	; 2
    5150:	40 e0       	ldi	r20, 0x00	; 0
    5152:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    5156:	fe 01       	movw	r30, r28
    5158:	e3 5a       	subi	r30, 0xA3	; 163
    515a:	ff 4f       	sbci	r31, 0xFF	; 255
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	a0 ea       	ldi	r26, 0xA0	; 160
    5162:	b0 e4       	ldi	r27, 0x40	; 64
    5164:	80 83       	st	Z, r24
    5166:	91 83       	std	Z+1, r25	; 0x01
    5168:	a2 83       	std	Z+2, r26	; 0x02
    516a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    516c:	8e 01       	movw	r16, r28
    516e:	07 5a       	subi	r16, 0xA7	; 167
    5170:	1f 4f       	sbci	r17, 0xFF	; 255
    5172:	fe 01       	movw	r30, r28
    5174:	e3 5a       	subi	r30, 0xA3	; 163
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	60 81       	ld	r22, Z
    517a:	71 81       	ldd	r23, Z+1	; 0x01
    517c:	82 81       	ldd	r24, Z+2	; 0x02
    517e:	93 81       	ldd	r25, Z+3	; 0x03
    5180:	2b ea       	ldi	r18, 0xAB	; 171
    5182:	3a ea       	ldi	r19, 0xAA	; 170
    5184:	4a ea       	ldi	r20, 0xAA	; 170
    5186:	50 e4       	ldi	r21, 0x40	; 64
    5188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    518c:	dc 01       	movw	r26, r24
    518e:	cb 01       	movw	r24, r22
    5190:	f8 01       	movw	r30, r16
    5192:	80 83       	st	Z, r24
    5194:	91 83       	std	Z+1, r25	; 0x01
    5196:	a2 83       	std	Z+2, r26	; 0x02
    5198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    519a:	fe 01       	movw	r30, r28
    519c:	e7 5a       	subi	r30, 0xA7	; 167
    519e:	ff 4f       	sbci	r31, 0xFF	; 255
    51a0:	60 81       	ld	r22, Z
    51a2:	71 81       	ldd	r23, Z+1	; 0x01
    51a4:	82 81       	ldd	r24, Z+2	; 0x02
    51a6:	93 81       	ldd	r25, Z+3	; 0x03
    51a8:	20 e0       	ldi	r18, 0x00	; 0
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	40 e8       	ldi	r20, 0x80	; 128
    51ae:	5f e3       	ldi	r21, 0x3F	; 63
    51b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51b4:	88 23       	and	r24, r24
    51b6:	34 f4       	brge	.+12     	; 0x51c4 <lcd_displayCharacter+0x7c2>
		__ticks = 1;
    51b8:	fe 01       	movw	r30, r28
    51ba:	e8 5a       	subi	r30, 0xA8	; 168
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	80 83       	st	Z, r24
    51c2:	e0 c0       	rjmp	.+448    	; 0x5384 <lcd_displayCharacter+0x982>
	else if (__tmp > 255)
    51c4:	fe 01       	movw	r30, r28
    51c6:	e7 5a       	subi	r30, 0xA7	; 167
    51c8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ca:	60 81       	ld	r22, Z
    51cc:	71 81       	ldd	r23, Z+1	; 0x01
    51ce:	82 81       	ldd	r24, Z+2	; 0x02
    51d0:	93 81       	ldd	r25, Z+3	; 0x03
    51d2:	20 e0       	ldi	r18, 0x00	; 0
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	4f e7       	ldi	r20, 0x7F	; 127
    51d8:	53 e4       	ldi	r21, 0x43	; 67
    51da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51de:	18 16       	cp	r1, r24
    51e0:	0c f0       	brlt	.+2      	; 0x51e4 <lcd_displayCharacter+0x7e2>
    51e2:	c0 c0       	rjmp	.+384    	; 0x5364 <lcd_displayCharacter+0x962>
	{
		_delay_ms(__us / 1000.0);
    51e4:	fe 01       	movw	r30, r28
    51e6:	e3 5a       	subi	r30, 0xA3	; 163
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	60 81       	ld	r22, Z
    51ec:	71 81       	ldd	r23, Z+1	; 0x01
    51ee:	82 81       	ldd	r24, Z+2	; 0x02
    51f0:	93 81       	ldd	r25, Z+3	; 0x03
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	4a e7       	ldi	r20, 0x7A	; 122
    51f8:	54 e4       	ldi	r21, 0x44	; 68
    51fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51fe:	dc 01       	movw	r26, r24
    5200:	cb 01       	movw	r24, r22
    5202:	fe 01       	movw	r30, r28
    5204:	ec 5a       	subi	r30, 0xAC	; 172
    5206:	ff 4f       	sbci	r31, 0xFF	; 255
    5208:	80 83       	st	Z, r24
    520a:	91 83       	std	Z+1, r25	; 0x01
    520c:	a2 83       	std	Z+2, r26	; 0x02
    520e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5210:	8e 01       	movw	r16, r28
    5212:	00 5b       	subi	r16, 0xB0	; 176
    5214:	1f 4f       	sbci	r17, 0xFF	; 255
    5216:	fe 01       	movw	r30, r28
    5218:	ec 5a       	subi	r30, 0xAC	; 172
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	60 81       	ld	r22, Z
    521e:	71 81       	ldd	r23, Z+1	; 0x01
    5220:	82 81       	ldd	r24, Z+2	; 0x02
    5222:	93 81       	ldd	r25, Z+3	; 0x03
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	4a e7       	ldi	r20, 0x7A	; 122
    522a:	55 e4       	ldi	r21, 0x45	; 69
    522c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5230:	dc 01       	movw	r26, r24
    5232:	cb 01       	movw	r24, r22
    5234:	f8 01       	movw	r30, r16
    5236:	80 83       	st	Z, r24
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	a2 83       	std	Z+2, r26	; 0x02
    523c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    523e:	fe 01       	movw	r30, r28
    5240:	e0 5b       	subi	r30, 0xB0	; 176
    5242:	ff 4f       	sbci	r31, 0xFF	; 255
    5244:	60 81       	ld	r22, Z
    5246:	71 81       	ldd	r23, Z+1	; 0x01
    5248:	82 81       	ldd	r24, Z+2	; 0x02
    524a:	93 81       	ldd	r25, Z+3	; 0x03
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	40 e8       	ldi	r20, 0x80	; 128
    5252:	5f e3       	ldi	r21, 0x3F	; 63
    5254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5258:	88 23       	and	r24, r24
    525a:	44 f4       	brge	.+16     	; 0x526c <lcd_displayCharacter+0x86a>
		__ticks = 1;
    525c:	fe 01       	movw	r30, r28
    525e:	e2 5b       	subi	r30, 0xB2	; 178
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	81 e0       	ldi	r24, 0x01	; 1
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	91 83       	std	Z+1, r25	; 0x01
    5268:	80 83       	st	Z, r24
    526a:	64 c0       	rjmp	.+200    	; 0x5334 <lcd_displayCharacter+0x932>
	else if (__tmp > 65535)
    526c:	fe 01       	movw	r30, r28
    526e:	e0 5b       	subi	r30, 0xB0	; 176
    5270:	ff 4f       	sbci	r31, 0xFF	; 255
    5272:	60 81       	ld	r22, Z
    5274:	71 81       	ldd	r23, Z+1	; 0x01
    5276:	82 81       	ldd	r24, Z+2	; 0x02
    5278:	93 81       	ldd	r25, Z+3	; 0x03
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	3f ef       	ldi	r19, 0xFF	; 255
    527e:	4f e7       	ldi	r20, 0x7F	; 127
    5280:	57 e4       	ldi	r21, 0x47	; 71
    5282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5286:	18 16       	cp	r1, r24
    5288:	0c f0       	brlt	.+2      	; 0x528c <lcd_displayCharacter+0x88a>
    528a:	43 c0       	rjmp	.+134    	; 0x5312 <lcd_displayCharacter+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    528c:	fe 01       	movw	r30, r28
    528e:	ec 5a       	subi	r30, 0xAC	; 172
    5290:	ff 4f       	sbci	r31, 0xFF	; 255
    5292:	60 81       	ld	r22, Z
    5294:	71 81       	ldd	r23, Z+1	; 0x01
    5296:	82 81       	ldd	r24, Z+2	; 0x02
    5298:	93 81       	ldd	r25, Z+3	; 0x03
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	40 e2       	ldi	r20, 0x20	; 32
    52a0:	51 e4       	ldi	r21, 0x41	; 65
    52a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a6:	dc 01       	movw	r26, r24
    52a8:	cb 01       	movw	r24, r22
    52aa:	8e 01       	movw	r16, r28
    52ac:	02 5b       	subi	r16, 0xB2	; 178
    52ae:	1f 4f       	sbci	r17, 0xFF	; 255
    52b0:	bc 01       	movw	r22, r24
    52b2:	cd 01       	movw	r24, r26
    52b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	f8 01       	movw	r30, r16
    52be:	91 83       	std	Z+1, r25	; 0x01
    52c0:	80 83       	st	Z, r24
    52c2:	1f c0       	rjmp	.+62     	; 0x5302 <lcd_displayCharacter+0x900>
    52c4:	fe 01       	movw	r30, r28
    52c6:	e4 5b       	subi	r30, 0xB4	; 180
    52c8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ca:	80 e9       	ldi	r24, 0x90	; 144
    52cc:	91 e0       	ldi	r25, 0x01	; 1
    52ce:	91 83       	std	Z+1, r25	; 0x01
    52d0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    52d2:	fe 01       	movw	r30, r28
    52d4:	e4 5b       	subi	r30, 0xB4	; 180
    52d6:	ff 4f       	sbci	r31, 0xFF	; 255
    52d8:	80 81       	ld	r24, Z
    52da:	91 81       	ldd	r25, Z+1	; 0x01
    52dc:	01 97       	sbiw	r24, 0x01	; 1
    52de:	f1 f7       	brne	.-4      	; 0x52dc <lcd_displayCharacter+0x8da>
    52e0:	fe 01       	movw	r30, r28
    52e2:	e4 5b       	subi	r30, 0xB4	; 180
    52e4:	ff 4f       	sbci	r31, 0xFF	; 255
    52e6:	91 83       	std	Z+1, r25	; 0x01
    52e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ea:	de 01       	movw	r26, r28
    52ec:	a2 5b       	subi	r26, 0xB2	; 178
    52ee:	bf 4f       	sbci	r27, 0xFF	; 255
    52f0:	fe 01       	movw	r30, r28
    52f2:	e2 5b       	subi	r30, 0xB2	; 178
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	80 81       	ld	r24, Z
    52f8:	91 81       	ldd	r25, Z+1	; 0x01
    52fa:	01 97       	sbiw	r24, 0x01	; 1
    52fc:	11 96       	adiw	r26, 0x01	; 1
    52fe:	9c 93       	st	X, r25
    5300:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5302:	fe 01       	movw	r30, r28
    5304:	e2 5b       	subi	r30, 0xB2	; 178
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	80 81       	ld	r24, Z
    530a:	91 81       	ldd	r25, Z+1	; 0x01
    530c:	00 97       	sbiw	r24, 0x00	; 0
    530e:	d1 f6       	brne	.-76     	; 0x52c4 <lcd_displayCharacter+0x8c2>
    5310:	4b c0       	rjmp	.+150    	; 0x53a8 <lcd_displayCharacter+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5312:	8e 01       	movw	r16, r28
    5314:	02 5b       	subi	r16, 0xB2	; 178
    5316:	1f 4f       	sbci	r17, 0xFF	; 255
    5318:	fe 01       	movw	r30, r28
    531a:	e0 5b       	subi	r30, 0xB0	; 176
    531c:	ff 4f       	sbci	r31, 0xFF	; 255
    531e:	60 81       	ld	r22, Z
    5320:	71 81       	ldd	r23, Z+1	; 0x01
    5322:	82 81       	ldd	r24, Z+2	; 0x02
    5324:	93 81       	ldd	r25, Z+3	; 0x03
    5326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    532a:	dc 01       	movw	r26, r24
    532c:	cb 01       	movw	r24, r22
    532e:	f8 01       	movw	r30, r16
    5330:	91 83       	std	Z+1, r25	; 0x01
    5332:	80 83       	st	Z, r24
    5334:	de 01       	movw	r26, r28
    5336:	a6 5b       	subi	r26, 0xB6	; 182
    5338:	bf 4f       	sbci	r27, 0xFF	; 255
    533a:	fe 01       	movw	r30, r28
    533c:	e2 5b       	subi	r30, 0xB2	; 178
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	80 81       	ld	r24, Z
    5342:	91 81       	ldd	r25, Z+1	; 0x01
    5344:	11 96       	adiw	r26, 0x01	; 1
    5346:	9c 93       	st	X, r25
    5348:	8e 93       	st	-X, r24
    534a:	fe 01       	movw	r30, r28
    534c:	e6 5b       	subi	r30, 0xB6	; 182
    534e:	ff 4f       	sbci	r31, 0xFF	; 255
    5350:	80 81       	ld	r24, Z
    5352:	91 81       	ldd	r25, Z+1	; 0x01
    5354:	01 97       	sbiw	r24, 0x01	; 1
    5356:	f1 f7       	brne	.-4      	; 0x5354 <lcd_displayCharacter+0x952>
    5358:	fe 01       	movw	r30, r28
    535a:	e6 5b       	subi	r30, 0xB6	; 182
    535c:	ff 4f       	sbci	r31, 0xFF	; 255
    535e:	91 83       	std	Z+1, r25	; 0x01
    5360:	80 83       	st	Z, r24
    5362:	22 c0       	rjmp	.+68     	; 0x53a8 <lcd_displayCharacter+0x9a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5364:	8e 01       	movw	r16, r28
    5366:	08 5a       	subi	r16, 0xA8	; 168
    5368:	1f 4f       	sbci	r17, 0xFF	; 255
    536a:	fe 01       	movw	r30, r28
    536c:	e7 5a       	subi	r30, 0xA7	; 167
    536e:	ff 4f       	sbci	r31, 0xFF	; 255
    5370:	60 81       	ld	r22, Z
    5372:	71 81       	ldd	r23, Z+1	; 0x01
    5374:	82 81       	ldd	r24, Z+2	; 0x02
    5376:	93 81       	ldd	r25, Z+3	; 0x03
    5378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    537c:	dc 01       	movw	r26, r24
    537e:	cb 01       	movw	r24, r22
    5380:	f8 01       	movw	r30, r16
    5382:	80 83       	st	Z, r24
    5384:	de 01       	movw	r26, r28
    5386:	a7 5b       	subi	r26, 0xB7	; 183
    5388:	bf 4f       	sbci	r27, 0xFF	; 255
    538a:	fe 01       	movw	r30, r28
    538c:	e8 5a       	subi	r30, 0xA8	; 168
    538e:	ff 4f       	sbci	r31, 0xFF	; 255
    5390:	80 81       	ld	r24, Z
    5392:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5394:	fe 01       	movw	r30, r28
    5396:	e7 5b       	subi	r30, 0xB7	; 183
    5398:	ff 4f       	sbci	r31, 0xFF	; 255
    539a:	80 81       	ld	r24, Z
    539c:	8a 95       	dec	r24
    539e:	f1 f7       	brne	.-4      	; 0x539c <lcd_displayCharacter+0x99a>
    53a0:	fe 01       	movw	r30, r28
    53a2:	e7 5b       	subi	r30, 0xB7	; 183
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	80 83       	st	Z, r24
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	62 e0       	ldi	r22, 0x02	; 2
    53ac:	41 e0       	ldi	r20, 0x01	; 1
    53ae:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    53b2:	fe 01       	movw	r30, r28
    53b4:	eb 5b       	subi	r30, 0xBB	; 187
    53b6:	ff 4f       	sbci	r31, 0xFF	; 255
    53b8:	80 e0       	ldi	r24, 0x00	; 0
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	a0 ea       	ldi	r26, 0xA0	; 160
    53be:	b0 e4       	ldi	r27, 0x40	; 64
    53c0:	80 83       	st	Z, r24
    53c2:	91 83       	std	Z+1, r25	; 0x01
    53c4:	a2 83       	std	Z+2, r26	; 0x02
    53c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    53c8:	8e 01       	movw	r16, r28
    53ca:	0f 5b       	subi	r16, 0xBF	; 191
    53cc:	1f 4f       	sbci	r17, 0xFF	; 255
    53ce:	fe 01       	movw	r30, r28
    53d0:	eb 5b       	subi	r30, 0xBB	; 187
    53d2:	ff 4f       	sbci	r31, 0xFF	; 255
    53d4:	60 81       	ld	r22, Z
    53d6:	71 81       	ldd	r23, Z+1	; 0x01
    53d8:	82 81       	ldd	r24, Z+2	; 0x02
    53da:	93 81       	ldd	r25, Z+3	; 0x03
    53dc:	2b ea       	ldi	r18, 0xAB	; 171
    53de:	3a ea       	ldi	r19, 0xAA	; 170
    53e0:	4a ea       	ldi	r20, 0xAA	; 170
    53e2:	50 e4       	ldi	r21, 0x40	; 64
    53e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	f8 01       	movw	r30, r16
    53ee:	80 83       	st	Z, r24
    53f0:	91 83       	std	Z+1, r25	; 0x01
    53f2:	a2 83       	std	Z+2, r26	; 0x02
    53f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53f6:	fe 01       	movw	r30, r28
    53f8:	ef 5b       	subi	r30, 0xBF	; 191
    53fa:	ff 4f       	sbci	r31, 0xFF	; 255
    53fc:	60 81       	ld	r22, Z
    53fe:	71 81       	ldd	r23, Z+1	; 0x01
    5400:	82 81       	ldd	r24, Z+2	; 0x02
    5402:	93 81       	ldd	r25, Z+3	; 0x03
    5404:	20 e0       	ldi	r18, 0x00	; 0
    5406:	30 e0       	ldi	r19, 0x00	; 0
    5408:	40 e8       	ldi	r20, 0x80	; 128
    540a:	5f e3       	ldi	r21, 0x3F	; 63
    540c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5410:	88 23       	and	r24, r24
    5412:	34 f4       	brge	.+12     	; 0x5420 <lcd_displayCharacter+0xa1e>
		__ticks = 1;
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	fe 01       	movw	r30, r28
    5418:	e0 5c       	subi	r30, 0xC0	; 192
    541a:	ff 4f       	sbci	r31, 0xFF	; 255
    541c:	80 83       	st	Z, r24
    541e:	9d c0       	rjmp	.+314    	; 0x555a <lcd_displayCharacter+0xb58>
	else if (__tmp > 255)
    5420:	fe 01       	movw	r30, r28
    5422:	ef 5b       	subi	r30, 0xBF	; 191
    5424:	ff 4f       	sbci	r31, 0xFF	; 255
    5426:	60 81       	ld	r22, Z
    5428:	71 81       	ldd	r23, Z+1	; 0x01
    542a:	82 81       	ldd	r24, Z+2	; 0x02
    542c:	93 81       	ldd	r25, Z+3	; 0x03
    542e:	20 e0       	ldi	r18, 0x00	; 0
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	4f e7       	ldi	r20, 0x7F	; 127
    5434:	53 e4       	ldi	r21, 0x43	; 67
    5436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    543a:	18 16       	cp	r1, r24
    543c:	0c f0       	brlt	.+2      	; 0x5440 <lcd_displayCharacter+0xa3e>
    543e:	7e c0       	rjmp	.+252    	; 0x553c <lcd_displayCharacter+0xb3a>
	{
		_delay_ms(__us / 1000.0);
    5440:	fe 01       	movw	r30, r28
    5442:	eb 5b       	subi	r30, 0xBB	; 187
    5444:	ff 4f       	sbci	r31, 0xFF	; 255
    5446:	60 81       	ld	r22, Z
    5448:	71 81       	ldd	r23, Z+1	; 0x01
    544a:	82 81       	ldd	r24, Z+2	; 0x02
    544c:	93 81       	ldd	r25, Z+3	; 0x03
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	4a e7       	ldi	r20, 0x7A	; 122
    5454:	54 e4       	ldi	r21, 0x44	; 68
    5456:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    545a:	dc 01       	movw	r26, r24
    545c:	cb 01       	movw	r24, r22
    545e:	8c af       	std	Y+60, r24	; 0x3c
    5460:	9d af       	std	Y+61, r25	; 0x3d
    5462:	ae af       	std	Y+62, r26	; 0x3e
    5464:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5466:	6c ad       	ldd	r22, Y+60	; 0x3c
    5468:	7d ad       	ldd	r23, Y+61	; 0x3d
    546a:	8e ad       	ldd	r24, Y+62	; 0x3e
    546c:	9f ad       	ldd	r25, Y+63	; 0x3f
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	4a e7       	ldi	r20, 0x7A	; 122
    5474:	55 e4       	ldi	r21, 0x45	; 69
    5476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    547a:	dc 01       	movw	r26, r24
    547c:	cb 01       	movw	r24, r22
    547e:	88 af       	std	Y+56, r24	; 0x38
    5480:	99 af       	std	Y+57, r25	; 0x39
    5482:	aa af       	std	Y+58, r26	; 0x3a
    5484:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    5486:	68 ad       	ldd	r22, Y+56	; 0x38
    5488:	79 ad       	ldd	r23, Y+57	; 0x39
    548a:	8a ad       	ldd	r24, Y+58	; 0x3a
    548c:	9b ad       	ldd	r25, Y+59	; 0x3b
    548e:	20 e0       	ldi	r18, 0x00	; 0
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	40 e8       	ldi	r20, 0x80	; 128
    5494:	5f e3       	ldi	r21, 0x3F	; 63
    5496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    549a:	88 23       	and	r24, r24
    549c:	2c f4       	brge	.+10     	; 0x54a8 <lcd_displayCharacter+0xaa6>
		__ticks = 1;
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	9f ab       	std	Y+55, r25	; 0x37
    54a4:	8e ab       	std	Y+54, r24	; 0x36
    54a6:	3f c0       	rjmp	.+126    	; 0x5526 <lcd_displayCharacter+0xb24>
	else if (__tmp > 65535)
    54a8:	68 ad       	ldd	r22, Y+56	; 0x38
    54aa:	79 ad       	ldd	r23, Y+57	; 0x39
    54ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    54ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	3f ef       	ldi	r19, 0xFF	; 255
    54b4:	4f e7       	ldi	r20, 0x7F	; 127
    54b6:	57 e4       	ldi	r21, 0x47	; 71
    54b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54bc:	18 16       	cp	r1, r24
    54be:	4c f5       	brge	.+82     	; 0x5512 <lcd_displayCharacter+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    54c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    54c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    54c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    54c8:	20 e0       	ldi	r18, 0x00	; 0
    54ca:	30 e0       	ldi	r19, 0x00	; 0
    54cc:	40 e2       	ldi	r20, 0x20	; 32
    54ce:	51 e4       	ldi	r21, 0x41	; 65
    54d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	bc 01       	movw	r22, r24
    54da:	cd 01       	movw	r24, r26
    54dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e0:	dc 01       	movw	r26, r24
    54e2:	cb 01       	movw	r24, r22
    54e4:	9f ab       	std	Y+55, r25	; 0x37
    54e6:	8e ab       	std	Y+54, r24	; 0x36
    54e8:	0f c0       	rjmp	.+30     	; 0x5508 <lcd_displayCharacter+0xb06>
    54ea:	80 e9       	ldi	r24, 0x90	; 144
    54ec:	91 e0       	ldi	r25, 0x01	; 1
    54ee:	9d ab       	std	Y+53, r25	; 0x35
    54f0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    54f2:	8c a9       	ldd	r24, Y+52	; 0x34
    54f4:	9d a9       	ldd	r25, Y+53	; 0x35
    54f6:	01 97       	sbiw	r24, 0x01	; 1
    54f8:	f1 f7       	brne	.-4      	; 0x54f6 <lcd_displayCharacter+0xaf4>
    54fa:	9d ab       	std	Y+53, r25	; 0x35
    54fc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54fe:	8e a9       	ldd	r24, Y+54	; 0x36
    5500:	9f a9       	ldd	r25, Y+55	; 0x37
    5502:	01 97       	sbiw	r24, 0x01	; 1
    5504:	9f ab       	std	Y+55, r25	; 0x37
    5506:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5508:	8e a9       	ldd	r24, Y+54	; 0x36
    550a:	9f a9       	ldd	r25, Y+55	; 0x37
    550c:	00 97       	sbiw	r24, 0x00	; 0
    550e:	69 f7       	brne	.-38     	; 0x54ea <lcd_displayCharacter+0xae8>
    5510:	2d c0       	rjmp	.+90     	; 0x556c <lcd_displayCharacter+0xb6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5512:	68 ad       	ldd	r22, Y+56	; 0x38
    5514:	79 ad       	ldd	r23, Y+57	; 0x39
    5516:	8a ad       	ldd	r24, Y+58	; 0x3a
    5518:	9b ad       	ldd	r25, Y+59	; 0x3b
    551a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    551e:	dc 01       	movw	r26, r24
    5520:	cb 01       	movw	r24, r22
    5522:	9f ab       	std	Y+55, r25	; 0x37
    5524:	8e ab       	std	Y+54, r24	; 0x36
    5526:	8e a9       	ldd	r24, Y+54	; 0x36
    5528:	9f a9       	ldd	r25, Y+55	; 0x37
    552a:	9b ab       	std	Y+51, r25	; 0x33
    552c:	8a ab       	std	Y+50, r24	; 0x32
    552e:	8a a9       	ldd	r24, Y+50	; 0x32
    5530:	9b a9       	ldd	r25, Y+51	; 0x33
    5532:	01 97       	sbiw	r24, 0x01	; 1
    5534:	f1 f7       	brne	.-4      	; 0x5532 <lcd_displayCharacter+0xb30>
    5536:	9b ab       	std	Y+51, r25	; 0x33
    5538:	8a ab       	std	Y+50, r24	; 0x32
    553a:	18 c0       	rjmp	.+48     	; 0x556c <lcd_displayCharacter+0xb6a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    553c:	fe 01       	movw	r30, r28
    553e:	ef 5b       	subi	r30, 0xBF	; 191
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	60 81       	ld	r22, Z
    5544:	71 81       	ldd	r23, Z+1	; 0x01
    5546:	82 81       	ldd	r24, Z+2	; 0x02
    5548:	93 81       	ldd	r25, Z+3	; 0x03
    554a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	fe 01       	movw	r30, r28
    5554:	e0 5c       	subi	r30, 0xC0	; 192
    5556:	ff 4f       	sbci	r31, 0xFF	; 255
    5558:	80 83       	st	Z, r24
    555a:	fe 01       	movw	r30, r28
    555c:	e0 5c       	subi	r30, 0xC0	; 192
    555e:	ff 4f       	sbci	r31, 0xFF	; 255
    5560:	80 81       	ld	r24, Z
    5562:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5564:	89 a9       	ldd	r24, Y+49	; 0x31
    5566:	8a 95       	dec	r24
    5568:	f1 f7       	brne	.-4      	; 0x5566 <lcd_displayCharacter+0xb64>
    556a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(5);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((character & 0x0F)) << LCD_DATA_BUS_PORT_OFFSET);
    556c:	fe 01       	movw	r30, r28
    556e:	e7 55       	subi	r30, 0x57	; 87
    5570:	ff 4f       	sbci	r31, 0xFF	; 255
    5572:	80 81       	ld	r24, Z
    5574:	8f 70       	andi	r24, 0x0F	; 15
    5576:	98 2f       	mov	r25, r24
    5578:	99 0f       	add	r25, r25
    557a:	99 0f       	add	r25, r25
    557c:	99 0f       	add	r25, r25
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	68 e7       	ldi	r22, 0x78	; 120
    5582:	49 2f       	mov	r20, r25
    5584:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    5588:	80 e0       	ldi	r24, 0x00	; 0
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	a0 ea       	ldi	r26, 0xA0	; 160
    558e:	b0 e4       	ldi	r27, 0x40	; 64
    5590:	8d a7       	std	Y+45, r24	; 0x2d
    5592:	9e a7       	std	Y+46, r25	; 0x2e
    5594:	af a7       	std	Y+47, r26	; 0x2f
    5596:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5598:	6d a5       	ldd	r22, Y+45	; 0x2d
    559a:	7e a5       	ldd	r23, Y+46	; 0x2e
    559c:	8f a5       	ldd	r24, Y+47	; 0x2f
    559e:	98 a9       	ldd	r25, Y+48	; 0x30
    55a0:	2b ea       	ldi	r18, 0xAB	; 171
    55a2:	3a ea       	ldi	r19, 0xAA	; 170
    55a4:	4a ea       	ldi	r20, 0xAA	; 170
    55a6:	50 e4       	ldi	r21, 0x40	; 64
    55a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ac:	dc 01       	movw	r26, r24
    55ae:	cb 01       	movw	r24, r22
    55b0:	89 a7       	std	Y+41, r24	; 0x29
    55b2:	9a a7       	std	Y+42, r25	; 0x2a
    55b4:	ab a7       	std	Y+43, r26	; 0x2b
    55b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    55b8:	69 a5       	ldd	r22, Y+41	; 0x29
    55ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    55bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    55be:	9c a5       	ldd	r25, Y+44	; 0x2c
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	40 e8       	ldi	r20, 0x80	; 128
    55c6:	5f e3       	ldi	r21, 0x3F	; 63
    55c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55cc:	88 23       	and	r24, r24
    55ce:	1c f4       	brge	.+6      	; 0x55d6 <lcd_displayCharacter+0xbd4>
		__ticks = 1;
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	88 a7       	std	Y+40, r24	; 0x28
    55d4:	91 c0       	rjmp	.+290    	; 0x56f8 <lcd_displayCharacter+0xcf6>
	else if (__tmp > 255)
    55d6:	69 a5       	ldd	r22, Y+41	; 0x29
    55d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    55da:	8b a5       	ldd	r24, Y+43	; 0x2b
    55dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	4f e7       	ldi	r20, 0x7F	; 127
    55e4:	53 e4       	ldi	r21, 0x43	; 67
    55e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55ea:	18 16       	cp	r1, r24
    55ec:	0c f0       	brlt	.+2      	; 0x55f0 <lcd_displayCharacter+0xbee>
    55ee:	7b c0       	rjmp	.+246    	; 0x56e6 <lcd_displayCharacter+0xce4>
	{
		_delay_ms(__us / 1000.0);
    55f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    55f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    55f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    55f6:	98 a9       	ldd	r25, Y+48	; 0x30
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	4a e7       	ldi	r20, 0x7A	; 122
    55fe:	54 e4       	ldi	r21, 0x44	; 68
    5600:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5604:	dc 01       	movw	r26, r24
    5606:	cb 01       	movw	r24, r22
    5608:	8c a3       	std	Y+36, r24	; 0x24
    560a:	9d a3       	std	Y+37, r25	; 0x25
    560c:	ae a3       	std	Y+38, r26	; 0x26
    560e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5610:	6c a1       	ldd	r22, Y+36	; 0x24
    5612:	7d a1       	ldd	r23, Y+37	; 0x25
    5614:	8e a1       	ldd	r24, Y+38	; 0x26
    5616:	9f a1       	ldd	r25, Y+39	; 0x27
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	4a e7       	ldi	r20, 0x7A	; 122
    561e:	55 e4       	ldi	r21, 0x45	; 69
    5620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5624:	dc 01       	movw	r26, r24
    5626:	cb 01       	movw	r24, r22
    5628:	88 a3       	std	Y+32, r24	; 0x20
    562a:	99 a3       	std	Y+33, r25	; 0x21
    562c:	aa a3       	std	Y+34, r26	; 0x22
    562e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5630:	68 a1       	ldd	r22, Y+32	; 0x20
    5632:	79 a1       	ldd	r23, Y+33	; 0x21
    5634:	8a a1       	ldd	r24, Y+34	; 0x22
    5636:	9b a1       	ldd	r25, Y+35	; 0x23
    5638:	20 e0       	ldi	r18, 0x00	; 0
    563a:	30 e0       	ldi	r19, 0x00	; 0
    563c:	40 e8       	ldi	r20, 0x80	; 128
    563e:	5f e3       	ldi	r21, 0x3F	; 63
    5640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5644:	88 23       	and	r24, r24
    5646:	2c f4       	brge	.+10     	; 0x5652 <lcd_displayCharacter+0xc50>
		__ticks = 1;
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	9f 8f       	std	Y+31, r25	; 0x1f
    564e:	8e 8f       	std	Y+30, r24	; 0x1e
    5650:	3f c0       	rjmp	.+126    	; 0x56d0 <lcd_displayCharacter+0xcce>
	else if (__tmp > 65535)
    5652:	68 a1       	ldd	r22, Y+32	; 0x20
    5654:	79 a1       	ldd	r23, Y+33	; 0x21
    5656:	8a a1       	ldd	r24, Y+34	; 0x22
    5658:	9b a1       	ldd	r25, Y+35	; 0x23
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	3f ef       	ldi	r19, 0xFF	; 255
    565e:	4f e7       	ldi	r20, 0x7F	; 127
    5660:	57 e4       	ldi	r21, 0x47	; 71
    5662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5666:	18 16       	cp	r1, r24
    5668:	4c f5       	brge	.+82     	; 0x56bc <lcd_displayCharacter+0xcba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    566a:	6c a1       	ldd	r22, Y+36	; 0x24
    566c:	7d a1       	ldd	r23, Y+37	; 0x25
    566e:	8e a1       	ldd	r24, Y+38	; 0x26
    5670:	9f a1       	ldd	r25, Y+39	; 0x27
    5672:	20 e0       	ldi	r18, 0x00	; 0
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	40 e2       	ldi	r20, 0x20	; 32
    5678:	51 e4       	ldi	r21, 0x41	; 65
    567a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    567e:	dc 01       	movw	r26, r24
    5680:	cb 01       	movw	r24, r22
    5682:	bc 01       	movw	r22, r24
    5684:	cd 01       	movw	r24, r26
    5686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    568a:	dc 01       	movw	r26, r24
    568c:	cb 01       	movw	r24, r22
    568e:	9f 8f       	std	Y+31, r25	; 0x1f
    5690:	8e 8f       	std	Y+30, r24	; 0x1e
    5692:	0f c0       	rjmp	.+30     	; 0x56b2 <lcd_displayCharacter+0xcb0>
    5694:	80 e9       	ldi	r24, 0x90	; 144
    5696:	91 e0       	ldi	r25, 0x01	; 1
    5698:	9d 8f       	std	Y+29, r25	; 0x1d
    569a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    569c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    569e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    56a0:	01 97       	sbiw	r24, 0x01	; 1
    56a2:	f1 f7       	brne	.-4      	; 0x56a0 <lcd_displayCharacter+0xc9e>
    56a4:	9d 8f       	std	Y+29, r25	; 0x1d
    56a6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	9f 8f       	std	Y+31, r25	; 0x1f
    56b0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    56b6:	00 97       	sbiw	r24, 0x00	; 0
    56b8:	69 f7       	brne	.-38     	; 0x5694 <lcd_displayCharacter+0xc92>
    56ba:	24 c0       	rjmp	.+72     	; 0x5704 <lcd_displayCharacter+0xd02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56bc:	68 a1       	ldd	r22, Y+32	; 0x20
    56be:	79 a1       	ldd	r23, Y+33	; 0x21
    56c0:	8a a1       	ldd	r24, Y+34	; 0x22
    56c2:	9b a1       	ldd	r25, Y+35	; 0x23
    56c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56c8:	dc 01       	movw	r26, r24
    56ca:	cb 01       	movw	r24, r22
    56cc:	9f 8f       	std	Y+31, r25	; 0x1f
    56ce:	8e 8f       	std	Y+30, r24	; 0x1e
    56d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    56d4:	9b 8f       	std	Y+27, r25	; 0x1b
    56d6:	8a 8f       	std	Y+26, r24	; 0x1a
    56d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    56da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56dc:	01 97       	sbiw	r24, 0x01	; 1
    56de:	f1 f7       	brne	.-4      	; 0x56dc <lcd_displayCharacter+0xcda>
    56e0:	9b 8f       	std	Y+27, r25	; 0x1b
    56e2:	8a 8f       	std	Y+26, r24	; 0x1a
    56e4:	0f c0       	rjmp	.+30     	; 0x5704 <lcd_displayCharacter+0xd02>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56e6:	69 a5       	ldd	r22, Y+41	; 0x29
    56e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    56ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    56ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    56ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f2:	dc 01       	movw	r26, r24
    56f4:	cb 01       	movw	r24, r22
    56f6:	88 a7       	std	Y+40, r24	; 0x28
    56f8:	88 a5       	ldd	r24, Y+40	; 0x28
    56fa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56fc:	89 8d       	ldd	r24, Y+25	; 0x19
    56fe:	8a 95       	dec	r24
    5700:	f1 f7       	brne	.-4      	; 0x56fe <lcd_displayCharacter+0xcfc>
    5702:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    5704:	80 e0       	ldi	r24, 0x00	; 0
    5706:	62 e0       	ldi	r22, 0x02	; 2
    5708:	40 e0       	ldi	r20, 0x00	; 0
    570a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	a8 e4       	ldi	r26, 0x48	; 72
    5714:	b2 e4       	ldi	r27, 0x42	; 66
    5716:	8d 8b       	std	Y+21, r24	; 0x15
    5718:	9e 8b       	std	Y+22, r25	; 0x16
    571a:	af 8b       	std	Y+23, r26	; 0x17
    571c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    571e:	6d 89       	ldd	r22, Y+21	; 0x15
    5720:	7e 89       	ldd	r23, Y+22	; 0x16
    5722:	8f 89       	ldd	r24, Y+23	; 0x17
    5724:	98 8d       	ldd	r25, Y+24	; 0x18
    5726:	2b ea       	ldi	r18, 0xAB	; 171
    5728:	3a ea       	ldi	r19, 0xAA	; 170
    572a:	4a ea       	ldi	r20, 0xAA	; 170
    572c:	50 e4       	ldi	r21, 0x40	; 64
    572e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5732:	dc 01       	movw	r26, r24
    5734:	cb 01       	movw	r24, r22
    5736:	89 8b       	std	Y+17, r24	; 0x11
    5738:	9a 8b       	std	Y+18, r25	; 0x12
    573a:	ab 8b       	std	Y+19, r26	; 0x13
    573c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    573e:	69 89       	ldd	r22, Y+17	; 0x11
    5740:	7a 89       	ldd	r23, Y+18	; 0x12
    5742:	8b 89       	ldd	r24, Y+19	; 0x13
    5744:	9c 89       	ldd	r25, Y+20	; 0x14
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	40 e8       	ldi	r20, 0x80	; 128
    574c:	5f e3       	ldi	r21, 0x3F	; 63
    574e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5752:	88 23       	and	r24, r24
    5754:	1c f4       	brge	.+6      	; 0x575c <lcd_displayCharacter+0xd5a>
		__ticks = 1;
    5756:	81 e0       	ldi	r24, 0x01	; 1
    5758:	88 8b       	std	Y+16, r24	; 0x10
    575a:	91 c0       	rjmp	.+290    	; 0x587e <lcd_displayCharacter+0xe7c>
	else if (__tmp > 255)
    575c:	69 89       	ldd	r22, Y+17	; 0x11
    575e:	7a 89       	ldd	r23, Y+18	; 0x12
    5760:	8b 89       	ldd	r24, Y+19	; 0x13
    5762:	9c 89       	ldd	r25, Y+20	; 0x14
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	4f e7       	ldi	r20, 0x7F	; 127
    576a:	53 e4       	ldi	r21, 0x43	; 67
    576c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5770:	18 16       	cp	r1, r24
    5772:	0c f0       	brlt	.+2      	; 0x5776 <lcd_displayCharacter+0xd74>
    5774:	7b c0       	rjmp	.+246    	; 0x586c <lcd_displayCharacter+0xe6a>
	{
		_delay_ms(__us / 1000.0);
    5776:	6d 89       	ldd	r22, Y+21	; 0x15
    5778:	7e 89       	ldd	r23, Y+22	; 0x16
    577a:	8f 89       	ldd	r24, Y+23	; 0x17
    577c:	98 8d       	ldd	r25, Y+24	; 0x18
    577e:	20 e0       	ldi	r18, 0x00	; 0
    5780:	30 e0       	ldi	r19, 0x00	; 0
    5782:	4a e7       	ldi	r20, 0x7A	; 122
    5784:	54 e4       	ldi	r21, 0x44	; 68
    5786:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    578a:	dc 01       	movw	r26, r24
    578c:	cb 01       	movw	r24, r22
    578e:	8c 87       	std	Y+12, r24	; 0x0c
    5790:	9d 87       	std	Y+13, r25	; 0x0d
    5792:	ae 87       	std	Y+14, r26	; 0x0e
    5794:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5796:	6c 85       	ldd	r22, Y+12	; 0x0c
    5798:	7d 85       	ldd	r23, Y+13	; 0x0d
    579a:	8e 85       	ldd	r24, Y+14	; 0x0e
    579c:	9f 85       	ldd	r25, Y+15	; 0x0f
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	4a e7       	ldi	r20, 0x7A	; 122
    57a4:	55 e4       	ldi	r21, 0x45	; 69
    57a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57aa:	dc 01       	movw	r26, r24
    57ac:	cb 01       	movw	r24, r22
    57ae:	88 87       	std	Y+8, r24	; 0x08
    57b0:	99 87       	std	Y+9, r25	; 0x09
    57b2:	aa 87       	std	Y+10, r26	; 0x0a
    57b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    57b6:	68 85       	ldd	r22, Y+8	; 0x08
    57b8:	79 85       	ldd	r23, Y+9	; 0x09
    57ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    57bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    57be:	20 e0       	ldi	r18, 0x00	; 0
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	40 e8       	ldi	r20, 0x80	; 128
    57c4:	5f e3       	ldi	r21, 0x3F	; 63
    57c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ca:	88 23       	and	r24, r24
    57cc:	2c f4       	brge	.+10     	; 0x57d8 <lcd_displayCharacter+0xdd6>
		__ticks = 1;
    57ce:	81 e0       	ldi	r24, 0x01	; 1
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	9f 83       	std	Y+7, r25	; 0x07
    57d4:	8e 83       	std	Y+6, r24	; 0x06
    57d6:	3f c0       	rjmp	.+126    	; 0x5856 <lcd_displayCharacter+0xe54>
	else if (__tmp > 65535)
    57d8:	68 85       	ldd	r22, Y+8	; 0x08
    57da:	79 85       	ldd	r23, Y+9	; 0x09
    57dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    57de:	9b 85       	ldd	r25, Y+11	; 0x0b
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	3f ef       	ldi	r19, 0xFF	; 255
    57e4:	4f e7       	ldi	r20, 0x7F	; 127
    57e6:	57 e4       	ldi	r21, 0x47	; 71
    57e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57ec:	18 16       	cp	r1, r24
    57ee:	4c f5       	brge	.+82     	; 0x5842 <lcd_displayCharacter+0xe40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    57f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    57f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    57f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    57f8:	20 e0       	ldi	r18, 0x00	; 0
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	40 e2       	ldi	r20, 0x20	; 32
    57fe:	51 e4       	ldi	r21, 0x41	; 65
    5800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5804:	dc 01       	movw	r26, r24
    5806:	cb 01       	movw	r24, r22
    5808:	bc 01       	movw	r22, r24
    580a:	cd 01       	movw	r24, r26
    580c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5810:	dc 01       	movw	r26, r24
    5812:	cb 01       	movw	r24, r22
    5814:	9f 83       	std	Y+7, r25	; 0x07
    5816:	8e 83       	std	Y+6, r24	; 0x06
    5818:	0f c0       	rjmp	.+30     	; 0x5838 <lcd_displayCharacter+0xe36>
    581a:	80 e9       	ldi	r24, 0x90	; 144
    581c:	91 e0       	ldi	r25, 0x01	; 1
    581e:	9d 83       	std	Y+5, r25	; 0x05
    5820:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5822:	8c 81       	ldd	r24, Y+4	; 0x04
    5824:	9d 81       	ldd	r25, Y+5	; 0x05
    5826:	01 97       	sbiw	r24, 0x01	; 1
    5828:	f1 f7       	brne	.-4      	; 0x5826 <lcd_displayCharacter+0xe24>
    582a:	9d 83       	std	Y+5, r25	; 0x05
    582c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    582e:	8e 81       	ldd	r24, Y+6	; 0x06
    5830:	9f 81       	ldd	r25, Y+7	; 0x07
    5832:	01 97       	sbiw	r24, 0x01	; 1
    5834:	9f 83       	std	Y+7, r25	; 0x07
    5836:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5838:	8e 81       	ldd	r24, Y+6	; 0x06
    583a:	9f 81       	ldd	r25, Y+7	; 0x07
    583c:	00 97       	sbiw	r24, 0x00	; 0
    583e:	69 f7       	brne	.-38     	; 0x581a <lcd_displayCharacter+0xe18>
    5840:	24 c0       	rjmp	.+72     	; 0x588a <lcd_displayCharacter+0xe88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5842:	68 85       	ldd	r22, Y+8	; 0x08
    5844:	79 85       	ldd	r23, Y+9	; 0x09
    5846:	8a 85       	ldd	r24, Y+10	; 0x0a
    5848:	9b 85       	ldd	r25, Y+11	; 0x0b
    584a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	9f 83       	std	Y+7, r25	; 0x07
    5854:	8e 83       	std	Y+6, r24	; 0x06
    5856:	8e 81       	ldd	r24, Y+6	; 0x06
    5858:	9f 81       	ldd	r25, Y+7	; 0x07
    585a:	9b 83       	std	Y+3, r25	; 0x03
    585c:	8a 83       	std	Y+2, r24	; 0x02
    585e:	8a 81       	ldd	r24, Y+2	; 0x02
    5860:	9b 81       	ldd	r25, Y+3	; 0x03
    5862:	01 97       	sbiw	r24, 0x01	; 1
    5864:	f1 f7       	brne	.-4      	; 0x5862 <lcd_displayCharacter+0xe60>
    5866:	9b 83       	std	Y+3, r25	; 0x03
    5868:	8a 83       	std	Y+2, r24	; 0x02
    586a:	0f c0       	rjmp	.+30     	; 0x588a <lcd_displayCharacter+0xe88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    586c:	69 89       	ldd	r22, Y+17	; 0x11
    586e:	7a 89       	ldd	r23, Y+18	; 0x12
    5870:	8b 89       	ldd	r24, Y+19	; 0x13
    5872:	9c 89       	ldd	r25, Y+20	; 0x14
    5874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5878:	dc 01       	movw	r26, r24
    587a:	cb 01       	movw	r24, r22
    587c:	88 8b       	std	Y+16, r24	; 0x10
    587e:	88 89       	ldd	r24, Y+16	; 0x10
    5880:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5882:	89 81       	ldd	r24, Y+1	; 0x01
    5884:	8a 95       	dec	r24
    5886:	f1 f7       	brne	.-4      	; 0x5884 <lcd_displayCharacter+0xe82>
    5888:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    588a:	c7 55       	subi	r28, 0x57	; 87
    588c:	df 4f       	sbci	r29, 0xFF	; 255
    588e:	0f b6       	in	r0, 0x3f	; 63
    5890:	f8 94       	cli
    5892:	de bf       	out	0x3e, r29	; 62
    5894:	0f be       	out	0x3f, r0	; 63
    5896:	cd bf       	out	0x3d, r28	; 61
    5898:	cf 91       	pop	r28
    589a:	df 91       	pop	r29
    589c:	1f 91       	pop	r17
    589e:	0f 91       	pop	r16
    58a0:	08 95       	ret

000058a2 <lcd_displayString>:
#endif

void lcd_displayString(const char * str){
    58a2:	df 93       	push	r29
    58a4:	cf 93       	push	r28
    58a6:	00 d0       	rcall	.+0      	; 0x58a8 <lcd_displayString+0x6>
    58a8:	cd b7       	in	r28, 0x3d	; 61
    58aa:	de b7       	in	r29, 0x3e	; 62
    58ac:	9a 83       	std	Y+2, r25	; 0x02
    58ae:	89 83       	std	Y+1, r24	; 0x01
    58b0:	0a c0       	rjmp	.+20     	; 0x58c6 <lcd_displayString+0x24>
	while(*str != '\0'){
		lcd_displayCharacter(*str);
    58b2:	e9 81       	ldd	r30, Y+1	; 0x01
    58b4:	fa 81       	ldd	r31, Y+2	; 0x02
    58b6:	80 81       	ld	r24, Z
    58b8:	0e 94 01 25 	call	0x4a02	; 0x4a02 <lcd_displayCharacter>
		str++;
    58bc:	89 81       	ldd	r24, Y+1	; 0x01
    58be:	9a 81       	ldd	r25, Y+2	; 0x02
    58c0:	01 96       	adiw	r24, 0x01	; 1
    58c2:	9a 83       	std	Y+2, r25	; 0x02
    58c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
#endif

void lcd_displayString(const char * str){
	while(*str != '\0'){
    58c6:	e9 81       	ldd	r30, Y+1	; 0x01
    58c8:	fa 81       	ldd	r31, Y+2	; 0x02
    58ca:	80 81       	ld	r24, Z
    58cc:	88 23       	and	r24, r24
    58ce:	89 f7       	brne	.-30     	; 0x58b2 <lcd_displayString+0x10>
		lcd_displayCharacter(*str);
		str++;
	}
}
    58d0:	0f 90       	pop	r0
    58d2:	0f 90       	pop	r0
    58d4:	cf 91       	pop	r28
    58d6:	df 91       	pop	r29
    58d8:	08 95       	ret

000058da <lcd_displaySubString>:

void lcd_displaySubString(const char * str, uint32 length){
    58da:	df 93       	push	r29
    58dc:	cf 93       	push	r28
    58de:	cd b7       	in	r28, 0x3d	; 61
    58e0:	de b7       	in	r29, 0x3e	; 62
    58e2:	2a 97       	sbiw	r28, 0x0a	; 10
    58e4:	0f b6       	in	r0, 0x3f	; 63
    58e6:	f8 94       	cli
    58e8:	de bf       	out	0x3e, r29	; 62
    58ea:	0f be       	out	0x3f, r0	; 63
    58ec:	cd bf       	out	0x3d, r28	; 61
    58ee:	9e 83       	std	Y+6, r25	; 0x06
    58f0:	8d 83       	std	Y+5, r24	; 0x05
    58f2:	4f 83       	std	Y+7, r20	; 0x07
    58f4:	58 87       	std	Y+8, r21	; 0x08
    58f6:	69 87       	std	Y+9, r22	; 0x09
    58f8:	7a 87       	std	Y+10, r23	; 0x0a
	uint32 temp_count = 0;
    58fa:	19 82       	std	Y+1, r1	; 0x01
    58fc:	1a 82       	std	Y+2, r1	; 0x02
    58fe:	1b 82       	std	Y+3, r1	; 0x03
    5900:	1c 82       	std	Y+4, r1	; 0x04
    5902:	15 c0       	rjmp	.+42     	; 0x592e <lcd_displaySubString+0x54>
	while((temp_count < length) && (*str != '\0')){
		lcd_displayCharacter(*str);
    5904:	ed 81       	ldd	r30, Y+5	; 0x05
    5906:	fe 81       	ldd	r31, Y+6	; 0x06
    5908:	80 81       	ld	r24, Z
    590a:	0e 94 01 25 	call	0x4a02	; 0x4a02 <lcd_displayCharacter>
		str++;
    590e:	8d 81       	ldd	r24, Y+5	; 0x05
    5910:	9e 81       	ldd	r25, Y+6	; 0x06
    5912:	01 96       	adiw	r24, 0x01	; 1
    5914:	9e 83       	std	Y+6, r25	; 0x06
    5916:	8d 83       	std	Y+5, r24	; 0x05
		temp_count++;
    5918:	89 81       	ldd	r24, Y+1	; 0x01
    591a:	9a 81       	ldd	r25, Y+2	; 0x02
    591c:	ab 81       	ldd	r26, Y+3	; 0x03
    591e:	bc 81       	ldd	r27, Y+4	; 0x04
    5920:	01 96       	adiw	r24, 0x01	; 1
    5922:	a1 1d       	adc	r26, r1
    5924:	b1 1d       	adc	r27, r1
    5926:	89 83       	std	Y+1, r24	; 0x01
    5928:	9a 83       	std	Y+2, r25	; 0x02
    592a:	ab 83       	std	Y+3, r26	; 0x03
    592c:	bc 83       	std	Y+4, r27	; 0x04
	}
}

void lcd_displaySubString(const char * str, uint32 length){
	uint32 temp_count = 0;
	while((temp_count < length) && (*str != '\0')){
    592e:	29 81       	ldd	r18, Y+1	; 0x01
    5930:	3a 81       	ldd	r19, Y+2	; 0x02
    5932:	4b 81       	ldd	r20, Y+3	; 0x03
    5934:	5c 81       	ldd	r21, Y+4	; 0x04
    5936:	8f 81       	ldd	r24, Y+7	; 0x07
    5938:	98 85       	ldd	r25, Y+8	; 0x08
    593a:	a9 85       	ldd	r26, Y+9	; 0x09
    593c:	ba 85       	ldd	r27, Y+10	; 0x0a
    593e:	28 17       	cp	r18, r24
    5940:	39 07       	cpc	r19, r25
    5942:	4a 07       	cpc	r20, r26
    5944:	5b 07       	cpc	r21, r27
    5946:	28 f4       	brcc	.+10     	; 0x5952 <lcd_displaySubString+0x78>
    5948:	ed 81       	ldd	r30, Y+5	; 0x05
    594a:	fe 81       	ldd	r31, Y+6	; 0x06
    594c:	80 81       	ld	r24, Z
    594e:	88 23       	and	r24, r24
    5950:	c9 f6       	brne	.-78     	; 0x5904 <lcd_displaySubString+0x2a>
		lcd_displayCharacter(*str);
		str++;
		temp_count++;
	}
}
    5952:	2a 96       	adiw	r28, 0x0a	; 10
    5954:	0f b6       	in	r0, 0x3f	; 63
    5956:	f8 94       	cli
    5958:	de bf       	out	0x3e, r29	; 62
    595a:	0f be       	out	0x3f, r0	; 63
    595c:	cd bf       	out	0x3d, r28	; 61
    595e:	cf 91       	pop	r28
    5960:	df 91       	pop	r29
    5962:	08 95       	ret

00005964 <lcd_setPosition>:

void lcd_setPosition(uint8 row, uint8 col){
    5964:	df 93       	push	r29
    5966:	cf 93       	push	r28
    5968:	00 d0       	rcall	.+0      	; 0x596a <lcd_setPosition+0x6>
    596a:	00 d0       	rcall	.+0      	; 0x596c <lcd_setPosition+0x8>
    596c:	0f 92       	push	r0
    596e:	cd b7       	in	r28, 0x3d	; 61
    5970:	de b7       	in	r29, 0x3e	; 62
    5972:	8a 83       	std	Y+2, r24	; 0x02
    5974:	6b 83       	std	Y+3, r22	; 0x03
    5976:	06 c0       	rjmp	.+12     	; 0x5984 <lcd_setPosition+0x20>
	while(col > 15){
		col -= 16;
    5978:	8b 81       	ldd	r24, Y+3	; 0x03
    597a:	80 51       	subi	r24, 0x10	; 16
    597c:	8b 83       	std	Y+3, r24	; 0x03
		row++;
    597e:	8a 81       	ldd	r24, Y+2	; 0x02
    5980:	8f 5f       	subi	r24, 0xFF	; 255
    5982:	8a 83       	std	Y+2, r24	; 0x02
		temp_count++;
	}
}

void lcd_setPosition(uint8 row, uint8 col){
	while(col > 15){
    5984:	8b 81       	ldd	r24, Y+3	; 0x03
    5986:	80 31       	cpi	r24, 0x10	; 16
    5988:	b8 f7       	brcc	.-18     	; 0x5978 <lcd_setPosition+0x14>
		col -= 16;
		row++;
	}
	if((row < 4)&&(col < 16)){
    598a:	8a 81       	ldd	r24, Y+2	; 0x02
    598c:	84 30       	cpi	r24, 0x04	; 4
    598e:	08 f0       	brcs	.+2      	; 0x5992 <lcd_setPosition+0x2e>
    5990:	40 c0       	rjmp	.+128    	; 0x5a12 <lcd_setPosition+0xae>
    5992:	8b 81       	ldd	r24, Y+3	; 0x03
    5994:	80 31       	cpi	r24, 0x10	; 16
    5996:	e8 f5       	brcc	.+122    	; 0x5a12 <lcd_setPosition+0xae>
		uint8 address;
		switch(row){
    5998:	8a 81       	ldd	r24, Y+2	; 0x02
    599a:	28 2f       	mov	r18, r24
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	3d 83       	std	Y+5, r19	; 0x05
    59a0:	2c 83       	std	Y+4, r18	; 0x04
    59a2:	8c 81       	ldd	r24, Y+4	; 0x04
    59a4:	9d 81       	ldd	r25, Y+5	; 0x05
    59a6:	81 30       	cpi	r24, 0x01	; 1
    59a8:	91 05       	cpc	r25, r1
    59aa:	e1 f0       	breq	.+56     	; 0x59e4 <lcd_setPosition+0x80>
    59ac:	2c 81       	ldd	r18, Y+4	; 0x04
    59ae:	3d 81       	ldd	r19, Y+5	; 0x05
    59b0:	22 30       	cpi	r18, 0x02	; 2
    59b2:	31 05       	cpc	r19, r1
    59b4:	2c f4       	brge	.+10     	; 0x59c0 <lcd_setPosition+0x5c>
    59b6:	8c 81       	ldd	r24, Y+4	; 0x04
    59b8:	9d 81       	ldd	r25, Y+5	; 0x05
    59ba:	00 97       	sbiw	r24, 0x00	; 0
    59bc:	61 f0       	breq	.+24     	; 0x59d6 <lcd_setPosition+0x72>
    59be:	29 c0       	rjmp	.+82     	; 0x5a12 <lcd_setPosition+0xae>
    59c0:	2c 81       	ldd	r18, Y+4	; 0x04
    59c2:	3d 81       	ldd	r19, Y+5	; 0x05
    59c4:	22 30       	cpi	r18, 0x02	; 2
    59c6:	31 05       	cpc	r19, r1
    59c8:	a9 f0       	breq	.+42     	; 0x59f4 <lcd_setPosition+0x90>
    59ca:	8c 81       	ldd	r24, Y+4	; 0x04
    59cc:	9d 81       	ldd	r25, Y+5	; 0x05
    59ce:	83 30       	cpi	r24, 0x03	; 3
    59d0:	91 05       	cpc	r25, r1
    59d2:	c1 f0       	breq	.+48     	; 0x5a04 <lcd_setPosition+0xa0>
    59d4:	1e c0       	rjmp	.+60     	; 0x5a12 <lcd_setPosition+0xae>
			case 0:
				address = (0x00 + col)|0x80;
    59d6:	8b 81       	ldd	r24, Y+3	; 0x03
    59d8:	80 68       	ori	r24, 0x80	; 128
    59da:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    59dc:	89 81       	ldd	r24, Y+1	; 0x01
    59de:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
    59e2:	17 c0       	rjmp	.+46     	; 0x5a12 <lcd_setPosition+0xae>
				break;
			case 1:
				address = (0x40 + col)|0x80;
    59e4:	8b 81       	ldd	r24, Y+3	; 0x03
    59e6:	80 5c       	subi	r24, 0xC0	; 192
    59e8:	80 68       	ori	r24, 0x80	; 128
    59ea:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    59ec:	89 81       	ldd	r24, Y+1	; 0x01
    59ee:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
    59f2:	0f c0       	rjmp	.+30     	; 0x5a12 <lcd_setPosition+0xae>
				break;
			case 2:
				address = (0x10 + col)|0x80;
    59f4:	8b 81       	ldd	r24, Y+3	; 0x03
    59f6:	80 5f       	subi	r24, 0xF0	; 240
    59f8:	80 68       	ori	r24, 0x80	; 128
    59fa:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    59fc:	89 81       	ldd	r24, Y+1	; 0x01
    59fe:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
    5a02:	07 c0       	rjmp	.+14     	; 0x5a12 <lcd_setPosition+0xae>
				break;
			case 3:
				address = (0x50 + col)|0x80;
    5a04:	8b 81       	ldd	r24, Y+3	; 0x03
    5a06:	80 5b       	subi	r24, 0xB0	; 176
    5a08:	80 68       	ori	r24, 0x80	; 128
    5a0a:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    5a0c:	89 81       	ldd	r24, Y+1	; 0x01
    5a0e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <lcd_sendCommand>
				break;
		}
	}
}
    5a12:	0f 90       	pop	r0
    5a14:	0f 90       	pop	r0
    5a16:	0f 90       	pop	r0
    5a18:	0f 90       	pop	r0
    5a1a:	0f 90       	pop	r0
    5a1c:	cf 91       	pop	r28
    5a1e:	df 91       	pop	r29
    5a20:	08 95       	ret

00005a22 <keypad_init>:
		'1', '2', '3', '-', 'C', '0', '=', '+'};
#elif KEYPAD_TYPE == ETAMINI32_KEYPAD
uint8 keypad_keys_map[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#endif

void keypad_init(void){
    5a22:	df 93       	push	r29
    5a24:	cf 93       	push	r28
    5a26:	0f 92       	push	r0
    5a28:	cd b7       	in	r28, 0x3d	; 61
    5a2a:	de b7       	in	r29, 0x3e	; 62
	uint8 counter;
	/*Set keypad pins as output*/
	for(counter = KEYPAD_ROWS_OFFSET; counter < KEYPAD_ROWS_COUNT + KEYPAD_ROWS_OFFSET; counter++){
    5a2c:	84 e0       	ldi	r24, 0x04	; 4
    5a2e:	89 83       	std	Y+1, r24	; 0x01
    5a30:	08 c0       	rjmp	.+16     	; 0x5a42 <keypad_init+0x20>
		GPIO_setupPinDirection(KEYPAD_ROWS_PORT, counter, PIN_OUTPUT);
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	69 81       	ldd	r22, Y+1	; 0x01
    5a36:	41 e0       	ldi	r20, 0x01	; 1
    5a38:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
#endif

void keypad_init(void){
	uint8 counter;
	/*Set keypad pins as output*/
	for(counter = KEYPAD_ROWS_OFFSET; counter < KEYPAD_ROWS_COUNT + KEYPAD_ROWS_OFFSET; counter++){
    5a3c:	89 81       	ldd	r24, Y+1	; 0x01
    5a3e:	8f 5f       	subi	r24, 0xFF	; 255
    5a40:	89 83       	std	Y+1, r24	; 0x01
    5a42:	89 81       	ldd	r24, Y+1	; 0x01
    5a44:	88 30       	cpi	r24, 0x08	; 8
    5a46:	a8 f3       	brcs	.-22     	; 0x5a32 <keypad_init+0x10>
		GPIO_setupPinDirection(KEYPAD_ROWS_PORT, counter, PIN_OUTPUT);
	}

	/*set keypad columns as input*/
	for(counter = KEYPAD_COLS_OFFSET; counter < KEYPAD_COLS_COUNT + KEYPAD_COLS_OFFSET; counter++){
    5a48:	82 e0       	ldi	r24, 0x02	; 2
    5a4a:	89 83       	std	Y+1, r24	; 0x01
    5a4c:	08 c0       	rjmp	.+16     	; 0x5a5e <keypad_init+0x3c>
		GPIO_setupPinDirection(KEYPAD_COLS_PORT, counter, PIN_INPUT);
    5a4e:	83 e0       	ldi	r24, 0x03	; 3
    5a50:	69 81       	ldd	r22, Y+1	; 0x01
    5a52:	40 e0       	ldi	r20, 0x00	; 0
    5a54:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	for(counter = KEYPAD_ROWS_OFFSET; counter < KEYPAD_ROWS_COUNT + KEYPAD_ROWS_OFFSET; counter++){
		GPIO_setupPinDirection(KEYPAD_ROWS_PORT, counter, PIN_OUTPUT);
	}

	/*set keypad columns as input*/
	for(counter = KEYPAD_COLS_OFFSET; counter < KEYPAD_COLS_COUNT + KEYPAD_COLS_OFFSET; counter++){
    5a58:	89 81       	ldd	r24, Y+1	; 0x01
    5a5a:	8f 5f       	subi	r24, 0xFF	; 255
    5a5c:	89 83       	std	Y+1, r24	; 0x01
    5a5e:	89 81       	ldd	r24, Y+1	; 0x01
    5a60:	86 30       	cpi	r24, 0x06	; 6
    5a62:	a8 f3       	brcs	.-22     	; 0x5a4e <keypad_init+0x2c>
		GPIO_setupPinDirection(KEYPAD_COLS_PORT, counter, PIN_INPUT);
	}
}
    5a64:	0f 90       	pop	r0
    5a66:	cf 91       	pop	r28
    5a68:	df 91       	pop	r29
    5a6a:	08 95       	ret

00005a6c <keypad_get_pressed_key>:

sint8 keypad_get_pressed_key(void){
    5a6c:	df 93       	push	r29
    5a6e:	cf 93       	push	r28
    5a70:	cd b7       	in	r28, 0x3d	; 61
    5a72:	de b7       	in	r29, 0x3e	; 62
    5a74:	6b 97       	sbiw	r28, 0x1b	; 27
    5a76:	0f b6       	in	r0, 0x3f	; 63
    5a78:	f8 94       	cli
    5a7a:	de bf       	out	0x3e, r29	; 62
    5a7c:	0f be       	out	0x3f, r0	; 63
    5a7e:	cd bf       	out	0x3d, r28	; 61
			}
		}
	}

#else
	for(rows_counter = 0; rows_counter < KEYPAD_ROWS_COUNT; rows_counter++){
    5a80:	1a 8e       	std	Y+26, r1	; 0x1a
    5a82:	f2 c0       	rjmp	.+484    	; 0x5c68 <keypad_get_pressed_key+0x1fc>
		GPIO_writePortMasked(KEYPAD_ROWS_PORT, KEYPAD_ROWS_MASK, ~(1 << (rows_counter + KEYPAD_ROWS_OFFSET)));
    5a84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5a86:	88 2f       	mov	r24, r24
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	9c 01       	movw	r18, r24
    5a8c:	2c 5f       	subi	r18, 0xFC	; 252
    5a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	02 c0       	rjmp	.+4      	; 0x5a9a <keypad_get_pressed_key+0x2e>
    5a96:	88 0f       	add	r24, r24
    5a98:	99 1f       	adc	r25, r25
    5a9a:	2a 95       	dec	r18
    5a9c:	e2 f7       	brpl	.-8      	; 0x5a96 <keypad_get_pressed_key+0x2a>
    5a9e:	98 2f       	mov	r25, r24
    5aa0:	90 95       	com	r25
    5aa2:	81 e0       	ldi	r24, 0x01	; 1
    5aa4:	60 ef       	ldi	r22, 0xF0	; 240
    5aa6:	49 2f       	mov	r20, r25
    5aa8:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePortMasked>
    5aac:	80 e0       	ldi	r24, 0x00	; 0
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	a8 e4       	ldi	r26, 0x48	; 72
    5ab2:	b2 e4       	ldi	r27, 0x42	; 66
    5ab4:	8d 8b       	std	Y+21, r24	; 0x15
    5ab6:	9e 8b       	std	Y+22, r25	; 0x16
    5ab8:	af 8b       	std	Y+23, r26	; 0x17
    5aba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5abc:	6d 89       	ldd	r22, Y+21	; 0x15
    5abe:	7e 89       	ldd	r23, Y+22	; 0x16
    5ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ac4:	2b ea       	ldi	r18, 0xAB	; 171
    5ac6:	3a ea       	ldi	r19, 0xAA	; 170
    5ac8:	4a ea       	ldi	r20, 0xAA	; 170
    5aca:	50 e4       	ldi	r21, 0x40	; 64
    5acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ad0:	dc 01       	movw	r26, r24
    5ad2:	cb 01       	movw	r24, r22
    5ad4:	89 8b       	std	Y+17, r24	; 0x11
    5ad6:	9a 8b       	std	Y+18, r25	; 0x12
    5ad8:	ab 8b       	std	Y+19, r26	; 0x13
    5ada:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5adc:	69 89       	ldd	r22, Y+17	; 0x11
    5ade:	7a 89       	ldd	r23, Y+18	; 0x12
    5ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	40 e8       	ldi	r20, 0x80	; 128
    5aea:	5f e3       	ldi	r21, 0x3F	; 63
    5aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5af0:	88 23       	and	r24, r24
    5af2:	1c f4       	brge	.+6      	; 0x5afa <keypad_get_pressed_key+0x8e>
		__ticks = 1;
    5af4:	81 e0       	ldi	r24, 0x01	; 1
    5af6:	88 8b       	std	Y+16, r24	; 0x10
    5af8:	91 c0       	rjmp	.+290    	; 0x5c1c <keypad_get_pressed_key+0x1b0>
	else if (__tmp > 255)
    5afa:	69 89       	ldd	r22, Y+17	; 0x11
    5afc:	7a 89       	ldd	r23, Y+18	; 0x12
    5afe:	8b 89       	ldd	r24, Y+19	; 0x13
    5b00:	9c 89       	ldd	r25, Y+20	; 0x14
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	4f e7       	ldi	r20, 0x7F	; 127
    5b08:	53 e4       	ldi	r21, 0x43	; 67
    5b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b0e:	18 16       	cp	r1, r24
    5b10:	0c f0       	brlt	.+2      	; 0x5b14 <keypad_get_pressed_key+0xa8>
    5b12:	7b c0       	rjmp	.+246    	; 0x5c0a <keypad_get_pressed_key+0x19e>
	{
		_delay_ms(__us / 1000.0);
    5b14:	6d 89       	ldd	r22, Y+21	; 0x15
    5b16:	7e 89       	ldd	r23, Y+22	; 0x16
    5b18:	8f 89       	ldd	r24, Y+23	; 0x17
    5b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	4a e7       	ldi	r20, 0x7A	; 122
    5b22:	54 e4       	ldi	r21, 0x44	; 68
    5b24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	8c 87       	std	Y+12, r24	; 0x0c
    5b2e:	9d 87       	std	Y+13, r25	; 0x0d
    5b30:	ae 87       	std	Y+14, r26	; 0x0e
    5b32:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b34:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b36:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b38:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	4a e7       	ldi	r20, 0x7A	; 122
    5b42:	55 e4       	ldi	r21, 0x45	; 69
    5b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b48:	dc 01       	movw	r26, r24
    5b4a:	cb 01       	movw	r24, r22
    5b4c:	88 87       	std	Y+8, r24	; 0x08
    5b4e:	99 87       	std	Y+9, r25	; 0x09
    5b50:	aa 87       	std	Y+10, r26	; 0x0a
    5b52:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5b54:	68 85       	ldd	r22, Y+8	; 0x08
    5b56:	79 85       	ldd	r23, Y+9	; 0x09
    5b58:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b5c:	20 e0       	ldi	r18, 0x00	; 0
    5b5e:	30 e0       	ldi	r19, 0x00	; 0
    5b60:	40 e8       	ldi	r20, 0x80	; 128
    5b62:	5f e3       	ldi	r21, 0x3F	; 63
    5b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b68:	88 23       	and	r24, r24
    5b6a:	2c f4       	brge	.+10     	; 0x5b76 <keypad_get_pressed_key+0x10a>
		__ticks = 1;
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	9f 83       	std	Y+7, r25	; 0x07
    5b72:	8e 83       	std	Y+6, r24	; 0x06
    5b74:	3f c0       	rjmp	.+126    	; 0x5bf4 <keypad_get_pressed_key+0x188>
	else if (__tmp > 65535)
    5b76:	68 85       	ldd	r22, Y+8	; 0x08
    5b78:	79 85       	ldd	r23, Y+9	; 0x09
    5b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b7e:	20 e0       	ldi	r18, 0x00	; 0
    5b80:	3f ef       	ldi	r19, 0xFF	; 255
    5b82:	4f e7       	ldi	r20, 0x7F	; 127
    5b84:	57 e4       	ldi	r21, 0x47	; 71
    5b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b8a:	18 16       	cp	r1, r24
    5b8c:	4c f5       	brge	.+82     	; 0x5be0 <keypad_get_pressed_key+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b90:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b94:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b96:	20 e0       	ldi	r18, 0x00	; 0
    5b98:	30 e0       	ldi	r19, 0x00	; 0
    5b9a:	40 e2       	ldi	r20, 0x20	; 32
    5b9c:	51 e4       	ldi	r21, 0x41	; 65
    5b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	cb 01       	movw	r24, r22
    5ba6:	bc 01       	movw	r22, r24
    5ba8:	cd 01       	movw	r24, r26
    5baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bae:	dc 01       	movw	r26, r24
    5bb0:	cb 01       	movw	r24, r22
    5bb2:	9f 83       	std	Y+7, r25	; 0x07
    5bb4:	8e 83       	std	Y+6, r24	; 0x06
    5bb6:	0f c0       	rjmp	.+30     	; 0x5bd6 <keypad_get_pressed_key+0x16a>
    5bb8:	80 e9       	ldi	r24, 0x90	; 144
    5bba:	91 e0       	ldi	r25, 0x01	; 1
    5bbc:	9d 83       	std	Y+5, r25	; 0x05
    5bbe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    5bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    5bc4:	01 97       	sbiw	r24, 0x01	; 1
    5bc6:	f1 f7       	brne	.-4      	; 0x5bc4 <keypad_get_pressed_key+0x158>
    5bc8:	9d 83       	std	Y+5, r25	; 0x05
    5bca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    5bce:	9f 81       	ldd	r25, Y+7	; 0x07
    5bd0:	01 97       	sbiw	r24, 0x01	; 1
    5bd2:	9f 83       	std	Y+7, r25	; 0x07
    5bd4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    5bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    5bda:	00 97       	sbiw	r24, 0x00	; 0
    5bdc:	69 f7       	brne	.-38     	; 0x5bb8 <keypad_get_pressed_key+0x14c>
    5bde:	24 c0       	rjmp	.+72     	; 0x5c28 <keypad_get_pressed_key+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5be0:	68 85       	ldd	r22, Y+8	; 0x08
    5be2:	79 85       	ldd	r23, Y+9	; 0x09
    5be4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5be6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bec:	dc 01       	movw	r26, r24
    5bee:	cb 01       	movw	r24, r22
    5bf0:	9f 83       	std	Y+7, r25	; 0x07
    5bf2:	8e 83       	std	Y+6, r24	; 0x06
    5bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    5bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    5bf8:	9b 83       	std	Y+3, r25	; 0x03
    5bfa:	8a 83       	std	Y+2, r24	; 0x02
    5bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    5bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    5c00:	01 97       	sbiw	r24, 0x01	; 1
    5c02:	f1 f7       	brne	.-4      	; 0x5c00 <keypad_get_pressed_key+0x194>
    5c04:	9b 83       	std	Y+3, r25	; 0x03
    5c06:	8a 83       	std	Y+2, r24	; 0x02
    5c08:	0f c0       	rjmp	.+30     	; 0x5c28 <keypad_get_pressed_key+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5c0a:	69 89       	ldd	r22, Y+17	; 0x11
    5c0c:	7a 89       	ldd	r23, Y+18	; 0x12
    5c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    5c10:	9c 89       	ldd	r25, Y+20	; 0x14
    5c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c16:	dc 01       	movw	r26, r24
    5c18:	cb 01       	movw	r24, r22
    5c1a:	88 8b       	std	Y+16, r24	; 0x10
    5c1c:	88 89       	ldd	r24, Y+16	; 0x10
    5c1e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5c20:	89 81       	ldd	r24, Y+1	; 0x01
    5c22:	8a 95       	dec	r24
    5c24:	f1 f7       	brne	.-4      	; 0x5c22 <keypad_get_pressed_key+0x1b6>
    5c26:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);
		for(cols_counter = 0; cols_counter < KEYPAD_COLS_COUNT; cols_counter++){
    5c28:	19 8e       	std	Y+25, r1	; 0x19
    5c2a:	18 c0       	rjmp	.+48     	; 0x5c5c <keypad_get_pressed_key+0x1f0>
			if(GPIO_readPin(KEYPAD_COLS_PORT, cols_counter + KEYPAD_COLS_OFFSET) == KEYPAD_BUTTON_PRESSED_LOGIC){
    5c2c:	89 8d       	ldd	r24, Y+25	; 0x19
    5c2e:	98 2f       	mov	r25, r24
    5c30:	9e 5f       	subi	r25, 0xFE	; 254
    5c32:	83 e0       	ldi	r24, 0x03	; 3
    5c34:	69 2f       	mov	r22, r25
    5c36:	0e 94 34 08 	call	0x1068	; 0x1068 <GPIO_readPin>
    5c3a:	88 23       	and	r24, r24
    5c3c:	61 f4       	brne	.+24     	; 0x5c56 <keypad_get_pressed_key+0x1ea>
				return (rows_counter*KEYPAD_COLS_COUNT + (cols_counter));
    5c3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c40:	88 2f       	mov	r24, r24
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	88 0f       	add	r24, r24
    5c46:	99 1f       	adc	r25, r25
    5c48:	88 0f       	add	r24, r24
    5c4a:	99 1f       	adc	r25, r25
    5c4c:	98 2f       	mov	r25, r24
    5c4e:	89 8d       	ldd	r24, Y+25	; 0x19
    5c50:	89 0f       	add	r24, r25
    5c52:	8b 8f       	std	Y+27, r24	; 0x1b
    5c54:	0f c0       	rjmp	.+30     	; 0x5c74 <keypad_get_pressed_key+0x208>

#else
	for(rows_counter = 0; rows_counter < KEYPAD_ROWS_COUNT; rows_counter++){
		GPIO_writePortMasked(KEYPAD_ROWS_PORT, KEYPAD_ROWS_MASK, ~(1 << (rows_counter + KEYPAD_ROWS_OFFSET)));
		_delay_us(50);
		for(cols_counter = 0; cols_counter < KEYPAD_COLS_COUNT; cols_counter++){
    5c56:	89 8d       	ldd	r24, Y+25	; 0x19
    5c58:	8f 5f       	subi	r24, 0xFF	; 255
    5c5a:	89 8f       	std	Y+25, r24	; 0x19
    5c5c:	89 8d       	ldd	r24, Y+25	; 0x19
    5c5e:	84 30       	cpi	r24, 0x04	; 4
    5c60:	28 f3       	brcs	.-54     	; 0x5c2c <keypad_get_pressed_key+0x1c0>
			}
		}
	}

#else
	for(rows_counter = 0; rows_counter < KEYPAD_ROWS_COUNT; rows_counter++){
    5c62:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c64:	8f 5f       	subi	r24, 0xFF	; 255
    5c66:	8a 8f       	std	Y+26, r24	; 0x1a
    5c68:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c6a:	84 30       	cpi	r24, 0x04	; 4
    5c6c:	08 f4       	brcc	.+2      	; 0x5c70 <keypad_get_pressed_key+0x204>
    5c6e:	0a cf       	rjmp	.-492    	; 0x5a84 <keypad_get_pressed_key+0x18>
				return (rows_counter*KEYPAD_COLS_COUNT + (cols_counter));
			}
		}
	}
#endif
	return -1;
    5c70:	8f ef       	ldi	r24, 0xFF	; 255
    5c72:	8b 8f       	std	Y+27, r24	; 0x1b
    5c74:	8b 8d       	ldd	r24, Y+27	; 0x1b

}
    5c76:	6b 96       	adiw	r28, 0x1b	; 27
    5c78:	0f b6       	in	r0, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	de bf       	out	0x3e, r29	; 62
    5c7e:	0f be       	out	0x3f, r0	; 63
    5c80:	cd bf       	out	0x3d, r28	; 61
    5c82:	cf 91       	pop	r28
    5c84:	df 91       	pop	r29
    5c86:	08 95       	ret

00005c88 <main>:
uint32 temp_num = 0;
uint8 new_calc = 1;
uint8 previous_operator;
uint8 result_printed_flag = 0;
uint8 error_flag = 0;
int main(){
    5c88:	0f 93       	push	r16
    5c8a:	1f 93       	push	r17
    5c8c:	df 93       	push	r29
    5c8e:	cf 93       	push	r28
    5c90:	00 d0       	rcall	.+0      	; 0x5c92 <main+0xa>
    5c92:	00 d0       	rcall	.+0      	; 0x5c94 <main+0xc>
    5c94:	cd b7       	in	r28, 0x3d	; 61
    5c96:	de b7       	in	r29, 0x3e	; 62
	keypad_init();
    5c98:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <keypad_init>
	lcd_init(LCD_COMMAND_DISPLAY_ON_CURSOR_OFF);
    5c9c:	8c e0       	ldi	r24, 0x0C	; 12
    5c9e:	0e 94 c0 12 	call	0x2580	; 0x2580 <lcd_init>
	helper_fillWithEndline(strBuffer, 0, 16);
    5ca2:	80 ea       	ldi	r24, 0xA0	; 160
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	40 e0       	ldi	r20, 0x00	; 0
    5ca8:	50 e0       	ldi	r21, 0x00	; 0
    5caa:	60 e0       	ldi	r22, 0x00	; 0
    5cac:	70 e0       	ldi	r23, 0x00	; 0
    5cae:	00 e1       	ldi	r16, 0x10	; 16
    5cb0:	10 e0       	ldi	r17, 0x00	; 0
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	0e 94 de 31 	call	0x63bc	; 0x63bc <helper_fillWithEndline>
	while(1){
		current_key = keypad_get_pressed_key();
    5cba:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <keypad_get_pressed_key>
    5cbe:	80 93 b1 00 	sts	0x00B1, r24
		if((current_key != -1)&&(current_key != previous_key)){
    5cc2:	80 91 b1 00 	lds	r24, 0x00B1
    5cc6:	8f 3f       	cpi	r24, 0xFF	; 255
    5cc8:	09 f4       	brne	.+2      	; 0x5ccc <main+0x44>
    5cca:	fb c2       	rjmp	.+1526   	; 0x62c2 <main+0x63a>
    5ccc:	90 91 b1 00 	lds	r25, 0x00B1
    5cd0:	80 91 91 00 	lds	r24, 0x0091
    5cd4:	98 17       	cp	r25, r24
    5cd6:	09 f4       	brne	.+2      	; 0x5cda <main+0x52>
    5cd8:	f4 c2       	rjmp	.+1512   	; 0x62c2 <main+0x63a>
			if(result_printed_flag == 1){
    5cda:	80 91 9d 00 	lds	r24, 0x009D
    5cde:	81 30       	cpi	r24, 0x01	; 1
    5ce0:	19 f4       	brne	.+6      	; 0x5ce8 <main+0x60>
				current_key = 12;
    5ce2:	8c e0       	ldi	r24, 0x0C	; 12
    5ce4:	80 93 b1 00 	sts	0x00B1, r24
			}
			if(keypad_charMap[current_key] == 'O')
    5ce8:	80 91 b1 00 	lds	r24, 0x00B1
    5cec:	99 27       	eor	r25, r25
    5cee:	87 fd       	sbrc	r24, 7
    5cf0:	90 95       	com	r25
    5cf2:	fc 01       	movw	r30, r24
    5cf4:	ef 57       	subi	r30, 0x7F	; 127
    5cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf8:	80 81       	ld	r24, Z
    5cfa:	8f 34       	cpi	r24, 0x4F	; 79
    5cfc:	c1 f5       	brne	.+112    	; 0x5d6e <main+0xe6>
			{
				helper_fillWithSpaces(strBuffer, 0, 16);
    5cfe:	80 ea       	ldi	r24, 0xA0	; 160
    5d00:	90 e0       	ldi	r25, 0x00	; 0
    5d02:	40 e0       	ldi	r20, 0x00	; 0
    5d04:	50 e0       	ldi	r21, 0x00	; 0
    5d06:	60 e0       	ldi	r22, 0x00	; 0
    5d08:	70 e0       	ldi	r23, 0x00	; 0
    5d0a:	00 e1       	ldi	r16, 0x10	; 16
    5d0c:	10 e0       	ldi	r17, 0x00	; 0
    5d0e:	20 e0       	ldi	r18, 0x00	; 0
    5d10:	30 e0       	ldi	r19, 0x00	; 0
    5d12:	0e 94 9b 31 	call	0x6336	; 0x6336 <helper_fillWithSpaces>
				lcd_setPosition(0,0);
    5d16:	80 e0       	ldi	r24, 0x00	; 0
    5d18:	60 e0       	ldi	r22, 0x00	; 0
    5d1a:	0e 94 b2 2c 	call	0x5964	; 0x5964 <lcd_setPosition>
				lcd_displayString(strBuffer);
    5d1e:	80 ea       	ldi	r24, 0xA0	; 160
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <lcd_displayString>
				lcd_setPosition(1,0);
    5d26:	81 e0       	ldi	r24, 0x01	; 1
    5d28:	60 e0       	ldi	r22, 0x00	; 0
    5d2a:	0e 94 b2 2c 	call	0x5964	; 0x5964 <lcd_setPosition>
				lcd_displayString(strBuffer);
    5d2e:	80 ea       	ldi	r24, 0xA0	; 160
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <lcd_displayString>
				lcd_setPosition(0,0);
    5d36:	80 e0       	ldi	r24, 0x00	; 0
    5d38:	60 e0       	ldi	r22, 0x00	; 0
    5d3a:	0e 94 b2 2c 	call	0x5964	; 0x5964 <lcd_setPosition>
				new_calc = 1;
    5d3e:	81 e0       	ldi	r24, 0x01	; 1
    5d40:	80 93 92 00 	sts	0x0092, r24
				temp_num = 0;
    5d44:	10 92 99 00 	sts	0x0099, r1
    5d48:	10 92 9a 00 	sts	0x009A, r1
    5d4c:	10 92 9b 00 	sts	0x009B, r1
    5d50:	10 92 9c 00 	sts	0x009C, r1
				result_printed_flag = 0;
    5d54:	10 92 9d 00 	sts	0x009D, r1
				result = 0;
    5d58:	10 92 95 00 	sts	0x0095, r1
    5d5c:	10 92 96 00 	sts	0x0096, r1
    5d60:	10 92 97 00 	sts	0x0097, r1
    5d64:	10 92 98 00 	sts	0x0098, r1
				strBuffer_next_digit_flag = 0;
    5d68:	10 92 94 00 	sts	0x0094, r1
    5d6c:	aa c2       	rjmp	.+1364   	; 0x62c2 <main+0x63a>
			}
			else if(keypad_charMap[current_key] == '=')
    5d6e:	80 91 b1 00 	lds	r24, 0x00B1
    5d72:	99 27       	eor	r25, r25
    5d74:	87 fd       	sbrc	r24, 7
    5d76:	90 95       	com	r25
    5d78:	fc 01       	movw	r30, r24
    5d7a:	ef 57       	subi	r30, 0x7F	; 127
    5d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7e:	80 81       	ld	r24, Z
    5d80:	8d 33       	cpi	r24, 0x3D	; 61
    5d82:	09 f0       	breq	.+2      	; 0x5d86 <main+0xfe>
    5d84:	03 c1       	rjmp	.+518    	; 0x5f8c <main+0x304>
			{
				if(!new_calc){
    5d86:	80 91 92 00 	lds	r24, 0x0092
    5d8a:	88 23       	and	r24, r24
    5d8c:	09 f0       	breq	.+2      	; 0x5d90 <main+0x108>
    5d8e:	ca c0       	rjmp	.+404    	; 0x5f24 <main+0x29c>
					if(!((keypad_charMap[previous_key] == '+')||(keypad_charMap[previous_key] == '-')
    5d90:	80 91 91 00 	lds	r24, 0x0091
    5d94:	99 27       	eor	r25, r25
    5d96:	87 fd       	sbrc	r24, 7
    5d98:	90 95       	com	r25
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	ef 57       	subi	r30, 0x7F	; 127
    5d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5da0:	80 81       	ld	r24, Z
    5da2:	8b 32       	cpi	r24, 0x2B	; 43
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <main+0x120>
    5da6:	be c0       	rjmp	.+380    	; 0x5f24 <main+0x29c>
    5da8:	80 91 91 00 	lds	r24, 0x0091
    5dac:	99 27       	eor	r25, r25
    5dae:	87 fd       	sbrc	r24, 7
    5db0:	90 95       	com	r25
    5db2:	fc 01       	movw	r30, r24
    5db4:	ef 57       	subi	r30, 0x7F	; 127
    5db6:	ff 4f       	sbci	r31, 0xFF	; 255
    5db8:	80 81       	ld	r24, Z
    5dba:	8d 32       	cpi	r24, 0x2D	; 45
    5dbc:	09 f4       	brne	.+2      	; 0x5dc0 <main+0x138>
    5dbe:	b2 c0       	rjmp	.+356    	; 0x5f24 <main+0x29c>
    5dc0:	80 91 91 00 	lds	r24, 0x0091
    5dc4:	99 27       	eor	r25, r25
    5dc6:	87 fd       	sbrc	r24, 7
    5dc8:	90 95       	com	r25
    5dca:	fc 01       	movw	r30, r24
    5dcc:	ef 57       	subi	r30, 0x7F	; 127
    5dce:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd0:	80 81       	ld	r24, Z
    5dd2:	8a 32       	cpi	r24, 0x2A	; 42
    5dd4:	09 f4       	brne	.+2      	; 0x5dd8 <main+0x150>
    5dd6:	a6 c0       	rjmp	.+332    	; 0x5f24 <main+0x29c>
    5dd8:	80 91 91 00 	lds	r24, 0x0091
    5ddc:	99 27       	eor	r25, r25
    5dde:	87 fd       	sbrc	r24, 7
    5de0:	90 95       	com	r25
    5de2:	fc 01       	movw	r30, r24
    5de4:	ef 57       	subi	r30, 0x7F	; 127
    5de6:	ff 4f       	sbci	r31, 0xFF	; 255
    5de8:	80 81       	ld	r24, Z
    5dea:	8f 32       	cpi	r24, 0x2F	; 47
    5dec:	09 f4       	brne	.+2      	; 0x5df0 <main+0x168>
    5dee:	9a c0       	rjmp	.+308    	; 0x5f24 <main+0x29c>
							||(keypad_charMap[previous_key] == '*')||(keypad_charMap[previous_key] == '/'))){
						switch(previous_operator){
    5df0:	80 91 9f 00 	lds	r24, 0x009F
    5df4:	28 2f       	mov	r18, r24
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	3c 83       	std	Y+4, r19	; 0x04
    5dfa:	2b 83       	std	Y+3, r18	; 0x03
    5dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    5dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    5e00:	8b 32       	cpi	r24, 0x2B	; 43
    5e02:	91 05       	cpc	r25, r1
    5e04:	c1 f0       	breq	.+48     	; 0x5e36 <main+0x1ae>
    5e06:	2b 81       	ldd	r18, Y+3	; 0x03
    5e08:	3c 81       	ldd	r19, Y+4	; 0x04
    5e0a:	2c 32       	cpi	r18, 0x2C	; 44
    5e0c:	31 05       	cpc	r19, r1
    5e0e:	3c f4       	brge	.+14     	; 0x5e1e <main+0x196>
    5e10:	8b 81       	ldd	r24, Y+3	; 0x03
    5e12:	9c 81       	ldd	r25, Y+4	; 0x04
    5e14:	8a 32       	cpi	r24, 0x2A	; 42
    5e16:	91 05       	cpc	r25, r1
    5e18:	09 f4       	brne	.+2      	; 0x5e1c <main+0x194>
    5e1a:	47 c0       	rjmp	.+142    	; 0x5eaa <main+0x222>
    5e1c:	83 c0       	rjmp	.+262    	; 0x5f24 <main+0x29c>
    5e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    5e20:	3c 81       	ldd	r19, Y+4	; 0x04
    5e22:	2d 32       	cpi	r18, 0x2D	; 45
    5e24:	31 05       	cpc	r19, r1
    5e26:	21 f1       	breq	.+72     	; 0x5e70 <main+0x1e8>
    5e28:	8b 81       	ldd	r24, Y+3	; 0x03
    5e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e2c:	8f 32       	cpi	r24, 0x2F	; 47
    5e2e:	91 05       	cpc	r25, r1
    5e30:	09 f4       	brne	.+2      	; 0x5e34 <main+0x1ac>
    5e32:	5a c0       	rjmp	.+180    	; 0x5ee8 <main+0x260>
    5e34:	77 c0       	rjmp	.+238    	; 0x5f24 <main+0x29c>
							case '+':
								result += temp_num;
    5e36:	80 91 95 00 	lds	r24, 0x0095
    5e3a:	90 91 96 00 	lds	r25, 0x0096
    5e3e:	a0 91 97 00 	lds	r26, 0x0097
    5e42:	b0 91 98 00 	lds	r27, 0x0098
    5e46:	20 91 99 00 	lds	r18, 0x0099
    5e4a:	30 91 9a 00 	lds	r19, 0x009A
    5e4e:	40 91 9b 00 	lds	r20, 0x009B
    5e52:	50 91 9c 00 	lds	r21, 0x009C
    5e56:	82 0f       	add	r24, r18
    5e58:	93 1f       	adc	r25, r19
    5e5a:	a4 1f       	adc	r26, r20
    5e5c:	b5 1f       	adc	r27, r21
    5e5e:	80 93 95 00 	sts	0x0095, r24
    5e62:	90 93 96 00 	sts	0x0096, r25
    5e66:	a0 93 97 00 	sts	0x0097, r26
    5e6a:	b0 93 98 00 	sts	0x0098, r27
    5e6e:	5a c0       	rjmp	.+180    	; 0x5f24 <main+0x29c>
								break;
							case '-':
								result -= temp_num;
    5e70:	80 91 95 00 	lds	r24, 0x0095
    5e74:	90 91 96 00 	lds	r25, 0x0096
    5e78:	a0 91 97 00 	lds	r26, 0x0097
    5e7c:	b0 91 98 00 	lds	r27, 0x0098
    5e80:	20 91 99 00 	lds	r18, 0x0099
    5e84:	30 91 9a 00 	lds	r19, 0x009A
    5e88:	40 91 9b 00 	lds	r20, 0x009B
    5e8c:	50 91 9c 00 	lds	r21, 0x009C
    5e90:	82 1b       	sub	r24, r18
    5e92:	93 0b       	sbc	r25, r19
    5e94:	a4 0b       	sbc	r26, r20
    5e96:	b5 0b       	sbc	r27, r21
    5e98:	80 93 95 00 	sts	0x0095, r24
    5e9c:	90 93 96 00 	sts	0x0096, r25
    5ea0:	a0 93 97 00 	sts	0x0097, r26
    5ea4:	b0 93 98 00 	sts	0x0098, r27
    5ea8:	3d c0       	rjmp	.+122    	; 0x5f24 <main+0x29c>
								break;
							case '*':
								result *= temp_num;
    5eaa:	80 91 95 00 	lds	r24, 0x0095
    5eae:	90 91 96 00 	lds	r25, 0x0096
    5eb2:	a0 91 97 00 	lds	r26, 0x0097
    5eb6:	b0 91 98 00 	lds	r27, 0x0098
    5eba:	20 91 99 00 	lds	r18, 0x0099
    5ebe:	30 91 9a 00 	lds	r19, 0x009A
    5ec2:	40 91 9b 00 	lds	r20, 0x009B
    5ec6:	50 91 9c 00 	lds	r21, 0x009C
    5eca:	bc 01       	movw	r22, r24
    5ecc:	cd 01       	movw	r24, r26
    5ece:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsi3>
    5ed2:	dc 01       	movw	r26, r24
    5ed4:	cb 01       	movw	r24, r22
    5ed6:	80 93 95 00 	sts	0x0095, r24
    5eda:	90 93 96 00 	sts	0x0096, r25
    5ede:	a0 93 97 00 	sts	0x0097, r26
    5ee2:	b0 93 98 00 	sts	0x0098, r27
    5ee6:	1e c0       	rjmp	.+60     	; 0x5f24 <main+0x29c>
								break;
							case '/':
								result /= temp_num;
    5ee8:	80 91 95 00 	lds	r24, 0x0095
    5eec:	90 91 96 00 	lds	r25, 0x0096
    5ef0:	a0 91 97 00 	lds	r26, 0x0097
    5ef4:	b0 91 98 00 	lds	r27, 0x0098
    5ef8:	20 91 99 00 	lds	r18, 0x0099
    5efc:	30 91 9a 00 	lds	r19, 0x009A
    5f00:	40 91 9b 00 	lds	r20, 0x009B
    5f04:	50 91 9c 00 	lds	r21, 0x009C
    5f08:	bc 01       	movw	r22, r24
    5f0a:	cd 01       	movw	r24, r26
    5f0c:	0e 94 3f 32 	call	0x647e	; 0x647e <__udivmodsi4>
    5f10:	da 01       	movw	r26, r20
    5f12:	c9 01       	movw	r24, r18
    5f14:	80 93 95 00 	sts	0x0095, r24
    5f18:	90 93 96 00 	sts	0x0096, r25
    5f1c:	a0 93 97 00 	sts	0x0097, r26
    5f20:	b0 93 98 00 	sts	0x0098, r27
								break;
						}
					}
				}
				lcd_setPosition(1,0);
    5f24:	81 e0       	ldi	r24, 0x01	; 1
    5f26:	60 e0       	ldi	r22, 0x00	; 0
    5f28:	0e 94 b2 2c 	call	0x5964	; 0x5964 <lcd_setPosition>
				lcd_displayString("Result: ");
    5f2c:	80 e6       	ldi	r24, 0x60	; 96
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <lcd_displayString>
				itoa(result, strBuffer, 10);
    5f34:	80 91 95 00 	lds	r24, 0x0095
    5f38:	90 91 96 00 	lds	r25, 0x0096
    5f3c:	a0 91 97 00 	lds	r26, 0x0097
    5f40:	b0 91 98 00 	lds	r27, 0x0098
    5f44:	20 ea       	ldi	r18, 0xA0	; 160
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	b9 01       	movw	r22, r18
    5f4a:	4a e0       	ldi	r20, 0x0A	; 10
    5f4c:	50 e0       	ldi	r21, 0x00	; 0
    5f4e:	0e 94 98 32 	call	0x6530	; 0x6530 <itoa>
				lcd_displayString(strBuffer);
    5f52:	80 ea       	ldi	r24, 0xA0	; 160
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <lcd_displayString>
				new_calc = 1;
    5f5a:	81 e0       	ldi	r24, 0x01	; 1
    5f5c:	80 93 92 00 	sts	0x0092, r24
				result = 0;
    5f60:	10 92 95 00 	sts	0x0095, r1
    5f64:	10 92 96 00 	sts	0x0096, r1
    5f68:	10 92 97 00 	sts	0x0097, r1
    5f6c:	10 92 98 00 	sts	0x0098, r1
				temp_num = 0;
    5f70:	10 92 99 00 	sts	0x0099, r1
    5f74:	10 92 9a 00 	sts	0x009A, r1
    5f78:	10 92 9b 00 	sts	0x009B, r1
    5f7c:	10 92 9c 00 	sts	0x009C, r1
				result_printed_flag = 1;
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	80 93 9d 00 	sts	0x009D, r24
				strBuffer_next_digit_flag = 0;
    5f86:	10 92 94 00 	sts	0x0094, r1
    5f8a:	9b c1       	rjmp	.+822    	; 0x62c2 <main+0x63a>
			}
			else if((keypad_charMap[current_key] >= '0')&&(keypad_charMap[current_key] <= '9')){
    5f8c:	80 91 b1 00 	lds	r24, 0x00B1
    5f90:	99 27       	eor	r25, r25
    5f92:	87 fd       	sbrc	r24, 7
    5f94:	90 95       	com	r25
    5f96:	fc 01       	movw	r30, r24
    5f98:	ef 57       	subi	r30, 0x7F	; 127
    5f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9c:	80 81       	ld	r24, Z
    5f9e:	80 33       	cpi	r24, 0x30	; 48
    5fa0:	08 f4       	brcc	.+2      	; 0x5fa4 <main+0x31c>
    5fa2:	5c c0       	rjmp	.+184    	; 0x605c <main+0x3d4>
    5fa4:	80 91 b1 00 	lds	r24, 0x00B1
    5fa8:	99 27       	eor	r25, r25
    5faa:	87 fd       	sbrc	r24, 7
    5fac:	90 95       	com	r25
    5fae:	fc 01       	movw	r30, r24
    5fb0:	ef 57       	subi	r30, 0x7F	; 127
    5fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb4:	80 81       	ld	r24, Z
    5fb6:	8a 33       	cpi	r24, 0x3A	; 58
    5fb8:	08 f0       	brcs	.+2      	; 0x5fbc <main+0x334>
    5fba:	50 c0       	rjmp	.+160    	; 0x605c <main+0x3d4>
				temp_num *= 10;
    5fbc:	80 91 99 00 	lds	r24, 0x0099
    5fc0:	90 91 9a 00 	lds	r25, 0x009A
    5fc4:	a0 91 9b 00 	lds	r26, 0x009B
    5fc8:	b0 91 9c 00 	lds	r27, 0x009C
    5fcc:	2a e0       	ldi	r18, 0x0A	; 10
    5fce:	30 e0       	ldi	r19, 0x00	; 0
    5fd0:	40 e0       	ldi	r20, 0x00	; 0
    5fd2:	50 e0       	ldi	r21, 0x00	; 0
    5fd4:	bc 01       	movw	r22, r24
    5fd6:	cd 01       	movw	r24, r26
    5fd8:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsi3>
    5fdc:	dc 01       	movw	r26, r24
    5fde:	cb 01       	movw	r24, r22
    5fe0:	80 93 99 00 	sts	0x0099, r24
    5fe4:	90 93 9a 00 	sts	0x009A, r25
    5fe8:	a0 93 9b 00 	sts	0x009B, r26
    5fec:	b0 93 9c 00 	sts	0x009C, r27
				temp_num += (keypad_charMap[current_key] - '0');
    5ff0:	80 91 b1 00 	lds	r24, 0x00B1
    5ff4:	99 27       	eor	r25, r25
    5ff6:	87 fd       	sbrc	r24, 7
    5ff8:	90 95       	com	r25
    5ffa:	fc 01       	movw	r30, r24
    5ffc:	ef 57       	subi	r30, 0x7F	; 127
    5ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    6000:	80 81       	ld	r24, Z
    6002:	88 2f       	mov	r24, r24
    6004:	90 e0       	ldi	r25, 0x00	; 0
    6006:	c0 97       	sbiw	r24, 0x30	; 48
    6008:	9c 01       	movw	r18, r24
    600a:	44 27       	eor	r20, r20
    600c:	37 fd       	sbrc	r19, 7
    600e:	40 95       	com	r20
    6010:	54 2f       	mov	r21, r20
    6012:	80 91 99 00 	lds	r24, 0x0099
    6016:	90 91 9a 00 	lds	r25, 0x009A
    601a:	a0 91 9b 00 	lds	r26, 0x009B
    601e:	b0 91 9c 00 	lds	r27, 0x009C
    6022:	82 0f       	add	r24, r18
    6024:	93 1f       	adc	r25, r19
    6026:	a4 1f       	adc	r26, r20
    6028:	b5 1f       	adc	r27, r21
    602a:	80 93 99 00 	sts	0x0099, r24
    602e:	90 93 9a 00 	sts	0x009A, r25
    6032:	a0 93 9b 00 	sts	0x009B, r26
    6036:	b0 93 9c 00 	sts	0x009C, r27
				strBuffer_next_digit_flag++;
    603a:	80 91 94 00 	lds	r24, 0x0094
    603e:	8f 5f       	subi	r24, 0xFF	; 255
    6040:	80 93 94 00 	sts	0x0094, r24
				lcd_displayCharacter(keypad_charMap[current_key]);
    6044:	80 91 b1 00 	lds	r24, 0x00B1
    6048:	99 27       	eor	r25, r25
    604a:	87 fd       	sbrc	r24, 7
    604c:	90 95       	com	r25
    604e:	fc 01       	movw	r30, r24
    6050:	ef 57       	subi	r30, 0x7F	; 127
    6052:	ff 4f       	sbci	r31, 0xFF	; 255
    6054:	80 81       	ld	r24, Z
    6056:	0e 94 01 25 	call	0x4a02	; 0x4a02 <lcd_displayCharacter>
    605a:	33 c1       	rjmp	.+614    	; 0x62c2 <main+0x63a>

			}
			else
			{
				if((new_calc == 1) && (strBuffer_next_digit_flag != 0)){
    605c:	80 91 92 00 	lds	r24, 0x0092
    6060:	81 30       	cpi	r24, 0x01	; 1
    6062:	51 f5       	brne	.+84     	; 0x60b8 <main+0x430>
    6064:	80 91 94 00 	lds	r24, 0x0094
    6068:	88 23       	and	r24, r24
    606a:	31 f1       	breq	.+76     	; 0x60b8 <main+0x430>
					new_calc = 0;
    606c:	10 92 92 00 	sts	0x0092, r1
					result = temp_num;
    6070:	80 91 99 00 	lds	r24, 0x0099
    6074:	90 91 9a 00 	lds	r25, 0x009A
    6078:	a0 91 9b 00 	lds	r26, 0x009B
    607c:	b0 91 9c 00 	lds	r27, 0x009C
    6080:	80 93 95 00 	sts	0x0095, r24
    6084:	90 93 96 00 	sts	0x0096, r25
    6088:	a0 93 97 00 	sts	0x0097, r26
    608c:	b0 93 98 00 	sts	0x0098, r27
					temp_num = 0;
    6090:	10 92 99 00 	sts	0x0099, r1
    6094:	10 92 9a 00 	sts	0x009A, r1
    6098:	10 92 9b 00 	sts	0x009B, r1
    609c:	10 92 9c 00 	sts	0x009C, r1
					previous_operator = keypad_charMap[current_key];
    60a0:	80 91 b1 00 	lds	r24, 0x00B1
    60a4:	99 27       	eor	r25, r25
    60a6:	87 fd       	sbrc	r24, 7
    60a8:	90 95       	com	r25
    60aa:	fc 01       	movw	r30, r24
    60ac:	ef 57       	subi	r30, 0x7F	; 127
    60ae:	ff 4f       	sbci	r31, 0xFF	; 255
    60b0:	80 81       	ld	r24, Z
    60b2:	80 93 9f 00 	sts	0x009F, r24
    60b6:	ee c0       	rjmp	.+476    	; 0x6294 <main+0x60c>
				}else if((new_calc == 1) && (strBuffer_next_digit_flag == 0)){
    60b8:	80 91 92 00 	lds	r24, 0x0092
    60bc:	81 30       	cpi	r24, 0x01	; 1
    60be:	e9 f5       	brne	.+122    	; 0x613a <main+0x4b2>
    60c0:	80 91 94 00 	lds	r24, 0x0094
    60c4:	88 23       	and	r24, r24
    60c6:	c9 f5       	brne	.+114    	; 0x613a <main+0x4b2>
					helper_fillWithSpaces(strBuffer, 0, 16);
    60c8:	80 ea       	ldi	r24, 0xA0	; 160
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	40 e0       	ldi	r20, 0x00	; 0
    60ce:	50 e0       	ldi	r21, 0x00	; 0
    60d0:	60 e0       	ldi	r22, 0x00	; 0
    60d2:	70 e0       	ldi	r23, 0x00	; 0
    60d4:	00 e1       	ldi	r16, 0x10	; 16
    60d6:	10 e0       	ldi	r17, 0x00	; 0
    60d8:	20 e0       	ldi	r18, 0x00	; 0
    60da:	30 e0       	ldi	r19, 0x00	; 0
    60dc:	0e 94 9b 31 	call	0x6336	; 0x6336 <helper_fillWithSpaces>
					lcd_setPosition(0,0);
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	60 e0       	ldi	r22, 0x00	; 0
    60e4:	0e 94 b2 2c 	call	0x5964	; 0x5964 <lcd_setPosition>
					lcd_displayString(strBuffer);
    60e8:	80 ea       	ldi	r24, 0xA0	; 160
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <lcd_displayString>
					lcd_setPosition(1,0);
    60f0:	81 e0       	ldi	r24, 0x01	; 1
    60f2:	60 e0       	ldi	r22, 0x00	; 0
    60f4:	0e 94 b2 2c 	call	0x5964	; 0x5964 <lcd_setPosition>
					lcd_displayString(strBuffer);
    60f8:	80 ea       	ldi	r24, 0xA0	; 160
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <lcd_displayString>
					lcd_setPosition(0,0);
    6100:	80 e0       	ldi	r24, 0x00	; 0
    6102:	60 e0       	ldi	r22, 0x00	; 0
    6104:	0e 94 b2 2c 	call	0x5964	; 0x5964 <lcd_setPosition>
					new_calc = 1;
    6108:	81 e0       	ldi	r24, 0x01	; 1
    610a:	80 93 92 00 	sts	0x0092, r24
					temp_num = 0;
    610e:	10 92 99 00 	sts	0x0099, r1
    6112:	10 92 9a 00 	sts	0x009A, r1
    6116:	10 92 9b 00 	sts	0x009B, r1
    611a:	10 92 9c 00 	sts	0x009C, r1
					result_printed_flag = 0;
    611e:	10 92 9d 00 	sts	0x009D, r1
					result = 0;
    6122:	10 92 95 00 	sts	0x0095, r1
    6126:	10 92 96 00 	sts	0x0096, r1
    612a:	10 92 97 00 	sts	0x0097, r1
    612e:	10 92 98 00 	sts	0x0098, r1
					error_flag = 1;
    6132:	81 e0       	ldi	r24, 0x01	; 1
    6134:	80 93 9e 00 	sts	0x009E, r24
    6138:	ad c0       	rjmp	.+346    	; 0x6294 <main+0x60c>
				}else{
					switch(previous_operator){
    613a:	80 91 9f 00 	lds	r24, 0x009F
    613e:	28 2f       	mov	r18, r24
    6140:	30 e0       	ldi	r19, 0x00	; 0
    6142:	3a 83       	std	Y+2, r19	; 0x02
    6144:	29 83       	std	Y+1, r18	; 0x01
    6146:	89 81       	ldd	r24, Y+1	; 0x01
    6148:	9a 81       	ldd	r25, Y+2	; 0x02
    614a:	8b 32       	cpi	r24, 0x2B	; 43
    614c:	91 05       	cpc	r25, r1
    614e:	c1 f0       	breq	.+48     	; 0x6180 <main+0x4f8>
    6150:	29 81       	ldd	r18, Y+1	; 0x01
    6152:	3a 81       	ldd	r19, Y+2	; 0x02
    6154:	2c 32       	cpi	r18, 0x2C	; 44
    6156:	31 05       	cpc	r19, r1
    6158:	3c f4       	brge	.+14     	; 0x6168 <main+0x4e0>
    615a:	89 81       	ldd	r24, Y+1	; 0x01
    615c:	9a 81       	ldd	r25, Y+2	; 0x02
    615e:	8a 32       	cpi	r24, 0x2A	; 42
    6160:	91 05       	cpc	r25, r1
    6162:	09 f4       	brne	.+2      	; 0x6166 <main+0x4de>
    6164:	47 c0       	rjmp	.+142    	; 0x61f4 <main+0x56c>
    6166:	83 c0       	rjmp	.+262    	; 0x626e <main+0x5e6>
    6168:	29 81       	ldd	r18, Y+1	; 0x01
    616a:	3a 81       	ldd	r19, Y+2	; 0x02
    616c:	2d 32       	cpi	r18, 0x2D	; 45
    616e:	31 05       	cpc	r19, r1
    6170:	21 f1       	breq	.+72     	; 0x61ba <main+0x532>
    6172:	89 81       	ldd	r24, Y+1	; 0x01
    6174:	9a 81       	ldd	r25, Y+2	; 0x02
    6176:	8f 32       	cpi	r24, 0x2F	; 47
    6178:	91 05       	cpc	r25, r1
    617a:	09 f4       	brne	.+2      	; 0x617e <main+0x4f6>
    617c:	5a c0       	rjmp	.+180    	; 0x6232 <main+0x5aa>
    617e:	77 c0       	rjmp	.+238    	; 0x626e <main+0x5e6>
					case '+':
						result += temp_num;
    6180:	80 91 95 00 	lds	r24, 0x0095
    6184:	90 91 96 00 	lds	r25, 0x0096
    6188:	a0 91 97 00 	lds	r26, 0x0097
    618c:	b0 91 98 00 	lds	r27, 0x0098
    6190:	20 91 99 00 	lds	r18, 0x0099
    6194:	30 91 9a 00 	lds	r19, 0x009A
    6198:	40 91 9b 00 	lds	r20, 0x009B
    619c:	50 91 9c 00 	lds	r21, 0x009C
    61a0:	82 0f       	add	r24, r18
    61a2:	93 1f       	adc	r25, r19
    61a4:	a4 1f       	adc	r26, r20
    61a6:	b5 1f       	adc	r27, r21
    61a8:	80 93 95 00 	sts	0x0095, r24
    61ac:	90 93 96 00 	sts	0x0096, r25
    61b0:	a0 93 97 00 	sts	0x0097, r26
    61b4:	b0 93 98 00 	sts	0x0098, r27
    61b8:	5a c0       	rjmp	.+180    	; 0x626e <main+0x5e6>
						break;
					case '-':
						result -= temp_num;
    61ba:	80 91 95 00 	lds	r24, 0x0095
    61be:	90 91 96 00 	lds	r25, 0x0096
    61c2:	a0 91 97 00 	lds	r26, 0x0097
    61c6:	b0 91 98 00 	lds	r27, 0x0098
    61ca:	20 91 99 00 	lds	r18, 0x0099
    61ce:	30 91 9a 00 	lds	r19, 0x009A
    61d2:	40 91 9b 00 	lds	r20, 0x009B
    61d6:	50 91 9c 00 	lds	r21, 0x009C
    61da:	82 1b       	sub	r24, r18
    61dc:	93 0b       	sbc	r25, r19
    61de:	a4 0b       	sbc	r26, r20
    61e0:	b5 0b       	sbc	r27, r21
    61e2:	80 93 95 00 	sts	0x0095, r24
    61e6:	90 93 96 00 	sts	0x0096, r25
    61ea:	a0 93 97 00 	sts	0x0097, r26
    61ee:	b0 93 98 00 	sts	0x0098, r27
    61f2:	3d c0       	rjmp	.+122    	; 0x626e <main+0x5e6>
						break;
					case '*':
						result *= temp_num;
    61f4:	80 91 95 00 	lds	r24, 0x0095
    61f8:	90 91 96 00 	lds	r25, 0x0096
    61fc:	a0 91 97 00 	lds	r26, 0x0097
    6200:	b0 91 98 00 	lds	r27, 0x0098
    6204:	20 91 99 00 	lds	r18, 0x0099
    6208:	30 91 9a 00 	lds	r19, 0x009A
    620c:	40 91 9b 00 	lds	r20, 0x009B
    6210:	50 91 9c 00 	lds	r21, 0x009C
    6214:	bc 01       	movw	r22, r24
    6216:	cd 01       	movw	r24, r26
    6218:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsi3>
    621c:	dc 01       	movw	r26, r24
    621e:	cb 01       	movw	r24, r22
    6220:	80 93 95 00 	sts	0x0095, r24
    6224:	90 93 96 00 	sts	0x0096, r25
    6228:	a0 93 97 00 	sts	0x0097, r26
    622c:	b0 93 98 00 	sts	0x0098, r27
    6230:	1e c0       	rjmp	.+60     	; 0x626e <main+0x5e6>
						break;
					case '/':
						result /= temp_num;
    6232:	80 91 95 00 	lds	r24, 0x0095
    6236:	90 91 96 00 	lds	r25, 0x0096
    623a:	a0 91 97 00 	lds	r26, 0x0097
    623e:	b0 91 98 00 	lds	r27, 0x0098
    6242:	20 91 99 00 	lds	r18, 0x0099
    6246:	30 91 9a 00 	lds	r19, 0x009A
    624a:	40 91 9b 00 	lds	r20, 0x009B
    624e:	50 91 9c 00 	lds	r21, 0x009C
    6252:	bc 01       	movw	r22, r24
    6254:	cd 01       	movw	r24, r26
    6256:	0e 94 3f 32 	call	0x647e	; 0x647e <__udivmodsi4>
    625a:	da 01       	movw	r26, r20
    625c:	c9 01       	movw	r24, r18
    625e:	80 93 95 00 	sts	0x0095, r24
    6262:	90 93 96 00 	sts	0x0096, r25
    6266:	a0 93 97 00 	sts	0x0097, r26
    626a:	b0 93 98 00 	sts	0x0098, r27
						break;
					}
					temp_num = 0;
    626e:	10 92 99 00 	sts	0x0099, r1
    6272:	10 92 9a 00 	sts	0x009A, r1
    6276:	10 92 9b 00 	sts	0x009B, r1
    627a:	10 92 9c 00 	sts	0x009C, r1
					previous_operator = keypad_charMap[current_key];
    627e:	80 91 b1 00 	lds	r24, 0x00B1
    6282:	99 27       	eor	r25, r25
    6284:	87 fd       	sbrc	r24, 7
    6286:	90 95       	com	r25
    6288:	fc 01       	movw	r30, r24
    628a:	ef 57       	subi	r30, 0x7F	; 127
    628c:	ff 4f       	sbci	r31, 0xFF	; 255
    628e:	80 81       	ld	r24, Z
    6290:	80 93 9f 00 	sts	0x009F, r24
				}
				if(error_flag){
    6294:	80 91 9e 00 	lds	r24, 0x009E
    6298:	88 23       	and	r24, r24
    629a:	19 f0       	breq	.+6      	; 0x62a2 <main+0x61a>
					error_flag = 0;
    629c:	10 92 9e 00 	sts	0x009E, r1
    62a0:	10 c0       	rjmp	.+32     	; 0x62c2 <main+0x63a>
				}
				else{
					strBuffer_next_digit_flag++;
    62a2:	80 91 94 00 	lds	r24, 0x0094
    62a6:	8f 5f       	subi	r24, 0xFF	; 255
    62a8:	80 93 94 00 	sts	0x0094, r24
					lcd_displayCharacter(keypad_charMap[current_key]);
    62ac:	80 91 b1 00 	lds	r24, 0x00B1
    62b0:	99 27       	eor	r25, r25
    62b2:	87 fd       	sbrc	r24, 7
    62b4:	90 95       	com	r25
    62b6:	fc 01       	movw	r30, r24
    62b8:	ef 57       	subi	r30, 0x7F	; 127
    62ba:	ff 4f       	sbci	r31, 0xFF	; 255
    62bc:	80 81       	ld	r24, Z
    62be:	0e 94 01 25 	call	0x4a02	; 0x4a02 <lcd_displayCharacter>
				}

			}
		}
		previous_key = current_key;
    62c2:	80 91 b1 00 	lds	r24, 0x00B1
    62c6:	80 93 91 00 	sts	0x0091, r24
    62ca:	f7 cc       	rjmp	.-1554   	; 0x5cba <main+0x32>

000062cc <helper_countDigits>:
 *      Author: mecam
 */

#include "helper_functions.h"

uint8 helper_countDigits(uint32 num){
    62cc:	df 93       	push	r29
    62ce:	cf 93       	push	r28
    62d0:	00 d0       	rcall	.+0      	; 0x62d2 <helper_countDigits+0x6>
    62d2:	00 d0       	rcall	.+0      	; 0x62d4 <helper_countDigits+0x8>
    62d4:	0f 92       	push	r0
    62d6:	cd b7       	in	r28, 0x3d	; 61
    62d8:	de b7       	in	r29, 0x3e	; 62
    62da:	6a 83       	std	Y+2, r22	; 0x02
    62dc:	7b 83       	std	Y+3, r23	; 0x03
    62de:	8c 83       	std	Y+4, r24	; 0x04
    62e0:	9d 83       	std	Y+5, r25	; 0x05
	uint8 digitsCount = 1;
    62e2:	81 e0       	ldi	r24, 0x01	; 1
    62e4:	89 83       	std	Y+1, r24	; 0x01
    62e6:	15 c0       	rjmp	.+42     	; 0x6312 <helper_countDigits+0x46>
	while(num > 9){
		digitsCount++;
    62e8:	89 81       	ldd	r24, Y+1	; 0x01
    62ea:	8f 5f       	subi	r24, 0xFF	; 255
    62ec:	89 83       	std	Y+1, r24	; 0x01
		num /= 10;
    62ee:	8a 81       	ldd	r24, Y+2	; 0x02
    62f0:	9b 81       	ldd	r25, Y+3	; 0x03
    62f2:	ac 81       	ldd	r26, Y+4	; 0x04
    62f4:	bd 81       	ldd	r27, Y+5	; 0x05
    62f6:	2a e0       	ldi	r18, 0x0A	; 10
    62f8:	30 e0       	ldi	r19, 0x00	; 0
    62fa:	40 e0       	ldi	r20, 0x00	; 0
    62fc:	50 e0       	ldi	r21, 0x00	; 0
    62fe:	bc 01       	movw	r22, r24
    6300:	cd 01       	movw	r24, r26
    6302:	0e 94 3f 32 	call	0x647e	; 0x647e <__udivmodsi4>
    6306:	da 01       	movw	r26, r20
    6308:	c9 01       	movw	r24, r18
    630a:	8a 83       	std	Y+2, r24	; 0x02
    630c:	9b 83       	std	Y+3, r25	; 0x03
    630e:	ac 83       	std	Y+4, r26	; 0x04
    6310:	bd 83       	std	Y+5, r27	; 0x05

#include "helper_functions.h"

uint8 helper_countDigits(uint32 num){
	uint8 digitsCount = 1;
	while(num > 9){
    6312:	8a 81       	ldd	r24, Y+2	; 0x02
    6314:	9b 81       	ldd	r25, Y+3	; 0x03
    6316:	ac 81       	ldd	r26, Y+4	; 0x04
    6318:	bd 81       	ldd	r27, Y+5	; 0x05
    631a:	8a 30       	cpi	r24, 0x0A	; 10
    631c:	91 05       	cpc	r25, r1
    631e:	a1 05       	cpc	r26, r1
    6320:	b1 05       	cpc	r27, r1
    6322:	10 f7       	brcc	.-60     	; 0x62e8 <helper_countDigits+0x1c>
		digitsCount++;
		num /= 10;
	}
	return digitsCount;
    6324:	89 81       	ldd	r24, Y+1	; 0x01
}
    6326:	0f 90       	pop	r0
    6328:	0f 90       	pop	r0
    632a:	0f 90       	pop	r0
    632c:	0f 90       	pop	r0
    632e:	0f 90       	pop	r0
    6330:	cf 91       	pop	r28
    6332:	df 91       	pop	r29
    6334:	08 95       	ret

00006336 <helper_fillWithSpaces>:

void helper_fillWithSpaces(char *str, uint32 offset, uint32 string_length){
    6336:	0f 93       	push	r16
    6338:	1f 93       	push	r17
    633a:	df 93       	push	r29
    633c:	cf 93       	push	r28
    633e:	cd b7       	in	r28, 0x3d	; 61
    6340:	de b7       	in	r29, 0x3e	; 62
    6342:	2a 97       	sbiw	r28, 0x0a	; 10
    6344:	0f b6       	in	r0, 0x3f	; 63
    6346:	f8 94       	cli
    6348:	de bf       	out	0x3e, r29	; 62
    634a:	0f be       	out	0x3f, r0	; 63
    634c:	cd bf       	out	0x3d, r28	; 61
    634e:	9a 83       	std	Y+2, r25	; 0x02
    6350:	89 83       	std	Y+1, r24	; 0x01
    6352:	4b 83       	std	Y+3, r20	; 0x03
    6354:	5c 83       	std	Y+4, r21	; 0x04
    6356:	6d 83       	std	Y+5, r22	; 0x05
    6358:	7e 83       	std	Y+6, r23	; 0x06
    635a:	0f 83       	std	Y+7, r16	; 0x07
    635c:	18 87       	std	Y+8, r17	; 0x08
    635e:	29 87       	std	Y+9, r18	; 0x09
    6360:	3a 87       	std	Y+10, r19	; 0x0a
    6362:	14 c0       	rjmp	.+40     	; 0x638c <helper_fillWithSpaces+0x56>
	while(offset < string_length){
		str[offset] = ' ';
    6364:	2b 81       	ldd	r18, Y+3	; 0x03
    6366:	3c 81       	ldd	r19, Y+4	; 0x04
    6368:	89 81       	ldd	r24, Y+1	; 0x01
    636a:	9a 81       	ldd	r25, Y+2	; 0x02
    636c:	fc 01       	movw	r30, r24
    636e:	e2 0f       	add	r30, r18
    6370:	f3 1f       	adc	r31, r19
    6372:	80 e2       	ldi	r24, 0x20	; 32
    6374:	80 83       	st	Z, r24
		offset++;
    6376:	8b 81       	ldd	r24, Y+3	; 0x03
    6378:	9c 81       	ldd	r25, Y+4	; 0x04
    637a:	ad 81       	ldd	r26, Y+5	; 0x05
    637c:	be 81       	ldd	r27, Y+6	; 0x06
    637e:	01 96       	adiw	r24, 0x01	; 1
    6380:	a1 1d       	adc	r26, r1
    6382:	b1 1d       	adc	r27, r1
    6384:	8b 83       	std	Y+3, r24	; 0x03
    6386:	9c 83       	std	Y+4, r25	; 0x04
    6388:	ad 83       	std	Y+5, r26	; 0x05
    638a:	be 83       	std	Y+6, r27	; 0x06
	}
	return digitsCount;
}

void helper_fillWithSpaces(char *str, uint32 offset, uint32 string_length){
	while(offset < string_length){
    638c:	2b 81       	ldd	r18, Y+3	; 0x03
    638e:	3c 81       	ldd	r19, Y+4	; 0x04
    6390:	4d 81       	ldd	r20, Y+5	; 0x05
    6392:	5e 81       	ldd	r21, Y+6	; 0x06
    6394:	8f 81       	ldd	r24, Y+7	; 0x07
    6396:	98 85       	ldd	r25, Y+8	; 0x08
    6398:	a9 85       	ldd	r26, Y+9	; 0x09
    639a:	ba 85       	ldd	r27, Y+10	; 0x0a
    639c:	28 17       	cp	r18, r24
    639e:	39 07       	cpc	r19, r25
    63a0:	4a 07       	cpc	r20, r26
    63a2:	5b 07       	cpc	r21, r27
    63a4:	f8 f2       	brcs	.-66     	; 0x6364 <helper_fillWithSpaces+0x2e>
		str[offset] = ' ';
		offset++;
	}
}
    63a6:	2a 96       	adiw	r28, 0x0a	; 10
    63a8:	0f b6       	in	r0, 0x3f	; 63
    63aa:	f8 94       	cli
    63ac:	de bf       	out	0x3e, r29	; 62
    63ae:	0f be       	out	0x3f, r0	; 63
    63b0:	cd bf       	out	0x3d, r28	; 61
    63b2:	cf 91       	pop	r28
    63b4:	df 91       	pop	r29
    63b6:	1f 91       	pop	r17
    63b8:	0f 91       	pop	r16
    63ba:	08 95       	ret

000063bc <helper_fillWithEndline>:

void helper_fillWithEndline(char *str, uint32 offset, uint32 string_length){
    63bc:	0f 93       	push	r16
    63be:	1f 93       	push	r17
    63c0:	df 93       	push	r29
    63c2:	cf 93       	push	r28
    63c4:	cd b7       	in	r28, 0x3d	; 61
    63c6:	de b7       	in	r29, 0x3e	; 62
    63c8:	2a 97       	sbiw	r28, 0x0a	; 10
    63ca:	0f b6       	in	r0, 0x3f	; 63
    63cc:	f8 94       	cli
    63ce:	de bf       	out	0x3e, r29	; 62
    63d0:	0f be       	out	0x3f, r0	; 63
    63d2:	cd bf       	out	0x3d, r28	; 61
    63d4:	9a 83       	std	Y+2, r25	; 0x02
    63d6:	89 83       	std	Y+1, r24	; 0x01
    63d8:	4b 83       	std	Y+3, r20	; 0x03
    63da:	5c 83       	std	Y+4, r21	; 0x04
    63dc:	6d 83       	std	Y+5, r22	; 0x05
    63de:	7e 83       	std	Y+6, r23	; 0x06
    63e0:	0f 83       	std	Y+7, r16	; 0x07
    63e2:	18 87       	std	Y+8, r17	; 0x08
    63e4:	29 87       	std	Y+9, r18	; 0x09
    63e6:	3a 87       	std	Y+10, r19	; 0x0a
    63e8:	13 c0       	rjmp	.+38     	; 0x6410 <helper_fillWithEndline+0x54>
	while(offset < string_length){
		str[offset] = '\0';
    63ea:	2b 81       	ldd	r18, Y+3	; 0x03
    63ec:	3c 81       	ldd	r19, Y+4	; 0x04
    63ee:	89 81       	ldd	r24, Y+1	; 0x01
    63f0:	9a 81       	ldd	r25, Y+2	; 0x02
    63f2:	fc 01       	movw	r30, r24
    63f4:	e2 0f       	add	r30, r18
    63f6:	f3 1f       	adc	r31, r19
    63f8:	10 82       	st	Z, r1
		offset++;
    63fa:	8b 81       	ldd	r24, Y+3	; 0x03
    63fc:	9c 81       	ldd	r25, Y+4	; 0x04
    63fe:	ad 81       	ldd	r26, Y+5	; 0x05
    6400:	be 81       	ldd	r27, Y+6	; 0x06
    6402:	01 96       	adiw	r24, 0x01	; 1
    6404:	a1 1d       	adc	r26, r1
    6406:	b1 1d       	adc	r27, r1
    6408:	8b 83       	std	Y+3, r24	; 0x03
    640a:	9c 83       	std	Y+4, r25	; 0x04
    640c:	ad 83       	std	Y+5, r26	; 0x05
    640e:	be 83       	std	Y+6, r27	; 0x06
		offset++;
	}
}

void helper_fillWithEndline(char *str, uint32 offset, uint32 string_length){
	while(offset < string_length){
    6410:	2b 81       	ldd	r18, Y+3	; 0x03
    6412:	3c 81       	ldd	r19, Y+4	; 0x04
    6414:	4d 81       	ldd	r20, Y+5	; 0x05
    6416:	5e 81       	ldd	r21, Y+6	; 0x06
    6418:	8f 81       	ldd	r24, Y+7	; 0x07
    641a:	98 85       	ldd	r25, Y+8	; 0x08
    641c:	a9 85       	ldd	r26, Y+9	; 0x09
    641e:	ba 85       	ldd	r27, Y+10	; 0x0a
    6420:	28 17       	cp	r18, r24
    6422:	39 07       	cpc	r19, r25
    6424:	4a 07       	cpc	r20, r26
    6426:	5b 07       	cpc	r21, r27
    6428:	00 f3       	brcs	.-64     	; 0x63ea <helper_fillWithEndline+0x2e>
		str[offset] = '\0';
		offset++;
	}
}
    642a:	2a 96       	adiw	r28, 0x0a	; 10
    642c:	0f b6       	in	r0, 0x3f	; 63
    642e:	f8 94       	cli
    6430:	de bf       	out	0x3e, r29	; 62
    6432:	0f be       	out	0x3f, r0	; 63
    6434:	cd bf       	out	0x3d, r28	; 61
    6436:	cf 91       	pop	r28
    6438:	df 91       	pop	r29
    643a:	1f 91       	pop	r17
    643c:	0f 91       	pop	r16
    643e:	08 95       	ret

00006440 <__mulsi3>:
    6440:	62 9f       	mul	r22, r18
    6442:	d0 01       	movw	r26, r0
    6444:	73 9f       	mul	r23, r19
    6446:	f0 01       	movw	r30, r0
    6448:	82 9f       	mul	r24, r18
    644a:	e0 0d       	add	r30, r0
    644c:	f1 1d       	adc	r31, r1
    644e:	64 9f       	mul	r22, r20
    6450:	e0 0d       	add	r30, r0
    6452:	f1 1d       	adc	r31, r1
    6454:	92 9f       	mul	r25, r18
    6456:	f0 0d       	add	r31, r0
    6458:	83 9f       	mul	r24, r19
    645a:	f0 0d       	add	r31, r0
    645c:	74 9f       	mul	r23, r20
    645e:	f0 0d       	add	r31, r0
    6460:	65 9f       	mul	r22, r21
    6462:	f0 0d       	add	r31, r0
    6464:	99 27       	eor	r25, r25
    6466:	72 9f       	mul	r23, r18
    6468:	b0 0d       	add	r27, r0
    646a:	e1 1d       	adc	r30, r1
    646c:	f9 1f       	adc	r31, r25
    646e:	63 9f       	mul	r22, r19
    6470:	b0 0d       	add	r27, r0
    6472:	e1 1d       	adc	r30, r1
    6474:	f9 1f       	adc	r31, r25
    6476:	bd 01       	movw	r22, r26
    6478:	cf 01       	movw	r24, r30
    647a:	11 24       	eor	r1, r1
    647c:	08 95       	ret

0000647e <__udivmodsi4>:
    647e:	a1 e2       	ldi	r26, 0x21	; 33
    6480:	1a 2e       	mov	r1, r26
    6482:	aa 1b       	sub	r26, r26
    6484:	bb 1b       	sub	r27, r27
    6486:	fd 01       	movw	r30, r26
    6488:	0d c0       	rjmp	.+26     	; 0x64a4 <__udivmodsi4_ep>

0000648a <__udivmodsi4_loop>:
    648a:	aa 1f       	adc	r26, r26
    648c:	bb 1f       	adc	r27, r27
    648e:	ee 1f       	adc	r30, r30
    6490:	ff 1f       	adc	r31, r31
    6492:	a2 17       	cp	r26, r18
    6494:	b3 07       	cpc	r27, r19
    6496:	e4 07       	cpc	r30, r20
    6498:	f5 07       	cpc	r31, r21
    649a:	20 f0       	brcs	.+8      	; 0x64a4 <__udivmodsi4_ep>
    649c:	a2 1b       	sub	r26, r18
    649e:	b3 0b       	sbc	r27, r19
    64a0:	e4 0b       	sbc	r30, r20
    64a2:	f5 0b       	sbc	r31, r21

000064a4 <__udivmodsi4_ep>:
    64a4:	66 1f       	adc	r22, r22
    64a6:	77 1f       	adc	r23, r23
    64a8:	88 1f       	adc	r24, r24
    64aa:	99 1f       	adc	r25, r25
    64ac:	1a 94       	dec	r1
    64ae:	69 f7       	brne	.-38     	; 0x648a <__udivmodsi4_loop>
    64b0:	60 95       	com	r22
    64b2:	70 95       	com	r23
    64b4:	80 95       	com	r24
    64b6:	90 95       	com	r25
    64b8:	9b 01       	movw	r18, r22
    64ba:	ac 01       	movw	r20, r24
    64bc:	bd 01       	movw	r22, r26
    64be:	cf 01       	movw	r24, r30
    64c0:	08 95       	ret

000064c2 <__prologue_saves__>:
    64c2:	2f 92       	push	r2
    64c4:	3f 92       	push	r3
    64c6:	4f 92       	push	r4
    64c8:	5f 92       	push	r5
    64ca:	6f 92       	push	r6
    64cc:	7f 92       	push	r7
    64ce:	8f 92       	push	r8
    64d0:	9f 92       	push	r9
    64d2:	af 92       	push	r10
    64d4:	bf 92       	push	r11
    64d6:	cf 92       	push	r12
    64d8:	df 92       	push	r13
    64da:	ef 92       	push	r14
    64dc:	ff 92       	push	r15
    64de:	0f 93       	push	r16
    64e0:	1f 93       	push	r17
    64e2:	cf 93       	push	r28
    64e4:	df 93       	push	r29
    64e6:	cd b7       	in	r28, 0x3d	; 61
    64e8:	de b7       	in	r29, 0x3e	; 62
    64ea:	ca 1b       	sub	r28, r26
    64ec:	db 0b       	sbc	r29, r27
    64ee:	0f b6       	in	r0, 0x3f	; 63
    64f0:	f8 94       	cli
    64f2:	de bf       	out	0x3e, r29	; 62
    64f4:	0f be       	out	0x3f, r0	; 63
    64f6:	cd bf       	out	0x3d, r28	; 61
    64f8:	09 94       	ijmp

000064fa <__epilogue_restores__>:
    64fa:	2a 88       	ldd	r2, Y+18	; 0x12
    64fc:	39 88       	ldd	r3, Y+17	; 0x11
    64fe:	48 88       	ldd	r4, Y+16	; 0x10
    6500:	5f 84       	ldd	r5, Y+15	; 0x0f
    6502:	6e 84       	ldd	r6, Y+14	; 0x0e
    6504:	7d 84       	ldd	r7, Y+13	; 0x0d
    6506:	8c 84       	ldd	r8, Y+12	; 0x0c
    6508:	9b 84       	ldd	r9, Y+11	; 0x0b
    650a:	aa 84       	ldd	r10, Y+10	; 0x0a
    650c:	b9 84       	ldd	r11, Y+9	; 0x09
    650e:	c8 84       	ldd	r12, Y+8	; 0x08
    6510:	df 80       	ldd	r13, Y+7	; 0x07
    6512:	ee 80       	ldd	r14, Y+6	; 0x06
    6514:	fd 80       	ldd	r15, Y+5	; 0x05
    6516:	0c 81       	ldd	r16, Y+4	; 0x04
    6518:	1b 81       	ldd	r17, Y+3	; 0x03
    651a:	aa 81       	ldd	r26, Y+2	; 0x02
    651c:	b9 81       	ldd	r27, Y+1	; 0x01
    651e:	ce 0f       	add	r28, r30
    6520:	d1 1d       	adc	r29, r1
    6522:	0f b6       	in	r0, 0x3f	; 63
    6524:	f8 94       	cli
    6526:	de bf       	out	0x3e, r29	; 62
    6528:	0f be       	out	0x3f, r0	; 63
    652a:	cd bf       	out	0x3d, r28	; 61
    652c:	ed 01       	movw	r28, r26
    652e:	08 95       	ret

00006530 <itoa>:
    6530:	fb 01       	movw	r30, r22
    6532:	9f 01       	movw	r18, r30
    6534:	e8 94       	clt
    6536:	42 30       	cpi	r20, 0x02	; 2
    6538:	c4 f0       	brlt	.+48     	; 0x656a <itoa+0x3a>
    653a:	45 32       	cpi	r20, 0x25	; 37
    653c:	b4 f4       	brge	.+44     	; 0x656a <itoa+0x3a>
    653e:	4a 30       	cpi	r20, 0x0A	; 10
    6540:	29 f4       	brne	.+10     	; 0x654c <itoa+0x1c>
    6542:	97 fb       	bst	r25, 7
    6544:	1e f4       	brtc	.+6      	; 0x654c <itoa+0x1c>
    6546:	90 95       	com	r25
    6548:	81 95       	neg	r24
    654a:	9f 4f       	sbci	r25, 0xFF	; 255
    654c:	64 2f       	mov	r22, r20
    654e:	77 27       	eor	r23, r23
    6550:	0e 94 c9 32 	call	0x6592	; 0x6592 <__udivmodhi4>
    6554:	80 5d       	subi	r24, 0xD0	; 208
    6556:	8a 33       	cpi	r24, 0x3A	; 58
    6558:	0c f0       	brlt	.+2      	; 0x655c <itoa+0x2c>
    655a:	89 5d       	subi	r24, 0xD9	; 217
    655c:	81 93       	st	Z+, r24
    655e:	cb 01       	movw	r24, r22
    6560:	00 97       	sbiw	r24, 0x00	; 0
    6562:	a1 f7       	brne	.-24     	; 0x654c <itoa+0x1c>
    6564:	16 f4       	brtc	.+4      	; 0x656a <itoa+0x3a>
    6566:	5d e2       	ldi	r21, 0x2D	; 45
    6568:	51 93       	st	Z+, r21
    656a:	10 82       	st	Z, r1
    656c:	c9 01       	movw	r24, r18
    656e:	0c 94 b9 32 	jmp	0x6572	; 0x6572 <strrev>

00006572 <strrev>:
    6572:	dc 01       	movw	r26, r24
    6574:	fc 01       	movw	r30, r24
    6576:	67 2f       	mov	r22, r23
    6578:	71 91       	ld	r23, Z+
    657a:	77 23       	and	r23, r23
    657c:	e1 f7       	brne	.-8      	; 0x6576 <strrev+0x4>
    657e:	32 97       	sbiw	r30, 0x02	; 2
    6580:	04 c0       	rjmp	.+8      	; 0x658a <strrev+0x18>
    6582:	7c 91       	ld	r23, X
    6584:	6d 93       	st	X+, r22
    6586:	70 83       	st	Z, r23
    6588:	62 91       	ld	r22, -Z
    658a:	ae 17       	cp	r26, r30
    658c:	bf 07       	cpc	r27, r31
    658e:	c8 f3       	brcs	.-14     	; 0x6582 <strrev+0x10>
    6590:	08 95       	ret

00006592 <__udivmodhi4>:
    6592:	aa 1b       	sub	r26, r26
    6594:	bb 1b       	sub	r27, r27
    6596:	51 e1       	ldi	r21, 0x11	; 17
    6598:	07 c0       	rjmp	.+14     	; 0x65a8 <__udivmodhi4_ep>

0000659a <__udivmodhi4_loop>:
    659a:	aa 1f       	adc	r26, r26
    659c:	bb 1f       	adc	r27, r27
    659e:	a6 17       	cp	r26, r22
    65a0:	b7 07       	cpc	r27, r23
    65a2:	10 f0       	brcs	.+4      	; 0x65a8 <__udivmodhi4_ep>
    65a4:	a6 1b       	sub	r26, r22
    65a6:	b7 0b       	sbc	r27, r23

000065a8 <__udivmodhi4_ep>:
    65a8:	88 1f       	adc	r24, r24
    65aa:	99 1f       	adc	r25, r25
    65ac:	5a 95       	dec	r21
    65ae:	a9 f7       	brne	.-22     	; 0x659a <__udivmodhi4_loop>
    65b0:	80 95       	com	r24
    65b2:	90 95       	com	r25
    65b4:	bc 01       	movw	r22, r24
    65b6:	cd 01       	movw	r24, r26
    65b8:	08 95       	ret

000065ba <_exit>:
    65ba:	f8 94       	cli

000065bc <__stop_program>:
    65bc:	ff cf       	rjmp	.-2      	; 0x65bc <__stop_program>
